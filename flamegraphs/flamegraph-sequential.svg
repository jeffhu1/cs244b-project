<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="29"><g><title>sequential`num_cpus::get_num_cpus (1 samples, 3.45%)</title><rect x="3.4483%" y="533" width="3.4483%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="3.6983%" y="543.50">seq..</text></g><g><title>sequential`tokio::runtime::builder::Builder::build (2 samples, 6.90%)</title><rect x="3.4483%" y="549" width="6.8966%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="3.6983%" y="559.50">sequentia..</text></g><g><title>sequential`tokio::runtime::blocking::pool::BlockingPool::new (1 samples, 3.45%)</title><rect x="6.8966%" y="533" width="3.4483%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="7.1466%" y="543.50">seq..</text></g><g><title>sequential`rustls::vecbuf::ChunkVecBuffer::write_to (2 samples, 6.90%)</title><rect x="10.3448%" y="277" width="6.8966%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="2"/><text x="10.5948%" y="287.50">sequentia..</text></g><g><title>sequential`&lt;tokio_rustls::common::Stream&lt;IO,C&gt;::write_io::Writer&lt;T&gt; as std::io::Write&gt;::write_vectored (2 samples, 6.90%)</title><rect x="10.3448%" y="261" width="6.8966%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="2"/><text x="10.5948%" y="271.50">sequentia..</text></g><g><title>sequential`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2 samples, 6.90%)</title><rect x="10.3448%" y="245" width="6.8966%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="2"/><text x="10.5948%" y="255.50">sequentia..</text></g><g><title>sequential`tokio::runtime::io::registration::Registration::poll_io (2 samples, 6.90%)</title><rect x="10.3448%" y="229" width="6.8966%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="2"/><text x="10.5948%" y="239.50">sequentia..</text></g><g><title>sequential`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (2 samples, 6.90%)</title><rect x="10.3448%" y="213" width="6.8966%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="2"/><text x="10.5948%" y="223.50">sequentia..</text></g><g><title>libsystem_kernel.dylib`writev (2 samples, 6.90%)</title><rect x="10.3448%" y="197" width="6.8966%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="2"/><text x="10.5948%" y="207.50">libsystem..</text></g><g><title>sequential`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (3 samples, 10.34%)</title><rect x="10.3448%" y="405" width="10.3448%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="3"/><text x="10.5948%" y="415.50">sequential`&lt;fut..</text></g><g><title>sequential`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 10.34%)</title><rect x="10.3448%" y="389" width="10.3448%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="3"/><text x="10.5948%" y="399.50">sequential`&lt;fut..</text></g><g><title>sequential`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 10.34%)</title><rect x="10.3448%" y="373" width="10.3448%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="3"/><text x="10.5948%" y="383.50">sequential`&lt;fut..</text></g><g><title>sequential`&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (3 samples, 10.34%)</title><rect x="10.3448%" y="357" width="10.3448%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="3"/><text x="10.5948%" y="367.50">sequential`&lt;hyp..</text></g><g><title>sequential`reqwest::connect::with_timeout::_{{closure}} (3 samples, 10.34%)</title><rect x="10.3448%" y="341" width="10.3448%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="3"/><text x="10.5948%" y="351.50">sequential`reqw..</text></g><g><title>sequential`reqwest::connect::Connector::connect_with_maybe_proxy::_{{closure}} (3 samples, 10.34%)</title><rect x="10.3448%" y="325" width="10.3448%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="3"/><text x="10.5948%" y="335.50">sequential`reqw..</text></g><g><title>sequential`&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (3 samples, 10.34%)</title><rect x="10.3448%" y="309" width="10.3448%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="3"/><text x="10.5948%" y="319.50">sequential`&lt;hyp..</text></g><g><title>sequential`tokio_rustls::common::Stream&lt;IO,C&gt;::handshake (3 samples, 10.34%)</title><rect x="10.3448%" y="293" width="10.3448%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="3"/><text x="10.5948%" y="303.50">sequential`toki..</text></g><g><title>sequential`tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (1 samples, 3.45%)</title><rect x="17.2414%" y="277" width="3.4483%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="17.4914%" y="287.50">seq..</text></g><g><title>sequential`rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 3.45%)</title><rect x="17.2414%" y="261" width="3.4483%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="17.4914%" y="271.50">seq..</text></g><g><title>sequential`&lt;rustls::client::tls13::ExpectCertificateVerify as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 3.45%)</title><rect x="17.2414%" y="245" width="3.4483%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="17.4914%" y="255.50">seq..</text></g><g><title>sequential`&lt;rustls::verify::WebPkiVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (1 samples, 3.45%)</title><rect x="17.2414%" y="229" width="3.4483%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="17.4914%" y="239.50">seq..</text></g><g><title>sequential`rustls::verify::verify_server_cert_signed_by_trust_anchor (1 samples, 3.45%)</title><rect x="17.2414%" y="213" width="3.4483%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="17.4914%" y="223.50">seq..</text></g><g><title>sequential`webpki::end_entity::EndEntityCert::verify_for_usage (1 samples, 3.45%)</title><rect x="17.2414%" y="197" width="3.4483%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="17.4914%" y="207.50">seq..</text></g><g><title>sequential`webpki::verify_cert::build_chain_inner (1 samples, 3.45%)</title><rect x="17.2414%" y="181" width="3.4483%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="17.4914%" y="191.50">seq..</text></g><g><title>sequential`webpki::verify_cert::build_chain_inner (1 samples, 3.45%)</title><rect x="17.2414%" y="165" width="3.4483%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="17.4914%" y="175.50">seq..</text></g><g><title>sequential`webpki::signed_data::verify_signed_data (1 samples, 3.45%)</title><rect x="17.2414%" y="149" width="3.4483%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="1"/><text x="17.4914%" y="159.50">seq..</text></g><g><title>sequential`&lt;ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm as ring::signature::VerificationAlgorithm&gt;::verify (1 samples, 3.45%)</title><rect x="17.2414%" y="133" width="3.4483%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="17.4914%" y="143.50">seq..</text></g><g><title>sequential`core::ops::function::FnOnce::call_once (1 samples, 3.45%)</title><rect x="17.2414%" y="117" width="3.4483%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="17.4914%" y="127.50">seq..</text></g><g><title>sequential`ring_core_0_17_8_p384_point_mul (1 samples, 3.45%)</title><rect x="17.2414%" y="101" width="3.4483%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="17.4914%" y="111.50">seq..</text></g><g><title>sequential`ring_core_0_17_8_LIMBS_add_mod (1 samples, 3.45%)</title><rect x="17.2414%" y="85" width="3.4483%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="17.4914%" y="95.50">seq..</text></g><g><title>sequential`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (4 samples, 13.79%)</title><rect x="10.3448%" y="453" width="13.7931%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="4"/><text x="10.5948%" y="463.50">sequential`&lt;reqwest::..</text></g><g><title>sequential`hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::_{{closure}} (4 samples, 13.79%)</title><rect x="10.3448%" y="437" width="13.7931%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="4"/><text x="10.5948%" y="447.50">sequential`hyper::cli..</text></g><g><title>sequential`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4 samples, 13.79%)</title><rect x="10.3448%" y="421" width="13.7931%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="4"/><text x="10.5948%" y="431.50">sequential`&lt;futures_u..</text></g><g><title>sequential`&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 3.45%)</title><rect x="20.6897%" y="405" width="3.4483%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="1"/><text x="20.9397%" y="415.50">seq..</text></g><g><title>sequential`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 3.45%)</title><rect x="20.6897%" y="389" width="3.4483%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="1"/><text x="20.9397%" y="399.50">seq..</text></g><g><title>sequential`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 3.45%)</title><rect x="20.6897%" y="373" width="3.4483%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="1"/><text x="20.9397%" y="383.50">seq..</text></g><g><title>sequential`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 3.45%)</title><rect x="20.6897%" y="357" width="3.4483%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="1"/><text x="20.9397%" y="367.50">seq..</text></g><g><title>sequential`&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 3.45%)</title><rect x="20.6897%" y="341" width="3.4483%" height="15" fill="rgb(245,192,40)" fg:x="6" fg:w="1"/><text x="20.9397%" y="351.50">seq..</text></g><g><title>sequential`reqwest::connect::with_timeout::_{{closure}} (1 samples, 3.45%)</title><rect x="20.6897%" y="325" width="3.4483%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="1"/><text x="20.9397%" y="335.50">seq..</text></g><g><title>sequential`reqwest::connect::Connector::connect_with_maybe_proxy::_{{closure}} (1 samples, 3.45%)</title><rect x="20.6897%" y="309" width="3.4483%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="1"/><text x="20.9397%" y="319.50">seq..</text></g><g><title>sequential`&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (1 samples, 3.45%)</title><rect x="20.6897%" y="293" width="3.4483%" height="15" fill="rgb(231,60,39)" fg:x="6" fg:w="1"/><text x="20.9397%" y="303.50">seq..</text></g><g><title>sequential`&lt;hyper::client::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (1 samples, 3.45%)</title><rect x="20.6897%" y="277" width="3.4483%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="1"/><text x="20.9397%" y="287.50">seq..</text></g><g><title>sequential`&lt;reqwest::dns::gai::GaiResolver as reqwest::dns::resolve::Resolve&gt;::resolve (1 samples, 3.45%)</title><rect x="20.6897%" y="261" width="3.4483%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="1"/><text x="20.9397%" y="271.50">seq..</text></g><g><title>sequential`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 3.45%)</title><rect x="20.6897%" y="245" width="3.4483%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="1"/><text x="20.9397%" y="255.50">seq..</text></g><g><title>sequential`tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 3.45%)</title><rect x="20.6897%" y="229" width="3.4483%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="1"/><text x="20.9397%" y="239.50">seq..</text></g><g><title>sequential`std::thread::Builder::spawn_unchecked (1 samples, 3.45%)</title><rect x="20.6897%" y="213" width="3.4483%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="1"/><text x="20.9397%" y="223.50">seq..</text></g><g><title>sequential`serde_json::de::from_slice (1 samples, 3.45%)</title><rect x="24.1379%" y="453" width="3.4483%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="1"/><text x="24.3879%" y="463.50">seq..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (1 samples, 3.45%)</title><rect x="24.1379%" y="437" width="3.4483%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="1"/><text x="24.3879%" y="447.50">seq..</text></g><g><title>sequential`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::end_raw_buffering (1 samples, 3.45%)</title><rect x="24.1379%" y="421" width="3.4483%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="1"/><text x="24.3879%" y="431.50">seq..</text></g><g><title>sequential`primitive_types::serde::_&lt;impl serde::de::Deserialize for primitive_types::U256&gt;::deserialize (1 samples, 3.45%)</title><rect x="27.5862%" y="341" width="3.4483%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="27.8362%" y="351.50">seq..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 3.45%)</title><rect x="27.5862%" y="325" width="3.4483%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="1"/><text x="27.8362%" y="335.50">seq..</text></g><g><title>sequential`&lt;impl_serde::serialize::deserialize_check_len::Visitor as serde::de::Visitor&gt;::visit_str (1 samples, 3.45%)</title><rect x="27.5862%" y="309" width="3.4483%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="1"/><text x="27.8362%" y="319.50">seq..</text></g><g><title>sequential`impl_serde::serialize::from_hex_raw (1 samples, 3.45%)</title><rect x="27.5862%" y="293" width="3.4483%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="1"/><text x="27.8362%" y="303.50">seq..</text></g><g><title>sequential`&lt;ethers_providers::rpc::provider::Provider&lt;P&gt; as ethers_providers::middleware::Middleware&gt;::get_block_with_txs::_{{closure}} (7 samples, 24.14%)</title><rect x="10.3448%" y="517" width="24.1379%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="7"/><text x="10.5948%" y="527.50">sequential`&lt;ethers_providers::rpc::pro..</text></g><g><title>sequential`ethers_providers::rpc::provider::Provider&lt;P&gt;::request::_{{closure}} (7 samples, 24.14%)</title><rect x="10.3448%" y="501" width="24.1379%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="7"/><text x="10.5948%" y="511.50">sequential`ethers_providers::rpc::prov..</text></g><g><title>sequential`&lt;tracing_futures::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 24.14%)</title><rect x="10.3448%" y="485" width="24.1379%" height="15" fill="rgb(251,118,11)" fg:x="3" fg:w="7"/><text x="10.5948%" y="495.50">sequential`&lt;tracing_futures::Instrumen..</text></g><g><title>sequential`&lt;ethers_providers::rpc::transports::http::Provider as ethers_providers::rpc::connections::JsonRpcClient&gt;::request::_{{closure}} (7 samples, 24.14%)</title><rect x="10.3448%" y="469" width="24.1379%" height="15" fill="rgb(217,147,25)" fg:x="3" fg:w="7"/><text x="10.5948%" y="479.50">sequential`&lt;ethers_providers::rpc::tra..</text></g><g><title>sequential`serde_json::de::from_str (2 samples, 6.90%)</title><rect x="27.5862%" y="453" width="6.8966%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="2"/><text x="27.8362%" y="463.50">sequentia..</text></g><g><title>sequential`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (2 samples, 6.90%)</title><rect x="27.5862%" y="437" width="6.8966%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="2"/><text x="27.8362%" y="447.50">sequentia..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (2 samples, 6.90%)</title><rect x="27.5862%" y="421" width="6.8966%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="2"/><text x="27.8362%" y="431.50">sequentia..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (2 samples, 6.90%)</title><rect x="27.5862%" y="405" width="6.8966%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="2"/><text x="27.8362%" y="415.50">sequentia..</text></g><g><title>sequential`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 6.90%)</title><rect x="27.5862%" y="389" width="6.8966%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="2"/><text x="27.8362%" y="399.50">sequentia..</text></g><g><title>sequential`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 6.90%)</title><rect x="27.5862%" y="373" width="6.8966%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="2"/><text x="27.8362%" y="383.50">sequentia..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (2 samples, 6.90%)</title><rect x="27.5862%" y="357" width="6.8966%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="2"/><text x="27.8362%" y="367.50">sequentia..</text></g><g><title>sequential`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1 samples, 3.45%)</title><rect x="31.0345%" y="341" width="3.4483%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="1"/><text x="31.2845%" y="351.50">seq..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 3.45%)</title><rect x="31.0345%" y="325" width="3.4483%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="1"/><text x="31.2845%" y="335.50">lib..</text></g><g><title>sequential`core::ops::function::FnOnce::call_once (1 samples, 3.45%)</title><rect x="34.4828%" y="437" width="3.4483%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="1"/><text x="34.7328%" y="447.50">seq..</text></g><g><title>sequential`system_configuration::dynamic_store::SCDynamicStore::get_proxies (1 samples, 3.45%)</title><rect x="37.9310%" y="405" width="3.4483%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="1"/><text x="38.1810%" y="415.50">seq..</text></g><g><title>SystemConfiguration`SCDynamicStoreCopyProxiesWithOptions (1 samples, 3.45%)</title><rect x="37.9310%" y="389" width="3.4483%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="1"/><text x="38.1810%" y="399.50">Sys..</text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 3.45%)</title><rect x="37.9310%" y="373" width="3.4483%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="38.1810%" y="383.50">Cor..</text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 3.45%)</title><rect x="37.9310%" y="357" width="3.4483%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="1"/><text x="38.1810%" y="367.50">Cor..</text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 3.45%)</title><rect x="37.9310%" y="341" width="3.4483%" height="15" fill="rgb(244,35,45)" fg:x="11" fg:w="1"/><text x="38.1810%" y="351.50">Cor..</text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 3.45%)</title><rect x="37.9310%" y="325" width="3.4483%" height="15" fill="rgb(251,115,12)" fg:x="11" fg:w="1"/><text x="38.1810%" y="335.50">Cor..</text></g><g><title>CoreFoundation`__76-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:]_block_invoke (1 samples, 3.45%)</title><rect x="37.9310%" y="309" width="3.4483%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="1"/><text x="38.1810%" y="319.50">Cor..</text></g><g><title>CoreFoundation`-[CFPrefsSource copyValueForKey:] (1 samples, 3.45%)</title><rect x="37.9310%" y="293" width="3.4483%" height="15" fill="rgb(233,84,52)" fg:x="11" fg:w="1"/><text x="38.1810%" y="303.50">Cor..</text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_copyValueForKey:] (1 samples, 3.45%)</title><rect x="37.9310%" y="277" width="3.4483%" height="15" fill="rgb(207,117,47)" fg:x="11" fg:w="1"/><text x="38.1810%" y="287.50">Cor..</text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_getDictionary:] (1 samples, 3.45%)</title><rect x="37.9310%" y="261" width="3.4483%" height="15" fill="rgb(249,43,39)" fg:x="11" fg:w="1"/><text x="38.1810%" y="271.50">Cor..</text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_generationCountFromListOfSources:count:] (1 samples, 3.45%)</title><rect x="37.9310%" y="245" width="3.4483%" height="15" fill="rgb(209,38,44)" fg:x="11" fg:w="1"/><text x="38.1810%" y="255.50">Cor..</text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource synchronouslySendSystemMessage:andUserMessage:andDirectMessage:replyHandler:] (1 samples, 3.45%)</title><rect x="37.9310%" y="229" width="3.4483%" height="15" fill="rgb(236,212,23)" fg:x="11" fg:w="1"/><text x="38.1810%" y="239.50">Cor..</text></g><g><title>CoreFoundation`CFPREFERENCES_IS_WAITING_FOR_SYSTEM_CFPREFSD (1 samples, 3.45%)</title><rect x="37.9310%" y="213" width="3.4483%" height="15" fill="rgb(242,79,21)" fg:x="11" fg:w="1"/><text x="38.1810%" y="223.50">Cor..</text></g><g><title>CoreFoundation`__103-[CFPrefsSearchListSource synchronouslySendSystemMessage:andUserMessage:andDirectMessage:replyHandler:]_block_invoke (1 samples, 3.45%)</title><rect x="37.9310%" y="197" width="3.4483%" height="15" fill="rgb(211,96,35)" fg:x="11" fg:w="1"/><text x="38.1810%" y="207.50">Cor..</text></g><g><title>CoreFoundation`-[_CFXPreferences withConnectionForRole:andUserIdentifier:performBlock:] (1 samples, 3.45%)</title><rect x="37.9310%" y="181" width="3.4483%" height="15" fill="rgb(253,215,40)" fg:x="11" fg:w="1"/><text x="38.1810%" y="191.50">Cor..</text></g><g><title>CoreFoundation`__103-[CFPrefsSearchListSource synchronouslySendSystemMessage:andUserMessage:andDirectMessage:replyHandler:]_block_invoke_2 (1 samples, 3.45%)</title><rect x="37.9310%" y="165" width="3.4483%" height="15" fill="rgb(211,81,21)" fg:x="11" fg:w="1"/><text x="38.1810%" y="175.50">Cor..</text></g><g><title>CoreFoundation`__80-[CFPrefsSearchListSource alreadylocked_generationCountFromListOfSources:count:]_block_invoke (1 samples, 3.45%)</title><rect x="37.9310%" y="149" width="3.4483%" height="15" fill="rgb(208,190,38)" fg:x="11" fg:w="1"/><text x="38.1810%" y="159.50">Cor..</text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource handleReply:toRequestNewDataMessage:onConnection:retryCount:error:] (1 samples, 3.45%)</title><rect x="37.9310%" y="133" width="3.4483%" height="15" fill="rgb(235,213,38)" fg:x="11" fg:w="1"/><text x="38.1810%" y="143.50">Cor..</text></g><g><title>libxpc.dylib`xpc_array_apply (1 samples, 3.45%)</title><rect x="37.9310%" y="117" width="3.4483%" height="15" fill="rgb(237,122,38)" fg:x="11" fg:w="1"/><text x="38.1810%" y="127.50">lib..</text></g><g><title>CoreFoundation`__93-[CFPrefsSearchListSource handleReply:toRequestNewDataMessage:onConnection:retryCount:error:]_block_invoke (1 samples, 3.45%)</title><rect x="37.9310%" y="101" width="3.4483%" height="15" fill="rgb(244,218,35)" fg:x="11" fg:w="1"/><text x="38.1810%" y="111.50">Cor..</text></g><g><title>CoreFoundation`-[CFPrefsPlistSource handleReply:toRequestNewDataMessage:onConnection:retryCount:error:] (1 samples, 3.45%)</title><rect x="37.9310%" y="85" width="3.4483%" height="15" fill="rgb(240,68,47)" fg:x="11" fg:w="1"/><text x="38.1810%" y="95.50">Cor..</text></g><g><title>libxpc.dylib`xpc_dictionary_get_uint64 (1 samples, 3.45%)</title><rect x="37.9310%" y="69" width="3.4483%" height="15" fill="rgb(210,16,53)" fg:x="11" fg:w="1"/><text x="38.1810%" y="79.50">lib..</text></g><g><title>libxpc.dylib`_xpc_dictionary_look_up_fast (1 samples, 3.45%)</title><rect x="37.9310%" y="53" width="3.4483%" height="15" fill="rgb(235,124,12)" fg:x="11" fg:w="1"/><text x="38.1810%" y="63.50">lib..</text></g><g><title>libxpc.dylib`_xpc_dictionary_look_up (1 samples, 3.45%)</title><rect x="37.9310%" y="37" width="3.4483%" height="15" fill="rgb(224,169,11)" fg:x="11" fg:w="1"/><text x="38.1810%" y="47.50">lib..</text></g><g><title>sequential`&lt;ethers_providers::rpc::provider::Provider&lt;ethers_providers::rpc::transports::http::Provider&gt; as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (3 samples, 10.34%)</title><rect x="34.4828%" y="517" width="10.3448%" height="15" fill="rgb(250,166,2)" fg:x="10" fg:w="3"/><text x="34.7328%" y="527.50">sequential`&lt;eth..</text></g><g><title>sequential`&lt;reqwest::async_impl::client::Client as core::default::Default&gt;::default (3 samples, 10.34%)</title><rect x="34.4828%" y="501" width="10.3448%" height="15" fill="rgb(242,216,29)" fg:x="10" fg:w="3"/><text x="34.7328%" y="511.50">sequential`&lt;req..</text></g><g><title>sequential`reqwest::async_impl::client::ClientBuilder::build (3 samples, 10.34%)</title><rect x="34.4828%" y="485" width="10.3448%" height="15" fill="rgb(230,116,27)" fg:x="10" fg:w="3"/><text x="34.7328%" y="495.50">sequential`reqw..</text></g><g><title>sequential`once_cell::imp::OnceCell&lt;T&gt;::initialize (3 samples, 10.34%)</title><rect x="34.4828%" y="469" width="10.3448%" height="15" fill="rgb(228,99,48)" fg:x="10" fg:w="3"/><text x="34.7328%" y="479.50">sequential`once..</text></g><g><title>sequential`once_cell::imp::initialize_or_wait (3 samples, 10.34%)</title><rect x="34.4828%" y="453" width="10.3448%" height="15" fill="rgb(253,11,6)" fg:x="10" fg:w="3"/><text x="34.7328%" y="463.50">sequential`once..</text></g><g><title>sequential`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (2 samples, 6.90%)</title><rect x="37.9310%" y="437" width="6.8966%" height="15" fill="rgb(247,143,39)" fg:x="11" fg:w="2"/><text x="38.1810%" y="447.50">sequentia..</text></g><g><title>sequential`core::ops::function::FnOnce::call_once (2 samples, 6.90%)</title><rect x="37.9310%" y="421" width="6.8966%" height="15" fill="rgb(236,97,10)" fg:x="11" fg:w="2"/><text x="38.1810%" y="431.50">sequentia..</text></g><g><title>sequential`system_configuration::dynamic_store::SCDynamicStoreBuilder&lt;T&gt;::build (1 samples, 3.45%)</title><rect x="41.3793%" y="405" width="3.4483%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="1"/><text x="41.6293%" y="415.50">seq..</text></g><g><title>sequential`system_configuration::dynamic_store::SCDynamicStore::create (1 samples, 3.45%)</title><rect x="41.3793%" y="389" width="3.4483%" height="15" fill="rgb(216,164,2)" fg:x="12" fg:w="1"/><text x="41.6293%" y="399.50">seq..</text></g><g><title>SystemConfiguration`SCDynamicStoreCreateWithOptions (1 samples, 3.45%)</title><rect x="41.3793%" y="373" width="3.4483%" height="15" fill="rgb(220,129,5)" fg:x="12" fg:w="1"/><text x="41.6293%" y="383.50">Sys..</text></g><g><title>SystemConfiguration`__SCDynamicStoreCreatePrivate (1 samples, 3.45%)</title><rect x="41.3793%" y="357" width="3.4483%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="1"/><text x="41.6293%" y="367.50">Sys..</text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 3.45%)</title><rect x="41.3793%" y="341" width="3.4483%" height="15" fill="rgb(242,107,0)" fg:x="12" fg:w="1"/><text x="41.6293%" y="351.50">lib..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 3.45%)</title><rect x="41.3793%" y="325" width="3.4483%" height="15" fill="rgb(251,28,31)" fg:x="12" fg:w="1"/><text x="41.6293%" y="335.50">lib..</text></g><g><title>SystemConfiguration`____SCDynamicStoreInitialize_block_invoke (1 samples, 3.45%)</title><rect x="41.3793%" y="309" width="3.4483%" height="15" fill="rgb(233,223,10)" fg:x="12" fg:w="1"/><text x="41.6293%" y="319.50">Sys..</text></g><g><title>libsystem_trace.dylib`os_state_add_handler (1 samples, 3.45%)</title><rect x="41.3793%" y="293" width="3.4483%" height="15" fill="rgb(215,21,27)" fg:x="12" fg:w="1"/><text x="41.6293%" y="303.50">lib..</text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 3.45%)</title><rect x="41.3793%" y="277" width="3.4483%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="1"/><text x="41.6293%" y="287.50">lib..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 3.45%)</title><rect x="41.3793%" y="261" width="3.4483%" height="15" fill="rgb(244,5,23)" fg:x="12" fg:w="1"/><text x="41.6293%" y="271.50">lib..</text></g><g><title>libsystem_trace.dylib`_os_trace_init_slow (1 samples, 3.45%)</title><rect x="41.3793%" y="245" width="3.4483%" height="15" fill="rgb(226,81,46)" fg:x="12" fg:w="1"/><text x="41.6293%" y="255.50">lib..</text></g><g><title>libxpc.dylib`xpc_bundle_get_info_dictionary (1 samples, 3.45%)</title><rect x="41.3793%" y="229" width="3.4483%" height="15" fill="rgb(247,70,30)" fg:x="12" fg:w="1"/><text x="41.6293%" y="239.50">lib..</text></g><g><title>libxpc.dylib`_xpc_bundle_resolve (1 samples, 3.45%)</title><rect x="41.3793%" y="213" width="3.4483%" height="15" fill="rgb(212,68,19)" fg:x="12" fg:w="1"/><text x="41.6293%" y="223.50">lib..</text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 3.45%)</title><rect x="41.3793%" y="197" width="3.4483%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="1"/><text x="41.6293%" y="207.50">lib..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 3.45%)</title><rect x="41.3793%" y="181" width="3.4483%" height="15" fill="rgb(223,113,26)" fg:x="12" fg:w="1"/><text x="41.6293%" y="191.50">lib..</text></g><g><title>libxpc.dylib`___xpc_bundle_resolve_block_invoke (1 samples, 3.45%)</title><rect x="41.3793%" y="165" width="3.4483%" height="15" fill="rgb(206,192,2)" fg:x="12" fg:w="1"/><text x="41.6293%" y="175.50">lib..</text></g><g><title>libxpc.dylib`_xpc_bundle_resolve_sync (1 samples, 3.45%)</title><rect x="41.3793%" y="149" width="3.4483%" height="15" fill="rgb(241,108,4)" fg:x="12" fg:w="1"/><text x="41.6293%" y="159.50">lib..</text></g><g><title>libxpc.dylib`_xpc_bundle_resolve_root (1 samples, 3.45%)</title><rect x="41.3793%" y="133" width="3.4483%" height="15" fill="rgb(247,173,49)" fg:x="12" fg:w="1"/><text x="41.6293%" y="143.50">lib..</text></g><g><title>libsystem_sandbox.dylib`rootless_check_trusted_fd (1 samples, 3.45%)</title><rect x="41.3793%" y="117" width="3.4483%" height="15" fill="rgb(224,114,35)" fg:x="12" fg:w="1"/><text x="41.6293%" y="127.50">lib..</text></g><g><title>sequential`revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (5 samples, 17.24%)</title><rect x="44.8276%" y="501" width="17.2414%" height="15" fill="rgb(245,159,27)" fg:x="13" fg:w="5"/><text x="45.0776%" y="511.50">sequential`revm::handler::h..</text></g><g><title>sequential`core::ops::function::Fn::call (5 samples, 17.24%)</title><rect x="44.8276%" y="485" width="17.2414%" height="15" fill="rgb(245,172,44)" fg:x="13" fg:w="5"/><text x="45.0776%" y="495.50">sequential`core::ops::funct..</text></g><g><title>sequential`revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (5 samples, 17.24%)</title><rect x="44.8276%" y="469" width="17.2414%" height="15" fill="rgb(236,23,11)" fg:x="13" fg:w="5"/><text x="45.0776%" y="479.50">sequential`revm::context::e..</text></g><g><title>sequential`revm_interpreter::interpreter::contract::Contract::new (5 samples, 17.24%)</title><rect x="44.8276%" y="453" width="17.2414%" height="15" fill="rgb(205,117,38)" fg:x="13" fg:w="5"/><text x="45.0776%" y="463.50">sequential`revm_interpreter..</text></g><g><title>sequential`revm_interpreter::interpreter::analysis::to_analysed (5 samples, 17.24%)</title><rect x="44.8276%" y="437" width="17.2414%" height="15" fill="rgb(237,72,25)" fg:x="13" fg:w="5"/><text x="45.0776%" y="447.50">sequential`revm_interpreter..</text></g><g><title>sequential`revm_interpreter::instructions::host::sload (2 samples, 6.90%)</title><rect x="62.0690%" y="485" width="6.8966%" height="15" fill="rgb(244,70,9)" fg:x="18" fg:w="2"/><text x="62.3190%" y="495.50">sequentia..</text></g><g><title>sequential`&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::sload (2 samples, 6.90%)</title><rect x="62.0690%" y="469" width="6.8966%" height="15" fill="rgb(217,125,39)" fg:x="18" fg:w="2"/><text x="62.3190%" y="479.50">sequentia..</text></g><g><title>sequential`revm::journaled_state::JournaledState::sload (2 samples, 6.90%)</title><rect x="62.0690%" y="453" width="6.8966%" height="15" fill="rgb(235,36,10)" fg:x="18" fg:w="2"/><text x="62.3190%" y="463.50">sequentia..</text></g><g><title>sequential`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 3.45%)</title><rect x="65.5172%" y="437" width="3.4483%" height="15" fill="rgb(251,123,47)" fg:x="19" fg:w="1"/><text x="65.7672%" y="447.50">seq..</text></g><g><title>sequential`revm_interpreter::interpreter::Interpreter::run (3 samples, 10.34%)</title><rect x="62.0690%" y="501" width="10.3448%" height="15" fill="rgb(221,13,13)" fg:x="18" fg:w="3"/><text x="62.3190%" y="511.50">sequential`revm..</text></g><g><title>sequential`revm_interpreter::instructions::system::keccak256 (1 samples, 3.45%)</title><rect x="68.9655%" y="485" width="3.4483%" height="15" fill="rgb(238,131,9)" fg:x="20" fg:w="1"/><text x="69.2155%" y="495.50">seq..</text></g><g><title>sequential`alloy_primitives::utils::keccak256::keccak256 (1 samples, 3.45%)</title><rect x="68.9655%" y="469" width="3.4483%" height="15" fill="rgb(211,50,8)" fg:x="20" fg:w="1"/><text x="69.2155%" y="479.50">seq..</text></g><g><title>sequential`tiny_keccak::keccakf::keccakf (1 samples, 3.45%)</title><rect x="68.9655%" y="453" width="3.4483%" height="15" fill="rgb(245,182,24)" fg:x="20" fg:w="1"/><text x="69.2155%" y="463.50">seq..</text></g><g><title>sequential`revm::evm::Evm&lt;EXT,DB&gt;::transact_commit (9 samples, 31.03%)</title><rect x="44.8276%" y="517" width="31.0345%" height="15" fill="rgb(242,14,37)" fg:x="13" fg:w="9"/><text x="45.0776%" y="527.50">sequential`revm::evm::Evm&lt;EXT,DB&gt;::transact_commit</text></g><g><title>sequential`revm_primitives::db::_::_&lt;impl revm_primitives::db::DatabaseCommit for &amp;mut T&gt;::commit (1 samples, 3.45%)</title><rect x="72.4138%" y="501" width="3.4483%" height="15" fill="rgb(246,228,12)" fg:x="21" fg:w="1"/><text x="72.6638%" y="511.50">seq..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 3.45%)</title><rect x="72.4138%" y="485" width="3.4483%" height="15" fill="rgb(213,55,15)" fg:x="21" fg:w="1"/><text x="72.6638%" y="495.50">lib..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 3.45%)</title><rect x="75.8621%" y="453" width="3.4483%" height="15" fill="rgb(209,9,3)" fg:x="22" fg:w="1"/><text x="76.1121%" y="463.50">seq..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 3.45%)</title><rect x="75.8621%" y="437" width="3.4483%" height="15" fill="rgb(230,59,30)" fg:x="22" fg:w="1"/><text x="76.1121%" y="447.50">seq..</text></g><g><title>sequential`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (1 samples, 3.45%)</title><rect x="75.8621%" y="421" width="3.4483%" height="15" fill="rgb(209,121,21)" fg:x="22" fg:w="1"/><text x="76.1121%" y="431.50">seq..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 3.45%)</title><rect x="75.8621%" y="405" width="3.4483%" height="15" fill="rgb(220,109,13)" fg:x="22" fg:w="1"/><text x="76.1121%" y="415.50">seq..</text></g><g><title>sequential`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 3.45%)</title><rect x="75.8621%" y="389" width="3.4483%" height="15" fill="rgb(232,18,1)" fg:x="22" fg:w="1"/><text x="76.1121%" y="399.50">seq..</text></g><g><title>sequential`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 3.45%)</title><rect x="75.8621%" y="373" width="3.4483%" height="15" fill="rgb(215,41,42)" fg:x="22" fg:w="1"/><text x="76.1121%" y="383.50">seq..</text></g><g><title>sequential`serde_json::de::from_trait (3 samples, 10.34%)</title><rect x="75.8621%" y="501" width="10.3448%" height="15" fill="rgb(224,123,36)" fg:x="22" fg:w="3"/><text x="76.1121%" y="511.50">sequential`serd..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 10.34%)</title><rect x="75.8621%" y="485" width="10.3448%" height="15" fill="rgb(240,125,3)" fg:x="22" fg:w="3"/><text x="76.1121%" y="495.50">sequential`&lt;&amp;mu..</text></g><g><title>sequential`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (3 samples, 10.34%)</title><rect x="75.8621%" y="469" width="10.3448%" height="15" fill="rgb(205,98,50)" fg:x="22" fg:w="3"/><text x="76.1121%" y="479.50">sequential`&lt;&amp;mu..</text></g><g><title>sequential`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 6.90%)</title><rect x="79.3103%" y="453" width="6.8966%" height="15" fill="rgb(205,185,37)" fg:x="23" fg:w="2"/><text x="79.5603%" y="463.50">sequentia..</text></g><g><title>sequential`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 6.90%)</title><rect x="79.3103%" y="437" width="6.8966%" height="15" fill="rgb(238,207,15)" fg:x="23" fg:w="2"/><text x="79.5603%" y="447.50">sequentia..</text></g><g><title>sequential`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 6.90%)</title><rect x="79.3103%" y="421" width="6.8966%" height="15" fill="rgb(213,199,42)" fg:x="23" fg:w="2"/><text x="79.5603%" y="431.50">sequentia..</text></g><g><title>dyld`start (26 samples, 89.66%)</title><rect x="0.0000%" y="645" width="89.6552%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="26"/><text x="0.2500%" y="655.50">dyld`start</text></g><g><title>sequential`main (26 samples, 89.66%)</title><rect x="0.0000%" y="629" width="89.6552%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="26"/><text x="0.2500%" y="639.50">sequential`main</text></g><g><title>sequential`std::rt::lang_start_internal (26 samples, 89.66%)</title><rect x="0.0000%" y="613" width="89.6552%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="26"/><text x="0.2500%" y="623.50">sequential`std::rt::lang_start_internal</text></g><g><title>sequential`std::rt::lang_start::_{{closure}} (25 samples, 86.21%)</title><rect x="3.4483%" y="597" width="86.2069%" height="15" fill="rgb(243,32,47)" fg:x="1" fg:w="25"/><text x="3.6983%" y="607.50">sequential`std::rt::lang_start::_{{closure}}</text></g><g><title>sequential`std::sys_common::backtrace::__rust_begin_short_backtrace (25 samples, 86.21%)</title><rect x="3.4483%" y="581" width="86.2069%" height="15" fill="rgb(247,202,23)" fg:x="1" fg:w="25"/><text x="3.6983%" y="591.50">sequential`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>sequential`sequential::main (25 samples, 86.21%)</title><rect x="3.4483%" y="565" width="86.2069%" height="15" fill="rgb(219,102,11)" fg:x="1" fg:w="25"/><text x="3.6983%" y="575.50">sequential`sequential::main</text></g><g><title>sequential`tokio::runtime::context::runtime::enter_runtime (23 samples, 79.31%)</title><rect x="10.3448%" y="549" width="79.3103%" height="15" fill="rgb(243,110,44)" fg:x="3" fg:w="23"/><text x="10.5948%" y="559.50">sequential`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>sequential`tokio::runtime::park::CachedParkThread::block_on (23 samples, 79.31%)</title><rect x="10.3448%" y="533" width="79.3103%" height="15" fill="rgb(222,74,54)" fg:x="3" fg:w="23"/><text x="10.5948%" y="543.50">sequential`tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>sequential`sequential::load_db (4 samples, 13.79%)</title><rect x="75.8621%" y="517" width="13.7931%" height="15" fill="rgb(216,99,12)" fg:x="22" fg:w="4"/><text x="76.1121%" y="527.50">sequential`sequential..</text></g><g><title>sequential`std::fs::read_to_string::inner (1 samples, 3.45%)</title><rect x="86.2069%" y="501" width="3.4483%" height="15" fill="rgb(226,22,26)" fg:x="25" fg:w="1"/><text x="86.4569%" y="511.50">seq..</text></g><g><title>libsystem_kernel.dylib`read (1 samples, 3.45%)</title><rect x="86.2069%" y="485" width="3.4483%" height="15" fill="rgb(217,163,10)" fg:x="25" fg:w="1"/><text x="86.4569%" y="495.50">lib..</text></g><g><title>Network`nw_path_libinfo_path_check (1 samples, 3.45%)</title><rect x="89.6552%" y="453" width="3.4483%" height="15" fill="rgb(213,25,53)" fg:x="26" fg:w="1"/><text x="89.9052%" y="463.50">Net..</text></g><g><title>Network`nw_parameters_create_legacy_tcp_socket (1 samples, 3.45%)</title><rect x="89.6552%" y="437" width="3.4483%" height="15" fill="rgb(252,105,26)" fg:x="26" fg:w="1"/><text x="89.9052%" y="447.50">Net..</text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 3.45%)</title><rect x="89.6552%" y="421" width="3.4483%" height="15" fill="rgb(220,39,43)" fg:x="26" fg:w="1"/><text x="89.9052%" y="431.50">lib..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 3.45%)</title><rect x="89.6552%" y="405" width="3.4483%" height="15" fill="rgb(229,68,48)" fg:x="26" fg:w="1"/><text x="89.9052%" y="415.50">lib..</text></g><g><title>Network`__nw_protocol_setup_tcp_definition_block_invoke (1 samples, 3.45%)</title><rect x="89.6552%" y="389" width="3.4483%" height="15" fill="rgb(252,8,32)" fg:x="26" fg:w="1"/><text x="89.9052%" y="399.50">Net..</text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 3.45%)</title><rect x="89.6552%" y="373" width="3.4483%" height="15" fill="rgb(223,20,43)" fg:x="26" fg:w="1"/><text x="89.9052%" y="383.50">lib..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 3.45%)</title><rect x="89.6552%" y="357" width="3.4483%" height="15" fill="rgb(229,81,49)" fg:x="26" fg:w="1"/><text x="89.9052%" y="367.50">lib..</text></g><g><title>Network`__nw_protocol_get_tcp_identifier_block_invoke (1 samples, 3.45%)</title><rect x="89.6552%" y="341" width="3.4483%" height="15" fill="rgb(236,28,36)" fg:x="26" fg:w="1"/><text x="89.9052%" y="351.50">Net..</text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 3.45%)</title><rect x="89.6552%" y="325" width="3.4483%" height="15" fill="rgb(249,185,26)" fg:x="26" fg:w="1"/><text x="89.9052%" y="335.50">lib..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 3.45%)</title><rect x="89.6552%" y="309" width="3.4483%" height="15" fill="rgb(249,174,33)" fg:x="26" fg:w="1"/><text x="89.9052%" y="319.50">lib..</text></g><g><title>Network`__nw_protocol_get_tcp_image_block_invoke (1 samples, 3.45%)</title><rect x="89.6552%" y="293" width="3.4483%" height="15" fill="rgb(233,201,37)" fg:x="26" fg:w="1"/><text x="89.9052%" y="303.50">Net..</text></g><g><title>dyld`dyld4::APIs::dlopen_from (1 samples, 3.45%)</title><rect x="89.6552%" y="277" width="3.4483%" height="15" fill="rgb(221,78,26)" fg:x="26" fg:w="1"/><text x="89.9052%" y="287.50">dyl..</text></g><g><title>dyld`dyld4::APIs::dlopen_from(char const*, int, void*)::$_1::operator() (1 samples, 3.45%)</title><rect x="89.6552%" y="261" width="3.4483%" height="15" fill="rgb(250,127,30)" fg:x="26" fg:w="1"/><text x="89.9052%" y="271.50">dyl..</text></g><g><title>dyld`dyld4::RuntimeState::notifyDebuggerLoad(std::__1::span (1 samples, 3.45%)</title><rect x="89.6552%" y="245" width="3.4483%" height="15" fill="rgb(230,49,44)" fg:x="26" fg:w="1"/><text x="89.9052%" y="255.50">dyl..</text></g><g><title>dyld`dyld4::ExternallyViewableState::addImages(lsl::Allocator&amp;, lsl::Allocator&amp;, std::__1::span (1 samples, 3.45%)</title><rect x="89.6552%" y="229" width="3.4483%" height="15" fill="rgb(229,67,23)" fg:x="26" fg:w="1"/><text x="89.9052%" y="239.50">dyl..</text></g><g><title>dyld`dyld4::ExternallyViewableState::commit (1 samples, 3.45%)</title><rect x="89.6552%" y="213" width="3.4483%" height="15" fill="rgb(249,83,47)" fg:x="26" fg:w="1"/><text x="89.9052%" y="223.50">dyl..</text></g><g><title>dyld`dyld4::RemoteNotificationResponder::blockOnSynchronousEvent (1 samples, 3.45%)</title><rect x="89.6552%" y="197" width="3.4483%" height="15" fill="rgb(215,43,3)" fg:x="26" fg:w="1"/><text x="89.9052%" y="207.50">dyl..</text></g><g><title>dyld`dyld4::RemoteNotificationResponder::sendMessage (1 samples, 3.45%)</title><rect x="89.6552%" y="181" width="3.4483%" height="15" fill="rgb(238,154,13)" fg:x="26" fg:w="1"/><text x="89.9052%" y="191.50">dyl..</text></g><g><title>dyld`_kernelrpc_mach_port_construct_trap (1 samples, 3.45%)</title><rect x="89.6552%" y="165" width="3.4483%" height="15" fill="rgb(219,56,2)" fg:x="26" fg:w="1"/><text x="89.9052%" y="175.50">dyl..</text></g><g><title>sequential`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 6.90%)</title><rect x="89.6552%" y="549" width="6.8966%" height="15" fill="rgb(233,0,4)" fg:x="26" fg:w="2"/><text x="89.9052%" y="559.50">sequentia..</text></g><g><title>sequential`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 6.90%)</title><rect x="89.6552%" y="533" width="6.8966%" height="15" fill="rgb(235,30,7)" fg:x="26" fg:w="2"/><text x="89.9052%" y="543.50">sequentia..</text></g><g><title>sequential`&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (2 samples, 6.90%)</title><rect x="89.6552%" y="517" width="6.8966%" height="15" fill="rgb(250,79,13)" fg:x="26" fg:w="2"/><text x="89.9052%" y="527.50">sequentia..</text></g><g><title>sequential`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::_{{closure}} (2 samples, 6.90%)</title><rect x="89.6552%" y="501" width="6.8966%" height="15" fill="rgb(211,146,34)" fg:x="26" fg:w="2"/><text x="89.9052%" y="511.50">sequentia..</text></g><g><title>libsystem_info.dylib`getaddrinfo (2 samples, 6.90%)</title><rect x="89.6552%" y="485" width="6.8966%" height="15" fill="rgb(228,22,38)" fg:x="26" fg:w="2"/><text x="89.9052%" y="495.50">libsystem..</text></g><g><title>libsystem_info.dylib`si_addrinfo (2 samples, 6.90%)</title><rect x="89.6552%" y="469" width="6.8966%" height="15" fill="rgb(235,168,5)" fg:x="26" fg:w="2"/><text x="89.9052%" y="479.50">libsystem..</text></g><g><title>libsystem_info.dylib`search_addrinfo (1 samples, 3.45%)</title><rect x="93.1034%" y="453" width="3.4483%" height="15" fill="rgb(221,155,16)" fg:x="27" fg:w="1"/><text x="93.3534%" y="463.50">lib..</text></g><g><title>libsystem_info.dylib`mdns_addrinfo (1 samples, 3.45%)</title><rect x="93.1034%" y="437" width="3.4483%" height="15" fill="rgb(215,215,53)" fg:x="27" fg:w="1"/><text x="93.3534%" y="447.50">lib..</text></g><g><title>libsystem_info.dylib`_mdns_search_ex (1 samples, 3.45%)</title><rect x="93.1034%" y="421" width="3.4483%" height="15" fill="rgb(223,4,10)" fg:x="27" fg:w="1"/><text x="93.3534%" y="431.50">lib..</text></g><g><title>libsystem_dnssd.dylib`DNSServiceCreateConnection (1 samples, 3.45%)</title><rect x="93.1034%" y="405" width="3.4483%" height="15" fill="rgb(234,103,6)" fg:x="27" fg:w="1"/><text x="93.3534%" y="415.50">lib..</text></g><g><title>libsystem_kernel.dylib`__connect_nocancel (1 samples, 3.45%)</title><rect x="93.1034%" y="389" width="3.4483%" height="15" fill="rgb(227,97,0)" fg:x="27" fg:w="1"/><text x="93.3534%" y="399.50">lib..</text></g><g><title>all (29 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="29"/><text x="0.2500%" y="671.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3 samples, 10.34%)</title><rect x="89.6552%" y="645" width="10.3448%" height="15" fill="rgb(228,201,54)" fg:x="26" fg:w="3"/><text x="89.9052%" y="655.50">libsystem_pthre..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3 samples, 10.34%)</title><rect x="89.6552%" y="629" width="10.3448%" height="15" fill="rgb(222,22,37)" fg:x="26" fg:w="3"/><text x="89.9052%" y="639.50">libsystem_pthre..</text></g><g><title>sequential`std::sys::unix::thread::Thread::new::thread_start (3 samples, 10.34%)</title><rect x="89.6552%" y="613" width="10.3448%" height="15" fill="rgb(237,53,32)" fg:x="26" fg:w="3"/><text x="89.9052%" y="623.50">sequential`std:..</text></g><g><title>sequential`core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 10.34%)</title><rect x="89.6552%" y="597" width="10.3448%" height="15" fill="rgb(233,25,53)" fg:x="26" fg:w="3"/><text x="89.9052%" y="607.50">sequential`core..</text></g><g><title>sequential`std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 10.34%)</title><rect x="89.6552%" y="581" width="10.3448%" height="15" fill="rgb(210,40,34)" fg:x="26" fg:w="3"/><text x="89.9052%" y="591.50">sequential`std:..</text></g><g><title>sequential`tokio::runtime::blocking::pool::Inner::run (3 samples, 10.34%)</title><rect x="89.6552%" y="565" width="10.3448%" height="15" fill="rgb(241,220,44)" fg:x="26" fg:w="3"/><text x="89.9052%" y="575.50">sequential`toki..</text></g><g><title>sequential`tokio::runtime::task::raw::poll (1 samples, 3.45%)</title><rect x="96.5517%" y="549" width="3.4483%" height="15" fill="rgb(235,28,35)" fg:x="28" fg:w="1"/><text x="96.8017%" y="559.50">seq..</text></g><g><title>sequential`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 3.45%)</title><rect x="96.5517%" y="533" width="3.4483%" height="15" fill="rgb(210,56,17)" fg:x="28" fg:w="1"/><text x="96.8017%" y="543.50">seq..</text></g><g><title>sequential`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 3.45%)</title><rect x="96.5517%" y="517" width="3.4483%" height="15" fill="rgb(224,130,29)" fg:x="28" fg:w="1"/><text x="96.8017%" y="527.50">seq..</text></g><g><title>sequential`tokio::runtime::scheduler::multi_thread::worker::run (1 samples, 3.45%)</title><rect x="96.5517%" y="501" width="3.4483%" height="15" fill="rgb(235,212,8)" fg:x="28" fg:w="1"/><text x="96.8017%" y="511.50">seq..</text></g><g><title>sequential`tokio::runtime::context::runtime::enter_runtime (1 samples, 3.45%)</title><rect x="96.5517%" y="485" width="3.4483%" height="15" fill="rgb(223,33,50)" fg:x="28" fg:w="1"/><text x="96.8017%" y="495.50">seq..</text></g><g><title>sequential`tokio::runtime::context::set_scheduler (1 samples, 3.45%)</title><rect x="96.5517%" y="469" width="3.4483%" height="15" fill="rgb(219,149,13)" fg:x="28" fg:w="1"/><text x="96.8017%" y="479.50">seq..</text></g><g><title>sequential`tokio::runtime::scheduler::multi_thread::worker::Context::run (1 samples, 3.45%)</title><rect x="96.5517%" y="453" width="3.4483%" height="15" fill="rgb(250,156,29)" fg:x="28" fg:w="1"/><text x="96.8017%" y="463.50">seq..</text></g><g><title>sequential`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1 samples, 3.45%)</title><rect x="96.5517%" y="437" width="3.4483%" height="15" fill="rgb(216,193,19)" fg:x="28" fg:w="1"/><text x="96.8017%" y="447.50">seq..</text></g><g><title>sequential`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 3.45%)</title><rect x="96.5517%" y="421" width="3.4483%" height="15" fill="rgb(216,135,14)" fg:x="28" fg:w="1"/><text x="96.8017%" y="431.50">seq..</text></g><g><title>sequential`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 3.45%)</title><rect x="96.5517%" y="405" width="3.4483%" height="15" fill="rgb(241,47,5)" fg:x="28" fg:w="1"/><text x="96.8017%" y="415.50">seq..</text></g><g><title>sequential`hyper::proto::h2::client::conn_task::_{{closure}} (1 samples, 3.45%)</title><rect x="96.5517%" y="389" width="3.4483%" height="15" fill="rgb(233,42,35)" fg:x="28" fg:w="1"/><text x="96.8017%" y="399.50">seq..</text></g><g><title>sequential`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 3.45%)</title><rect x="96.5517%" y="373" width="3.4483%" height="15" fill="rgb(231,13,6)" fg:x="28" fg:w="1"/><text x="96.8017%" y="383.50">seq..</text></g><g><title>sequential`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 3.45%)</title><rect x="96.5517%" y="357" width="3.4483%" height="15" fill="rgb(207,181,40)" fg:x="28" fg:w="1"/><text x="96.8017%" y="367.50">seq..</text></g><g><title>sequential`&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 3.45%)</title><rect x="96.5517%" y="341" width="3.4483%" height="15" fill="rgb(254,173,49)" fg:x="28" fg:w="1"/><text x="96.8017%" y="351.50">seq..</text></g><g><title>sequential`h2::proto::connection::Connection&lt;T,P,B&gt;::poll (1 samples, 3.45%)</title><rect x="96.5517%" y="325" width="3.4483%" height="15" fill="rgb(221,1,38)" fg:x="28" fg:w="1"/><text x="96.8017%" y="335.50">seq..</text></g><g><title>sequential`&lt;h2::codec::framed_read::FramedRead&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 3.45%)</title><rect x="96.5517%" y="309" width="3.4483%" height="15" fill="rgb(206,124,46)" fg:x="28" fg:w="1"/><text x="96.8017%" y="319.50">seq..</text></g><g><title>sequential`&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 3.45%)</title><rect x="96.5517%" y="293" width="3.4483%" height="15" fill="rgb(249,21,11)" fg:x="28" fg:w="1"/><text x="96.8017%" y="303.50">seq..</text></g><g><title>sequential`&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::decoder::Decoder&gt;::decode (1 samples, 3.45%)</title><rect x="96.5517%" y="277" width="3.4483%" height="15" fill="rgb(222,201,40)" fg:x="28" fg:w="1"/><text x="96.8017%" y="287.50">seq..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 3.45%)</title><rect x="96.5517%" y="261" width="3.4483%" height="15" fill="rgb(235,61,29)" fg:x="28" fg:w="1"/><text x="96.8017%" y="271.50">lib..</text></g></svg></svg>