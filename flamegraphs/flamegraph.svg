<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1334" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1317.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1317.00"> </text><svg id="frames" x="10" width="1180" total_samples="225"><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::end_raw_buffering (1 samples, 0.44%)</title><rect x="0.0000%" y="965" width="0.4444%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.44%)</title><rect x="0.0000%" y="949" width="0.4444%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.44%)</title><rect x="0.0000%" y="933" width="0.4444%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>&lt;ethers_providers::rpc::provider::Provider&lt;P&gt; as ethers_providers::middleware::Middleware&gt;::get_block_with_txs::{{closure}} (3 samples, 1.33%)</title><rect x="0.0000%" y="1253" width="1.3333%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1263.50"></text></g><g><title>ethers_providers::rpc::provider::Provider&lt;P&gt;::get_block_gen::{{closure}} (3 samples, 1.33%)</title><rect x="0.0000%" y="1237" width="1.3333%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1247.50"></text></g><g><title>ethers_providers::rpc::provider::Provider&lt;P&gt;::request::{{closure}} (3 samples, 1.33%)</title><rect x="0.0000%" y="1221" width="1.3333%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1231.50"></text></g><g><title>&lt;tracing_futures::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.33%)</title><rect x="0.0000%" y="1205" width="1.3333%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1215.50"></text></g><g><title>ethers_providers::rpc::provider::Provider&lt;P&gt;::request::{{closure}}::{{closure}} (3 samples, 1.33%)</title><rect x="0.0000%" y="1189" width="1.3333%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1199.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3 samples, 1.33%)</title><rect x="0.0000%" y="1173" width="1.3333%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1183.50"></text></g><g><title>&lt;ethers_providers::rpc::transports::http::Provider as ethers_providers::rpc::connections::JsonRpcClient&gt;::request::{{closure}} (3 samples, 1.33%)</title><rect x="0.0000%" y="1157" width="1.3333%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1167.50"></text></g><g><title>serde_json::de::from_slice (3 samples, 1.33%)</title><rect x="0.0000%" y="1141" width="1.3333%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1151.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 1.33%)</title><rect x="0.0000%" y="1125" width="1.3333%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1135.50"></text></g><g><title>&lt;ethers_providers::rpc::transports::common::Response as serde::de::Deserialize&gt;::deserialize (3 samples, 1.33%)</title><rect x="0.0000%" y="1109" width="1.3333%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1119.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (3 samples, 1.33%)</title><rect x="0.0000%" y="1093" width="1.3333%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1103.50"></text></g><g><title>&lt;&lt;ethers_providers::rpc::transports::common::Response as serde::de::Deserialize&gt;::deserialize::ResponseVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 1.33%)</title><rect x="0.0000%" y="1077" width="1.3333%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1087.50"></text></g><g><title>serde::de::MapAccess::next_value (3 samples, 1.33%)</title><rect x="0.0000%" y="1061" width="1.3333%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1071.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (3 samples, 1.33%)</title><rect x="0.0000%" y="1045" width="1.3333%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1055.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 1.33%)</title><rect x="0.0000%" y="1029" width="1.3333%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1039.50"></text></g><g><title>&lt;&amp;serde_json::raw::RawValue as serde::de::Deserialize&gt;::deserialize (3 samples, 1.33%)</title><rect x="0.0000%" y="1013" width="1.3333%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1023.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (3 samples, 1.33%)</title><rect x="0.0000%" y="997" width="1.3333%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1007.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::deserialize_raw_value (3 samples, 1.33%)</title><rect x="0.0000%" y="981" width="1.3333%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="991.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (2 samples, 0.89%)</title><rect x="0.4444%" y="965" width="0.8889%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="2"/><text x="0.6944%" y="975.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (2 samples, 0.89%)</title><rect x="0.4444%" y="949" width="0.8889%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="2"/><text x="0.6944%" y="959.50"></text></g><g><title>primitive_types::serde::&lt;impl serde::de::Deserialize for primitive_types::H160&gt;::deserialize (2 samples, 0.89%)</title><rect x="1.3333%" y="869" width="0.8889%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="2"/><text x="1.5833%" y="879.50"></text></g><g><title>impl_serde::serialize::deserialize_check_len (2 samples, 0.89%)</title><rect x="1.3333%" y="853" width="0.8889%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="2"/><text x="1.5833%" y="863.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (2 samples, 0.89%)</title><rect x="1.3333%" y="837" width="0.8889%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="2"/><text x="1.5833%" y="847.50"></text></g><g><title>&lt;impl_serde::serialize::deserialize_check_len::Visitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.89%)</title><rect x="1.3333%" y="821" width="0.8889%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="2"/><text x="1.5833%" y="831.50"></text></g><g><title>impl_serde::serialize::from_hex_raw (2 samples, 0.89%)</title><rect x="1.3333%" y="805" width="0.8889%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="2"/><text x="1.5833%" y="815.50"></text></g><g><title>primitive_types::serde::&lt;impl serde::de::Deserialize for primitive_types::H256&gt;::deserialize (2 samples, 0.89%)</title><rect x="2.2222%" y="869" width="0.8889%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="2"/><text x="2.4722%" y="879.50"></text></g><g><title>impl_serde::serialize::deserialize_check_len (2 samples, 0.89%)</title><rect x="2.2222%" y="853" width="0.8889%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="2"/><text x="2.4722%" y="863.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (2 samples, 0.89%)</title><rect x="2.2222%" y="837" width="0.8889%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="2"/><text x="2.4722%" y="847.50"></text></g><g><title>&lt;impl_serde::serialize::deserialize_check_len::Visitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.89%)</title><rect x="2.2222%" y="821" width="0.8889%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="2"/><text x="2.4722%" y="831.50"></text></g><g><title>impl_serde::serialize::from_hex_raw (2 samples, 0.89%)</title><rect x="2.2222%" y="805" width="0.8889%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="2"/><text x="2.4722%" y="815.50"></text></g><g><title>&lt;impl_serde::serialize::deserialize_check_len::Visitor as serde::de::Visitor&gt;::visit_str (4 samples, 1.78%)</title><rect x="3.1111%" y="821" width="1.7778%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="4"/><text x="3.3611%" y="831.50">&lt;..</text></g><g><title>impl_serde::serialize::from_hex_raw (4 samples, 1.78%)</title><rect x="3.1111%" y="805" width="1.7778%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="4"/><text x="3.3611%" y="815.50">i..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="4.4444%" y="789" width="0.4444%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="1"/><text x="4.6944%" y="799.50"></text></g><g><title>&lt;core::str::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="4.4444%" y="773" width="0.4444%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="1"/><text x="4.6944%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="4.4444%" y="757" width="0.4444%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="1"/><text x="4.6944%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="4.4444%" y="741" width="0.4444%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="1"/><text x="4.6944%" y="751.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.44%)</title><rect x="4.4444%" y="725" width="0.4444%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="1"/><text x="4.6944%" y="735.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.44%)</title><rect x="4.4444%" y="709" width="0.4444%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="1"/><text x="4.6944%" y="719.50"></text></g><g><title>primitive_types::serde::&lt;impl serde::de::Deserialize for primitive_types::U256&gt;::deserialize (5 samples, 2.22%)</title><rect x="3.1111%" y="869" width="2.2222%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="5"/><text x="3.3611%" y="879.50">p..</text></g><g><title>impl_serde::serialize::deserialize_check_len (5 samples, 2.22%)</title><rect x="3.1111%" y="853" width="2.2222%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="5"/><text x="3.3611%" y="863.50">i..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (5 samples, 2.22%)</title><rect x="3.1111%" y="837" width="2.2222%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="5"/><text x="3.3611%" y="847.50">&lt;..</text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.44%)</title><rect x="4.8889%" y="821" width="0.4444%" height="15" fill="rgb(222,207,29)" fg:x="11" fg:w="1"/><text x="5.1389%" y="831.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1 samples, 0.44%)</title><rect x="4.8889%" y="805" width="0.4444%" height="15" fill="rgb(206,96,30)" fg:x="11" fg:w="1"/><text x="5.1389%" y="815.50"></text></g><g><title>primitive_types::serde::&lt;impl serde::de::Deserialize for primitive_types::H160&gt;::deserialize (1 samples, 0.44%)</title><rect x="5.3333%" y="821" width="0.4444%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="1"/><text x="5.5833%" y="831.50"></text></g><g><title>impl_serde::serialize::deserialize_check_len (1 samples, 0.44%)</title><rect x="5.3333%" y="805" width="0.4444%" height="15" fill="rgb(250,191,14)" fg:x="12" fg:w="1"/><text x="5.5833%" y="815.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.44%)</title><rect x="5.3333%" y="789" width="0.4444%" height="15" fill="rgb(239,60,40)" fg:x="12" fg:w="1"/><text x="5.5833%" y="799.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.44%)</title><rect x="5.3333%" y="773" width="0.4444%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="1"/><text x="5.5833%" y="783.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1 samples, 0.44%)</title><rect x="5.3333%" y="757" width="0.4444%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="1"/><text x="5.5833%" y="767.50"></text></g><g><title>primitive_types::serde::&lt;impl serde::de::Deserialize for primitive_types::H256&gt;::deserialize (1 samples, 0.44%)</title><rect x="5.7778%" y="821" width="0.4444%" height="15" fill="rgb(250,213,24)" fg:x="13" fg:w="1"/><text x="6.0278%" y="831.50"></text></g><g><title>impl_serde::serialize::deserialize_check_len (1 samples, 0.44%)</title><rect x="5.7778%" y="805" width="0.4444%" height="15" fill="rgb(247,123,22)" fg:x="13" fg:w="1"/><text x="6.0278%" y="815.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.44%)</title><rect x="5.7778%" y="789" width="0.4444%" height="15" fill="rgb(231,138,38)" fg:x="13" fg:w="1"/><text x="6.0278%" y="799.50"></text></g><g><title>&lt;impl_serde::serialize::deserialize_check_len::Visitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.44%)</title><rect x="5.7778%" y="773" width="0.4444%" height="15" fill="rgb(231,145,46)" fg:x="13" fg:w="1"/><text x="6.0278%" y="783.50"></text></g><g><title>impl_serde::serialize::from_hex_raw (1 samples, 0.44%)</title><rect x="5.7778%" y="757" width="0.4444%" height="15" fill="rgb(251,118,11)" fg:x="13" fg:w="1"/><text x="6.0278%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="5.7778%" y="741" width="0.4444%" height="15" fill="rgb(217,147,25)" fg:x="13" fg:w="1"/><text x="6.0278%" y="751.50"></text></g><g><title>&lt;ethers_providers::rpc::transports::http::Provider as ethers_providers::rpc::connections::JsonRpcClient&gt;::request::{{closure}} (12 samples, 5.33%)</title><rect x="1.3333%" y="1253" width="5.3333%" height="15" fill="rgb(247,81,37)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1263.50">&lt;ethers..</text></g><g><title>serde_json::de::from_str (12 samples, 5.33%)</title><rect x="1.3333%" y="1237" width="5.3333%" height="15" fill="rgb(209,12,38)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1247.50">serde_j..</text></g><g><title>serde_json::de::from_trait (12 samples, 5.33%)</title><rect x="1.3333%" y="1221" width="5.3333%" height="15" fill="rgb(227,1,9)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1231.50">serde_j..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (12 samples, 5.33%)</title><rect x="1.3333%" y="1205" width="5.3333%" height="15" fill="rgb(248,47,43)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1215.50">serde::..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_option (12 samples, 5.33%)</title><rect x="1.3333%" y="1189" width="5.3333%" height="15" fill="rgb(221,10,30)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1199.50">&lt;&amp;mut s..</text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (12 samples, 5.33%)</title><rect x="1.3333%" y="1173" width="5.3333%" height="15" fill="rgb(210,229,1)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1183.50">&lt;serde:..</text></g><g><title>ethers_core::types::block::_::&lt;impl serde::de::Deserialize for ethers_core::types::block::Block&lt;TX&gt;&gt;::deserialize (12 samples, 5.33%)</title><rect x="1.3333%" y="1157" width="5.3333%" height="15" fill="rgb(222,148,37)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1167.50">ethers_..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (12 samples, 5.33%)</title><rect x="1.3333%" y="1141" width="5.3333%" height="15" fill="rgb(234,67,33)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1151.50">&lt;&amp;mut s..</text></g><g><title>&lt;ethers_core::types::block::_::&lt;impl serde::de::Deserialize for ethers_core::types::block::Block&lt;TX&gt;&gt;::deserialize::__Visitor&lt;TX&gt; as serde::de::Visitor&gt;::visit_map (12 samples, 5.33%)</title><rect x="1.3333%" y="1125" width="5.3333%" height="15" fill="rgb(247,98,35)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1135.50">&lt;ethers..</text></g><g><title>serde::de::MapAccess::next_value (12 samples, 5.33%)</title><rect x="1.3333%" y="1109" width="5.3333%" height="15" fill="rgb(247,138,52)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1119.50">serde::..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (12 samples, 5.33%)</title><rect x="1.3333%" y="1093" width="5.3333%" height="15" fill="rgb(213,79,30)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1103.50">&lt;serde_..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 5.33%)</title><rect x="1.3333%" y="1077" width="5.3333%" height="15" fill="rgb(246,177,23)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1087.50">&lt;core::..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (12 samples, 5.33%)</title><rect x="1.3333%" y="1061" width="5.3333%" height="15" fill="rgb(230,62,27)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1071.50">serde::..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (12 samples, 5.33%)</title><rect x="1.3333%" y="1045" width="5.3333%" height="15" fill="rgb(216,154,8)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1055.50">&lt;&amp;mut s..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (12 samples, 5.33%)</title><rect x="1.3333%" y="1029" width="5.3333%" height="15" fill="rgb(244,35,45)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1039.50">&lt;serde:..</text></g><g><title>serde::de::SeqAccess::next_element (12 samples, 5.33%)</title><rect x="1.3333%" y="1013" width="5.3333%" height="15" fill="rgb(251,115,12)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1023.50">serde::..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 5.33%)</title><rect x="1.3333%" y="997" width="5.3333%" height="15" fill="rgb(240,54,50)" fg:x="3" fg:w="12"/><text x="1.5833%" y="1007.50">&lt;serde_..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 5.33%)</title><rect x="1.3333%" y="981" width="5.3333%" height="15" fill="rgb(233,84,52)" fg:x="3" fg:w="12"/><text x="1.5833%" y="991.50">&lt;core::..</text></g><g><title>ethers_core::types::transaction::response::_::&lt;impl serde::de::Deserialize for ethers_core::types::transaction::response::Transaction&gt;::deserialize (12 samples, 5.33%)</title><rect x="1.3333%" y="965" width="5.3333%" height="15" fill="rgb(207,117,47)" fg:x="3" fg:w="12"/><text x="1.5833%" y="975.50">ethers_..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (12 samples, 5.33%)</title><rect x="1.3333%" y="949" width="5.3333%" height="15" fill="rgb(249,43,39)" fg:x="3" fg:w="12"/><text x="1.5833%" y="959.50">&lt;&amp;mut s..</text></g><g><title>&lt;ethers_core::types::transaction::response::_::&lt;impl serde::de::Deserialize for ethers_core::types::transaction::response::Transaction&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (12 samples, 5.33%)</title><rect x="1.3333%" y="933" width="5.3333%" height="15" fill="rgb(209,38,44)" fg:x="3" fg:w="12"/><text x="1.5833%" y="943.50">&lt;ethers..</text></g><g><title>serde::de::MapAccess::next_value (12 samples, 5.33%)</title><rect x="1.3333%" y="917" width="5.3333%" height="15" fill="rgb(236,212,23)" fg:x="3" fg:w="12"/><text x="1.5833%" y="927.50">serde::..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (12 samples, 5.33%)</title><rect x="1.3333%" y="901" width="5.3333%" height="15" fill="rgb(242,79,21)" fg:x="3" fg:w="12"/><text x="1.5833%" y="911.50">&lt;serde_..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 5.33%)</title><rect x="1.3333%" y="885" width="5.3333%" height="15" fill="rgb(211,96,35)" fg:x="3" fg:w="12"/><text x="1.5833%" y="895.50">&lt;core::..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (3 samples, 1.33%)</title><rect x="5.3333%" y="869" width="1.3333%" height="15" fill="rgb(253,215,40)" fg:x="12" fg:w="3"/><text x="5.5833%" y="879.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_option (3 samples, 1.33%)</title><rect x="5.3333%" y="853" width="1.3333%" height="15" fill="rgb(211,81,21)" fg:x="12" fg:w="3"/><text x="5.5833%" y="863.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (3 samples, 1.33%)</title><rect x="5.3333%" y="837" width="1.3333%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="3"/><text x="5.5833%" y="847.50"></text></g><g><title>primitive_types::serde::&lt;impl serde::de::Deserialize for primitive_types::U256&gt;::deserialize (1 samples, 0.44%)</title><rect x="6.2222%" y="821" width="0.4444%" height="15" fill="rgb(235,213,38)" fg:x="14" fg:w="1"/><text x="6.4722%" y="831.50"></text></g><g><title>impl_serde::serialize::deserialize_check_len (1 samples, 0.44%)</title><rect x="6.2222%" y="805" width="0.4444%" height="15" fill="rgb(237,122,38)" fg:x="14" fg:w="1"/><text x="6.4722%" y="815.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.44%)</title><rect x="6.2222%" y="789" width="0.4444%" height="15" fill="rgb(244,218,35)" fg:x="14" fg:w="1"/><text x="6.4722%" y="799.50"></text></g><g><title>&lt;impl_serde::serialize::deserialize_check_len::Visitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.44%)</title><rect x="6.2222%" y="773" width="0.4444%" height="15" fill="rgb(240,68,47)" fg:x="14" fg:w="1"/><text x="6.4722%" y="783.50"></text></g><g><title>impl_serde::serialize::from_hex_raw (1 samples, 0.44%)</title><rect x="6.2222%" y="757" width="0.4444%" height="15" fill="rgb(210,16,53)" fg:x="14" fg:w="1"/><text x="6.4722%" y="767.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="6.6667%" y="1205" width="0.4444%" height="15" fill="rgb(235,124,12)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1215.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="6.6667%" y="1189" width="0.4444%" height="15" fill="rgb(224,169,11)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1199.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="6.6667%" y="1173" width="0.4444%" height="15" fill="rgb(250,166,2)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1183.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="6.6667%" y="1157" width="0.4444%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1167.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.44%)</title><rect x="6.6667%" y="1141" width="0.4444%" height="15" fill="rgb(230,116,27)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1151.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="6.6667%" y="1125" width="0.4444%" height="15" fill="rgb(228,99,48)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1135.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="6.6667%" y="1109" width="0.4444%" height="15" fill="rgb(253,11,6)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1119.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.44%)</title><rect x="6.6667%" y="1093" width="0.4444%" height="15" fill="rgb(247,143,39)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1103.50"></text></g><g><title>reqwest::connect::Connector::connect_with_maybe_proxy::{{closure}} (1 samples, 0.44%)</title><rect x="6.6667%" y="1077" width="0.4444%" height="15" fill="rgb(236,97,10)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1087.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="6.6667%" y="1061" width="0.4444%" height="15" fill="rgb(233,208,19)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1071.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.44%)</title><rect x="6.6667%" y="1045" width="0.4444%" height="15" fill="rgb(216,164,2)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1055.50"></text></g><g><title>tokio_rustls::TlsConnector::connect (1 samples, 0.44%)</title><rect x="6.6667%" y="1029" width="0.4444%" height="15" fill="rgb(220,129,5)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1039.50"></text></g><g><title>tokio_rustls::TlsConnector::connect_with (1 samples, 0.44%)</title><rect x="6.6667%" y="1013" width="0.4444%" height="15" fill="rgb(242,17,10)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1023.50"></text></g><g><title>rustls::client::client_conn::ClientConnection::new (1 samples, 0.44%)</title><rect x="6.6667%" y="997" width="0.4444%" height="15" fill="rgb(242,107,0)" fg:x="15" fg:w="1"/><text x="6.9167%" y="1007.50"></text></g><g><title>rustls::client::client_conn::&lt;impl rustls::conn::ConnectionCore&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::for_client (1 samples, 0.44%)</title><rect x="6.6667%" y="981" width="0.4444%" height="15" fill="rgb(251,28,31)" fg:x="15" fg:w="1"/><text x="6.9167%" y="991.50"></text></g><g><title>rustls::client::hs::start_handshake (1 samples, 0.44%)</title><rect x="6.6667%" y="965" width="0.4444%" height="15" fill="rgb(233,223,10)" fg:x="15" fg:w="1"/><text x="6.9167%" y="975.50"></text></g><g><title>rustls::client::tls13::initial_key_share (1 samples, 0.44%)</title><rect x="6.6667%" y="949" width="0.4444%" height="15" fill="rgb(215,21,27)" fg:x="15" fg:w="1"/><text x="6.9167%" y="959.50"></text></g><g><title>rustls::kx::KeyExchange::start (1 samples, 0.44%)</title><rect x="6.6667%" y="933" width="0.4444%" height="15" fill="rgb(232,23,21)" fg:x="15" fg:w="1"/><text x="6.9167%" y="943.50"></text></g><g><title>ring::agreement::EphemeralPrivateKey::compute_public_key (1 samples, 0.44%)</title><rect x="6.6667%" y="917" width="0.4444%" height="15" fill="rgb(244,5,23)" fg:x="15" fg:w="1"/><text x="6.9167%" y="927.50"></text></g><g><title>ring::ec::keys::Seed::compute_public_key (1 samples, 0.44%)</title><rect x="6.6667%" y="901" width="0.4444%" height="15" fill="rgb(226,81,46)" fg:x="15" fg:w="1"/><text x="6.9167%" y="911.50"></text></g><g><title>ring::ec::curve25519::x25519::x25519_public_from_private (1 samples, 0.44%)</title><rect x="6.6667%" y="885" width="0.4444%" height="15" fill="rgb(247,70,30)" fg:x="15" fg:w="1"/><text x="6.9167%" y="895.50"></text></g><g><title>ring_core_0_17_8_x25519_public_from_private_generic_masked (1 samples, 0.44%)</title><rect x="6.6667%" y="869" width="0.4444%" height="15" fill="rgb(212,68,19)" fg:x="15" fg:w="1"/><text x="6.9167%" y="879.50"></text></g><g><title>ring_core_0_17_8_x25519_ge_scalarmult_base (1 samples, 0.44%)</title><rect x="6.6667%" y="853" width="0.4444%" height="15" fill="rgb(240,187,13)" fg:x="15" fg:w="1"/><text x="6.9167%" y="863.50"></text></g><g><title>ring_core_0_17_8_x25519_ge_scalarmult_base_adx (1 samples, 0.44%)</title><rect x="6.6667%" y="837" width="0.4444%" height="15" fill="rgb(223,113,26)" fg:x="15" fg:w="1"/><text x="6.9167%" y="847.50"></text></g><g><title>table_select_4 (1 samples, 0.44%)</title><rect x="6.6667%" y="821" width="0.4444%" height="15" fill="rgb(206,192,2)" fg:x="15" fg:w="1"/><text x="6.9167%" y="831.50"></text></g><g><title>constant_time_conditional_memxor (1 samples, 0.44%)</title><rect x="6.6667%" y="805" width="0.4444%" height="15" fill="rgb(241,108,4)" fg:x="15" fg:w="1"/><text x="6.9167%" y="815.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.89%)</title><rect x="6.6667%" y="1253" width="0.8889%" height="15" fill="rgb(247,173,49)" fg:x="15" fg:w="2"/><text x="6.9167%" y="1263.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (2 samples, 0.89%)</title><rect x="6.6667%" y="1237" width="0.8889%" height="15" fill="rgb(224,114,35)" fg:x="15" fg:w="2"/><text x="6.9167%" y="1247.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (2 samples, 0.89%)</title><rect x="6.6667%" y="1221" width="0.8889%" height="15" fill="rgb(245,159,27)" fg:x="15" fg:w="2"/><text x="6.9167%" y="1231.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.1111%" y="1205" width="0.4444%" height="15" fill="rgb(245,172,44)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1215.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.1111%" y="1189" width="0.4444%" height="15" fill="rgb(236,23,11)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1199.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.44%)</title><rect x="7.1111%" y="1173" width="0.4444%" height="15" fill="rgb(205,117,38)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1183.50"></text></g><g><title>reqwest::connect::Connector::connect_with_maybe_proxy::{{closure}} (1 samples, 0.44%)</title><rect x="7.1111%" y="1157" width="0.4444%" height="15" fill="rgb(237,72,25)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1167.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.1111%" y="1141" width="0.4444%" height="15" fill="rgb(244,70,9)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1151.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.44%)</title><rect x="7.1111%" y="1125" width="0.4444%" height="15" fill="rgb(217,125,39)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1135.50"></text></g><g><title>&lt;tokio_rustls::Connect&lt;IO&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.1111%" y="1109" width="0.4444%" height="15" fill="rgb(235,36,10)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1119.50"></text></g><g><title>&lt;tokio_rustls::common::handshake::MidHandshake&lt;IS&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.1111%" y="1093" width="0.4444%" height="15" fill="rgb(251,123,47)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1103.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::handshake (1 samples, 0.44%)</title><rect x="7.1111%" y="1077" width="0.4444%" height="15" fill="rgb(221,13,13)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1087.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (1 samples, 0.44%)</title><rect x="7.1111%" y="1061" width="0.4444%" height="15" fill="rgb(238,131,9)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1071.50"></text></g><g><title>rustls::conn::ConnectionCommon&lt;Data&gt;::process_new_packets (1 samples, 0.44%)</title><rect x="7.1111%" y="1045" width="0.4444%" height="15" fill="rgb(211,50,8)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1055.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.44%)</title><rect x="7.1111%" y="1029" width="0.4444%" height="15" fill="rgb(245,182,24)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1039.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_msg (1 samples, 0.44%)</title><rect x="7.1111%" y="1013" width="0.4444%" height="15" fill="rgb(242,14,37)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1023.50"></text></g><g><title>rustls::common_state::CommonState::process_main_protocol (1 samples, 0.44%)</title><rect x="7.1111%" y="997" width="0.4444%" height="15" fill="rgb(246,228,12)" fg:x="16" fg:w="1"/><text x="7.3611%" y="1007.50"></text></g><g><title>&lt;rustls::client::tls13::ExpectCertificateVerify as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.44%)</title><rect x="7.1111%" y="981" width="0.4444%" height="15" fill="rgb(213,55,15)" fg:x="16" fg:w="1"/><text x="7.3611%" y="991.50"></text></g><g><title>rustls::verify::ServerCertVerifier::verify_tls13_signature (1 samples, 0.44%)</title><rect x="7.1111%" y="965" width="0.4444%" height="15" fill="rgb(209,9,3)" fg:x="16" fg:w="1"/><text x="7.3611%" y="975.50"></text></g><g><title>rustls::verify::verify_tls13 (1 samples, 0.44%)</title><rect x="7.1111%" y="949" width="0.4444%" height="15" fill="rgb(230,59,30)" fg:x="16" fg:w="1"/><text x="7.3611%" y="959.50"></text></g><g><title>webpki::end_entity::EndEntityCert::verify_signature (1 samples, 0.44%)</title><rect x="7.1111%" y="933" width="0.4444%" height="15" fill="rgb(209,121,21)" fg:x="16" fg:w="1"/><text x="7.3611%" y="943.50"></text></g><g><title>webpki::signed_data::verify_signature (1 samples, 0.44%)</title><rect x="7.1111%" y="917" width="0.4444%" height="15" fill="rgb(220,109,13)" fg:x="16" fg:w="1"/><text x="7.3611%" y="927.50"></text></g><g><title>ring::signature::UnparsedPublicKey&lt;B&gt;::verify (1 samples, 0.44%)</title><rect x="7.1111%" y="901" width="0.4444%" height="15" fill="rgb(232,18,1)" fg:x="16" fg:w="1"/><text x="7.3611%" y="911.50"></text></g><g><title>&lt;ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm as ring::signature::VerificationAlgorithm&gt;::verify (1 samples, 0.44%)</title><rect x="7.1111%" y="885" width="0.4444%" height="15" fill="rgb(215,41,42)" fg:x="16" fg:w="1"/><text x="7.3611%" y="895.50"></text></g><g><title>ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm::verify_digest (1 samples, 0.44%)</title><rect x="7.1111%" y="869" width="0.4444%" height="15" fill="rgb(224,123,36)" fg:x="16" fg:w="1"/><text x="7.3611%" y="879.50"></text></g><g><title>ring::ec::suite_b::ops::p256::twin_mul_nistz256 (1 samples, 0.44%)</title><rect x="7.1111%" y="853" width="0.4444%" height="15" fill="rgb(240,125,3)" fg:x="16" fg:w="1"/><text x="7.3611%" y="863.50"></text></g><g><title>ring::ec::suite_b::ops::PrivateKeyOps::point_mul (1 samples, 0.44%)</title><rect x="7.1111%" y="837" width="0.4444%" height="15" fill="rgb(205,98,50)" fg:x="16" fg:w="1"/><text x="7.3611%" y="847.50"></text></g><g><title>ring_core_0_17_8_p256_point_mul (1 samples, 0.44%)</title><rect x="7.1111%" y="821" width="0.4444%" height="15" fill="rgb(205,185,37)" fg:x="16" fg:w="1"/><text x="7.3611%" y="831.50"></text></g><g><title>ecp_nistz256_windowed_mul (1 samples, 0.44%)</title><rect x="7.1111%" y="805" width="0.4444%" height="15" fill="rgb(238,207,15)" fg:x="16" fg:w="1"/><text x="7.3611%" y="815.50"></text></g><g><title>ecp_nistz256_point_addx (1 samples, 0.44%)</title><rect x="7.1111%" y="789" width="0.4444%" height="15" fill="rgb(213,199,42)" fg:x="16" fg:w="1"/><text x="7.3611%" y="799.50"></text></g><g><title>__ecp_nistz256_sqr_montx (1 samples, 0.44%)</title><rect x="7.1111%" y="773" width="0.4444%" height="15" fill="rgb(235,201,11)" fg:x="16" fg:w="1"/><text x="7.3611%" y="783.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1253" width="0.4444%" height="15" fill="rgb(207,46,11)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1263.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1237" width="0.4444%" height="15" fill="rgb(241,35,35)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1247.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1221" width="0.4444%" height="15" fill="rgb(243,32,47)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1231.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1205" width="0.4444%" height="15" fill="rgb(247,202,23)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1215.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1189" width="0.4444%" height="15" fill="rgb(219,102,11)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1199.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1173" width="0.4444%" height="15" fill="rgb(243,110,44)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1183.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1157" width="0.4444%" height="15" fill="rgb(222,74,54)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1167.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1141" width="0.4444%" height="15" fill="rgb(216,99,12)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1151.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1125" width="0.4444%" height="15" fill="rgb(226,22,26)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1135.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1109" width="0.4444%" height="15" fill="rgb(217,163,10)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1119.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1093" width="0.4444%" height="15" fill="rgb(213,25,53)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1103.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1077" width="0.4444%" height="15" fill="rgb(252,105,26)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1087.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1061" width="0.4444%" height="15" fill="rgb(220,39,43)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1071.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="1045" width="0.4444%" height="15" fill="rgb(229,68,48)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1055.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.44%)</title><rect x="7.5556%" y="1029" width="0.4444%" height="15" fill="rgb(252,8,32)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1039.50"></text></g><g><title>reqwest::connect::Connector::connect_with_maybe_proxy::{{closure}} (1 samples, 0.44%)</title><rect x="7.5556%" y="1013" width="0.4444%" height="15" fill="rgb(223,20,43)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1023.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="997" width="0.4444%" height="15" fill="rgb(229,81,49)" fg:x="17" fg:w="1"/><text x="7.8056%" y="1007.50"></text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.44%)</title><rect x="7.5556%" y="981" width="0.4444%" height="15" fill="rgb(236,28,36)" fg:x="17" fg:w="1"/><text x="7.8056%" y="991.50"></text></g><g><title>&lt;tokio_rustls::Connect&lt;IO&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="965" width="0.4444%" height="15" fill="rgb(249,185,26)" fg:x="17" fg:w="1"/><text x="7.8056%" y="975.50"></text></g><g><title>&lt;tokio_rustls::common::handshake::MidHandshake&lt;IS&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="7.5556%" y="949" width="0.4444%" height="15" fill="rgb(249,174,33)" fg:x="17" fg:w="1"/><text x="7.8056%" y="959.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::handshake (1 samples, 0.44%)</title><rect x="7.5556%" y="933" width="0.4444%" height="15" fill="rgb(233,201,37)" fg:x="17" fg:w="1"/><text x="7.8056%" y="943.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (1 samples, 0.44%)</title><rect x="7.5556%" y="917" width="0.4444%" height="15" fill="rgb(221,78,26)" fg:x="17" fg:w="1"/><text x="7.8056%" y="927.50"></text></g><g><title>rustls::conn::ConnectionCommon&lt;Data&gt;::process_new_packets (1 samples, 0.44%)</title><rect x="7.5556%" y="901" width="0.4444%" height="15" fill="rgb(250,127,30)" fg:x="17" fg:w="1"/><text x="7.8056%" y="911.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.44%)</title><rect x="7.5556%" y="885" width="0.4444%" height="15" fill="rgb(230,49,44)" fg:x="17" fg:w="1"/><text x="7.8056%" y="895.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_msg (1 samples, 0.44%)</title><rect x="7.5556%" y="869" width="0.4444%" height="15" fill="rgb(229,67,23)" fg:x="17" fg:w="1"/><text x="7.8056%" y="879.50"></text></g><g><title>rustls::common_state::CommonState::process_main_protocol (1 samples, 0.44%)</title><rect x="7.5556%" y="853" width="0.4444%" height="15" fill="rgb(249,83,47)" fg:x="17" fg:w="1"/><text x="7.8056%" y="863.50"></text></g><g><title>&lt;rustls::client::tls13::ExpectCertificateVerify as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.44%)</title><rect x="7.5556%" y="837" width="0.4444%" height="15" fill="rgb(215,43,3)" fg:x="17" fg:w="1"/><text x="7.8056%" y="847.50"></text></g><g><title>&lt;rustls::verify::WebPkiVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (1 samples, 0.44%)</title><rect x="7.5556%" y="821" width="0.4444%" height="15" fill="rgb(238,154,13)" fg:x="17" fg:w="1"/><text x="7.8056%" y="831.50"></text></g><g><title>rustls::verify::verify_server_cert_signed_by_trust_anchor (1 samples, 0.44%)</title><rect x="7.5556%" y="805" width="0.4444%" height="15" fill="rgb(219,56,2)" fg:x="17" fg:w="1"/><text x="7.8056%" y="815.50"></text></g><g><title>webpki::end_entity::EndEntityCert::verify_for_usage (1 samples, 0.44%)</title><rect x="7.5556%" y="789" width="0.4444%" height="15" fill="rgb(233,0,4)" fg:x="17" fg:w="1"/><text x="7.8056%" y="799.50"></text></g><g><title>webpki::end_entity::EndEntityCert::verify_is_valid_cert (1 samples, 0.44%)</title><rect x="7.5556%" y="773" width="0.4444%" height="15" fill="rgb(235,30,7)" fg:x="17" fg:w="1"/><text x="7.8056%" y="783.50"></text></g><g><title>webpki::verify_cert::build_chain (1 samples, 0.44%)</title><rect x="7.5556%" y="757" width="0.4444%" height="15" fill="rgb(250,79,13)" fg:x="17" fg:w="1"/><text x="7.8056%" y="767.50"></text></g><g><title>webpki::verify_cert::build_chain_inner (1 samples, 0.44%)</title><rect x="7.5556%" y="741" width="0.4444%" height="15" fill="rgb(211,146,34)" fg:x="17" fg:w="1"/><text x="7.8056%" y="751.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (1 samples, 0.44%)</title><rect x="7.5556%" y="725" width="0.4444%" height="15" fill="rgb(228,22,38)" fg:x="17" fg:w="1"/><text x="7.8056%" y="735.50"></text></g><g><title>webpki::verify_cert::build_chain_inner::{{closure}} (1 samples, 0.44%)</title><rect x="7.5556%" y="709" width="0.4444%" height="15" fill="rgb(235,168,5)" fg:x="17" fg:w="1"/><text x="7.8056%" y="719.50"></text></g><g><title>webpki::verify_cert::build_chain_inner (1 samples, 0.44%)</title><rect x="7.5556%" y="693" width="0.4444%" height="15" fill="rgb(221,155,16)" fg:x="17" fg:w="1"/><text x="7.8056%" y="703.50"></text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (1 samples, 0.44%)</title><rect x="7.5556%" y="677" width="0.4444%" height="15" fill="rgb(215,215,53)" fg:x="17" fg:w="1"/><text x="7.8056%" y="687.50"></text></g><g><title>webpki::verify_cert::build_chain_inner::{{closure}} (1 samples, 0.44%)</title><rect x="7.5556%" y="661" width="0.4444%" height="15" fill="rgb(223,4,10)" fg:x="17" fg:w="1"/><text x="7.8056%" y="671.50"></text></g><g><title>webpki::verify_cert::check_signed_chain (1 samples, 0.44%)</title><rect x="7.5556%" y="645" width="0.4444%" height="15" fill="rgb(234,103,6)" fg:x="17" fg:w="1"/><text x="7.8056%" y="655.50"></text></g><g><title>webpki::signed_data::verify_signed_data (1 samples, 0.44%)</title><rect x="7.5556%" y="629" width="0.4444%" height="15" fill="rgb(227,97,0)" fg:x="17" fg:w="1"/><text x="7.8056%" y="639.50"></text></g><g><title>webpki::signed_data::verify_signature (1 samples, 0.44%)</title><rect x="7.5556%" y="613" width="0.4444%" height="15" fill="rgb(234,150,53)" fg:x="17" fg:w="1"/><text x="7.8056%" y="623.50"></text></g><g><title>ring::signature::UnparsedPublicKey&lt;B&gt;::verify (1 samples, 0.44%)</title><rect x="7.5556%" y="597" width="0.4444%" height="15" fill="rgb(228,201,54)" fg:x="17" fg:w="1"/><text x="7.8056%" y="607.50"></text></g><g><title>&lt;ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm as ring::signature::VerificationAlgorithm&gt;::verify (1 samples, 0.44%)</title><rect x="7.5556%" y="581" width="0.4444%" height="15" fill="rgb(222,22,37)" fg:x="17" fg:w="1"/><text x="7.8056%" y="591.50"></text></g><g><title>ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm::verify_digest (1 samples, 0.44%)</title><rect x="7.5556%" y="565" width="0.4444%" height="15" fill="rgb(237,53,32)" fg:x="17" fg:w="1"/><text x="7.8056%" y="575.50"></text></g><g><title>untrusted::input::Input::read_all (1 samples, 0.44%)</title><rect x="7.5556%" y="549" width="0.4444%" height="15" fill="rgb(233,25,53)" fg:x="17" fg:w="1"/><text x="7.8056%" y="559.50"></text></g><g><title>ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm::verify_digest::{{closure}} (1 samples, 0.44%)</title><rect x="7.5556%" y="533" width="0.4444%" height="15" fill="rgb(210,40,34)" fg:x="17" fg:w="1"/><text x="7.8056%" y="543.50"></text></g><g><title>ring::ec::suite_b::ecdsa::verification::split_rs_asn1 (1 samples, 0.44%)</title><rect x="7.5556%" y="517" width="0.4444%" height="15" fill="rgb(241,220,44)" fg:x="17" fg:w="1"/><text x="7.8056%" y="527.50"></text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="8.0000%" y="1253" width="0.4444%" height="15" fill="rgb(235,28,35)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1263.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="8.0000%" y="1237" width="0.4444%" height="15" fill="rgb(210,56,17)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1247.50"></text></g><g><title>&lt;futures_util::future::try_future::AndThen&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="8.0000%" y="1221" width="0.4444%" height="15" fill="rgb(224,130,29)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1231.50"></text></g><g><title>&lt;futures_util::future::try_future::TryFlatten&lt;Fut1,Fut2&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="8.0000%" y="1205" width="0.4444%" height="15" fill="rgb(235,212,8)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1215.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="8.0000%" y="1189" width="0.4444%" height="15" fill="rgb(223,33,50)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1199.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.44%)</title><rect x="8.0000%" y="1173" width="0.4444%" height="15" fill="rgb(219,149,13)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1183.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="8.0000%" y="1157" width="0.4444%" height="15" fill="rgb(250,156,29)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1167.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="8.0000%" y="1141" width="0.4444%" height="15" fill="rgb(216,193,19)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1151.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::connect_to::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.44%)</title><rect x="8.0000%" y="1125" width="0.4444%" height="15" fill="rgb(216,135,14)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1135.50"></text></g><g><title>hyper::client::conn::Builder::handshake::{{closure}} (1 samples, 0.44%)</title><rect x="8.0000%" y="1109" width="0.4444%" height="15" fill="rgb(241,47,5)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1119.50"></text></g><g><title>hyper::proto::h2::client::handshake::{{closure}} (1 samples, 0.44%)</title><rect x="8.0000%" y="1093" width="0.4444%" height="15" fill="rgb(233,42,35)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1103.50"></text></g><g><title>h2::client::Connection&lt;T,B&gt;::handshake2::{{closure}} (1 samples, 0.44%)</title><rect x="8.0000%" y="1077" width="0.4444%" height="15" fill="rgb(231,13,6)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1087.50"></text></g><g><title>h2::codec::Codec&lt;T,B&gt;::buffer (1 samples, 0.44%)</title><rect x="8.0000%" y="1061" width="0.4444%" height="15" fill="rgb(207,181,40)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1071.50"></text></g><g><title>h2::codec::framed_write::FramedWrite&lt;T,B&gt;::buffer (1 samples, 0.44%)</title><rect x="8.0000%" y="1045" width="0.4444%" height="15" fill="rgb(254,173,49)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1055.50"></text></g><g><title>h2::codec::framed_write::Encoder&lt;B&gt;::buffer (1 samples, 0.44%)</title><rect x="8.0000%" y="1029" width="0.4444%" height="15" fill="rgb(221,1,38)" fg:x="18" fg:w="1"/><text x="8.2500%" y="1039.50"></text></g><g><title>blockstm::scheduler::Scheduler::new (1 samples, 0.44%)</title><rect x="8.4444%" y="789" width="0.4444%" height="15" fill="rgb(206,124,46)" fg:x="19" fg:w="1"/><text x="8.6944%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.44%)</title><rect x="8.4444%" y="773" width="0.4444%" height="15" fill="rgb(249,21,11)" fg:x="19" fg:w="1"/><text x="8.6944%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.44%)</title><rect x="8.4444%" y="757" width="0.4444%" height="15" fill="rgb(222,201,40)" fg:x="19" fg:w="1"/><text x="8.6944%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.44%)</title><rect x="8.4444%" y="741" width="0.4444%" height="15" fill="rgb(235,61,29)" fg:x="19" fg:w="1"/><text x="8.6944%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.44%)</title><rect x="8.4444%" y="725" width="0.4444%" height="15" fill="rgb(219,207,3)" fg:x="19" fg:w="1"/><text x="8.6944%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.44%)</title><rect x="8.4444%" y="709" width="0.4444%" height="15" fill="rgb(222,56,46)" fg:x="19" fg:w="1"/><text x="8.6944%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.44%)</title><rect x="8.4444%" y="693" width="0.4444%" height="15" fill="rgb(239,76,54)" fg:x="19" fg:w="1"/><text x="8.6944%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.44%)</title><rect x="8.4444%" y="677" width="0.4444%" height="15" fill="rgb(231,124,27)" fg:x="19" fg:w="1"/><text x="8.6944%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.44%)</title><rect x="8.4444%" y="661" width="0.4444%" height="15" fill="rgb(249,195,6)" fg:x="19" fg:w="1"/><text x="8.6944%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.44%)</title><rect x="8.4444%" y="645" width="0.4444%" height="15" fill="rgb(237,174,47)" fg:x="19" fg:w="1"/><text x="8.6944%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.44%)</title><rect x="8.4444%" y="629" width="0.4444%" height="15" fill="rgb(206,201,31)" fg:x="19" fg:w="1"/><text x="8.6944%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.44%)</title><rect x="8.4444%" y="613" width="0.4444%" height="15" fill="rgb(231,57,52)" fg:x="19" fg:w="1"/><text x="8.6944%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (1 samples, 0.44%)</title><rect x="8.4444%" y="597" width="0.4444%" height="15" fill="rgb(248,177,22)" fg:x="19" fg:w="1"/><text x="8.6944%" y="607.50"></text></g><g><title>core::ptr::write (1 samples, 0.44%)</title><rect x="8.4444%" y="581" width="0.4444%" height="15" fill="rgb(215,211,37)" fg:x="19" fg:w="1"/><text x="8.6944%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;blockstm::mvhashmap::mvhashmap::MVHashMap&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="789" width="0.8889%" height="15" fill="rgb(241,128,51)" fg:x="20" fg:w="2"/><text x="9.1389%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;blockstm::mvhashmap::versioned_data::VersionedData&lt;blockstm::view::ReadKey,blockstm::view::ReadValue&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="773" width="0.8889%" height="15" fill="rgb(227,165,31)" fg:x="20" fg:w="2"/><text x="9.1389%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::DashMap&lt;blockstm::view::ReadKey,blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="757" width="0.8889%" height="15" fill="rgb(228,167,24)" fg:x="20" fg:w="2"/><text x="9.1389%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;blockstm::view::ReadKey,dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;,std::hash::random::RandomState&gt;&gt;]&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="741" width="0.8889%" height="15" fill="rgb(228,143,12)" fg:x="20" fg:w="2"/><text x="9.1389%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;blockstm::view::ReadKey,dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;,std::hash::random::RandomState&gt;&gt;]&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="725" width="0.8889%" height="15" fill="rgb(249,149,8)" fg:x="20" fg:w="2"/><text x="9.1389%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLock&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;blockstm::view::ReadKey,dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="709" width="0.8889%" height="15" fill="rgb(243,35,44)" fg:x="20" fg:w="2"/><text x="9.1389%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;hashbrown::map::HashMap&lt;blockstm::view::ReadKey,dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="693" width="0.8889%" height="15" fill="rgb(246,89,9)" fg:x="20" fg:w="2"/><text x="9.1389%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;blockstm::view::ReadKey,dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;,std::hash::random::RandomState&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="677" width="0.8889%" height="15" fill="rgb(233,213,13)" fg:x="20" fg:w="2"/><text x="9.1389%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(blockstm::view::ReadKey,dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;)&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="661" width="0.8889%" height="15" fill="rgb(233,141,41)" fg:x="20" fg:w="2"/><text x="9.1389%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.89%)</title><rect x="8.8889%" y="645" width="0.8889%" height="15" fill="rgb(239,167,4)" fg:x="20" fg:w="2"/><text x="9.1389%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::drop_inner_table (2 samples, 0.89%)</title><rect x="8.8889%" y="629" width="0.8889%" height="15" fill="rgb(209,217,16)" fg:x="20" fg:w="2"/><text x="9.1389%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::drop_elements (2 samples, 0.89%)</title><rect x="8.8889%" y="613" width="0.8889%" height="15" fill="rgb(219,88,35)" fg:x="20" fg:w="2"/><text x="9.1389%" y="623.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (2 samples, 0.89%)</title><rect x="8.8889%" y="597" width="0.8889%" height="15" fill="rgb(220,193,23)" fg:x="20" fg:w="2"/><text x="9.1389%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.89%)</title><rect x="8.8889%" y="581" width="0.8889%" height="15" fill="rgb(230,90,52)" fg:x="20" fg:w="2"/><text x="9.1389%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(blockstm::view::ReadKey,dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;)&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="565" width="0.8889%" height="15" fill="rgb(252,106,19)" fg:x="20" fg:w="2"/><text x="9.1389%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="549" width="0.8889%" height="15" fill="rgb(206,74,20)" fg:x="20" fg:w="2"/><text x="9.1389%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="533" width="0.8889%" height="15" fill="rgb(230,138,44)" fg:x="20" fg:w="2"/><text x="9.1389%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="517" width="0.8889%" height="15" fill="rgb(235,182,43)" fg:x="20" fg:w="2"/><text x="9.1389%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;blockstm::mvhashmap::types::ShiftedTxnIndex,crossbeam_utils::cache_padded::CachePadded&lt;blockstm::mvhashmap::versioned_data::Entry&lt;blockstm::view::ReadValue&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="501" width="0.8889%" height="15" fill="rgb(242,16,51)" fg:x="20" fg:w="2"/><text x="9.1389%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.89%)</title><rect x="8.8889%" y="485" width="0.8889%" height="15" fill="rgb(248,9,4)" fg:x="20" fg:w="2"/><text x="9.1389%" y="495.50"></text></g><g><title>core::mem::drop (2 samples, 0.89%)</title><rect x="8.8889%" y="469" width="0.8889%" height="15" fill="rgb(210,31,22)" fg:x="20" fg:w="2"/><text x="9.1389%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;blockstm::mvhashmap::types::ShiftedTxnIndex,crossbeam_utils::cache_padded::CachePadded&lt;blockstm::mvhashmap::versioned_data::Entry&lt;blockstm::view::ReadValue&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="8.8889%" y="453" width="0.8889%" height="15" fill="rgb(239,54,39)" fg:x="20" fg:w="2"/><text x="9.1389%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.89%)</title><rect x="8.8889%" y="437" width="0.8889%" height="15" fill="rgb(230,99,41)" fg:x="20" fg:w="2"/><text x="9.1389%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.89%)</title><rect x="8.8889%" y="421" width="0.8889%" height="15" fill="rgb(253,106,12)" fg:x="20" fg:w="2"/><text x="9.1389%" y="431.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (2 samples, 0.89%)</title><rect x="8.8889%" y="405" width="0.8889%" height="15" fill="rgb(213,46,41)" fg:x="20" fg:w="2"/><text x="9.1389%" y="415.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (2 samples, 0.89%)</title><rect x="8.8889%" y="389" width="0.8889%" height="15" fill="rgb(215,133,35)" fg:x="20" fg:w="2"/><text x="9.1389%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (2 samples, 0.89%)</title><rect x="8.8889%" y="373" width="0.8889%" height="15" fill="rgb(213,28,5)" fg:x="20" fg:w="2"/><text x="9.1389%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.89%)</title><rect x="8.8889%" y="357" width="0.8889%" height="15" fill="rgb(215,77,49)" fg:x="20" fg:w="2"/><text x="9.1389%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.89%)</title><rect x="8.8889%" y="341" width="0.8889%" height="15" fill="rgb(248,100,22)" fg:x="20" fg:w="2"/><text x="9.1389%" y="351.50"></text></g><g><title>__free (2 samples, 0.89%)</title><rect x="8.8889%" y="325" width="0.8889%" height="15" fill="rgb(208,67,9)" fg:x="20" fg:w="2"/><text x="9.1389%" y="335.50"></text></g><g><title>_int_free (2 samples, 0.89%)</title><rect x="8.8889%" y="309" width="0.8889%" height="15" fill="rgb(219,133,21)" fg:x="20" fg:w="2"/><text x="9.1389%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;crossbeam_utils::cache_padded::CachePadded&lt;std::sync::rwlock::RwLock&lt;core::option::Option&lt;alloc::sync::Arc&lt;blockstm::captured_reads::CapturedReads&lt;blockstm::view::ReadKey,blockstm::view::ReadValue&gt;&gt;&gt;&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="773" width="0.8889%" height="15" fill="rgb(246,46,29)" fg:x="22" fg:w="2"/><text x="10.0278%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.89%)</title><rect x="9.7778%" y="757" width="0.8889%" height="15" fill="rgb(246,185,52)" fg:x="22" fg:w="2"/><text x="10.0278%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[crossbeam_utils::cache_padded::CachePadded&lt;std::sync::rwlock::RwLock&lt;core::option::Option&lt;alloc::sync::Arc&lt;blockstm::captured_reads::CapturedReads&lt;blockstm::view::ReadKey,blockstm::view::ReadValue&gt;&gt;&gt;&gt;&gt;]&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="741" width="0.8889%" height="15" fill="rgb(252,136,11)" fg:x="22" fg:w="2"/><text x="10.0278%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_utils::cache_padded::CachePadded&lt;std::sync::rwlock::RwLock&lt;core::option::Option&lt;alloc::sync::Arc&lt;blockstm::captured_reads::CapturedReads&lt;blockstm::view::ReadKey,blockstm::view::ReadValue&gt;&gt;&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="725" width="0.8889%" height="15" fill="rgb(219,138,53)" fg:x="22" fg:w="2"/><text x="10.0278%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLock&lt;core::option::Option&lt;alloc::sync::Arc&lt;blockstm::captured_reads::CapturedReads&lt;blockstm::view::ReadKey,blockstm::view::ReadValue&gt;&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="709" width="0.8889%" height="15" fill="rgb(211,51,23)" fg:x="22" fg:w="2"/><text x="10.0278%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;blockstm::captured_reads::CapturedReads&lt;blockstm::view::ReadKey,blockstm::view::ReadValue&gt;&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="693" width="0.8889%" height="15" fill="rgb(247,221,28)" fg:x="22" fg:w="2"/><text x="10.0278%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;blockstm::captured_reads::CapturedReads&lt;blockstm::view::ReadKey,blockstm::view::ReadValue&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="677" width="0.8889%" height="15" fill="rgb(251,222,45)" fg:x="22" fg:w="2"/><text x="10.0278%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;blockstm::captured_reads::CapturedReads&lt;blockstm::view::ReadKey,blockstm::view::ReadValue&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="661" width="0.8889%" height="15" fill="rgb(217,162,53)" fg:x="22" fg:w="2"/><text x="10.0278%" y="671.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.89%)</title><rect x="9.7778%" y="645" width="0.8889%" height="15" fill="rgb(229,93,14)" fg:x="22" fg:w="2"/><text x="10.0278%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.89%)</title><rect x="9.7778%" y="629" width="0.8889%" height="15" fill="rgb(209,67,49)" fg:x="22" fg:w="2"/><text x="10.0278%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;blockstm::captured_reads::CapturedReads&lt;blockstm::view::ReadKey,blockstm::view::ReadValue&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="613" width="0.8889%" height="15" fill="rgb(213,87,29)" fg:x="22" fg:w="2"/><text x="10.0278%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;blockstm::view::ReadKey,blockstm::captured_reads::DataRead&lt;blockstm::view::ReadValue&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="597" width="0.8889%" height="15" fill="rgb(205,151,52)" fg:x="22" fg:w="2"/><text x="10.0278%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;blockstm::view::ReadKey,blockstm::captured_reads::DataRead&lt;blockstm::view::ReadValue&gt;,std::hash::random::RandomState&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="581" width="0.8889%" height="15" fill="rgb(253,215,39)" fg:x="22" fg:w="2"/><text x="10.0278%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(blockstm::view::ReadKey,blockstm::captured_reads::DataRead&lt;blockstm::view::ReadValue&gt;)&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="565" width="0.8889%" height="15" fill="rgb(221,220,41)" fg:x="22" fg:w="2"/><text x="10.0278%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.89%)</title><rect x="9.7778%" y="549" width="0.8889%" height="15" fill="rgb(218,133,21)" fg:x="22" fg:w="2"/><text x="10.0278%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.89%)</title><rect x="9.7778%" y="533" width="0.8889%" height="15" fill="rgb(221,193,43)" fg:x="22" fg:w="2"/><text x="10.0278%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.89%)</title><rect x="9.7778%" y="517" width="0.8889%" height="15" fill="rgb(240,128,52)" fg:x="22" fg:w="2"/><text x="10.0278%" y="527.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.89%)</title><rect x="9.7778%" y="501" width="0.8889%" height="15" fill="rgb(253,114,12)" fg:x="22" fg:w="2"/><text x="10.0278%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.89%)</title><rect x="9.7778%" y="485" width="0.8889%" height="15" fill="rgb(215,223,47)" fg:x="22" fg:w="2"/><text x="10.0278%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(blockstm::view::ReadKey,blockstm::captured_reads::DataRead&lt;blockstm::view::ReadValue&gt;)&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="469" width="0.8889%" height="15" fill="rgb(248,225,23)" fg:x="22" fg:w="2"/><text x="10.0278%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;blockstm::captured_reads::DataRead&lt;blockstm::view::ReadValue&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="453" width="0.8889%" height="15" fill="rgb(250,108,0)" fg:x="22" fg:w="2"/><text x="10.0278%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;blockstm::view::ReadValue&gt;&gt; (2 samples, 0.89%)</title><rect x="9.7778%" y="437" width="0.8889%" height="15" fill="rgb(228,208,7)" fg:x="22" fg:w="2"/><text x="10.0278%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.89%)</title><rect x="9.7778%" y="421" width="0.8889%" height="15" fill="rgb(244,45,10)" fg:x="22" fg:w="2"/><text x="10.0278%" y="431.50"></text></g><g><title>__free (2 samples, 0.89%)</title><rect x="9.7778%" y="405" width="0.8889%" height="15" fill="rgb(207,125,25)" fg:x="22" fg:w="2"/><text x="10.0278%" y="415.50"></text></g><g><title>_int_free (2 samples, 0.89%)</title><rect x="9.7778%" y="389" width="0.8889%" height="15" fill="rgb(210,195,18)" fg:x="22" fg:w="2"/><text x="10.0278%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (1 samples, 0.44%)</title><rect x="10.6667%" y="597" width="0.4444%" height="15" fill="rgb(249,80,12)" fg:x="24" fg:w="1"/><text x="10.9167%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (1 samples, 0.44%)</title><rect x="10.6667%" y="581" width="0.4444%" height="15" fill="rgb(221,65,9)" fg:x="24" fg:w="1"/><text x="10.9167%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="10.6667%" y="565" width="0.4444%" height="15" fill="rgb(235,49,36)" fg:x="24" fg:w="1"/><text x="10.9167%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloy_primitives::log::Log]&gt; (1 samples, 0.44%)</title><rect x="10.6667%" y="549" width="0.4444%" height="15" fill="rgb(225,32,20)" fg:x="24" fg:w="1"/><text x="10.9167%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::log::Log&gt; (1 samples, 0.44%)</title><rect x="10.6667%" y="533" width="0.4444%" height="15" fill="rgb(215,141,46)" fg:x="24" fg:w="1"/><text x="10.9167%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::log::LogData&gt; (1 samples, 0.44%)</title><rect x="10.6667%" y="517" width="0.4444%" height="15" fill="rgb(250,160,47)" fg:x="24" fg:w="1"/><text x="10.9167%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.44%)</title><rect x="10.6667%" y="501" width="0.4444%" height="15" fill="rgb(216,222,40)" fg:x="24" fg:w="1"/><text x="10.9167%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.44%)</title><rect x="10.6667%" y="485" width="0.4444%" height="15" fill="rgb(234,217,39)" fg:x="24" fg:w="1"/><text x="10.9167%" y="495.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="10.6667%" y="469" width="0.4444%" height="15" fill="rgb(207,178,40)" fg:x="24" fg:w="1"/><text x="10.9167%" y="479.50"></text></g><g><title>__free (1 samples, 0.44%)</title><rect x="10.6667%" y="453" width="0.4444%" height="15" fill="rgb(221,136,13)" fg:x="24" fg:w="1"/><text x="10.9167%" y="463.50"></text></g><g><title>_int_free (1 samples, 0.44%)</title><rect x="10.6667%" y="437" width="0.4444%" height="15" fill="rgb(249,199,10)" fg:x="24" fg:w="1"/><text x="10.9167%" y="447.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::execute_block (7 samples, 3.11%)</title><rect x="8.4444%" y="821" width="3.1111%" height="15" fill="rgb(249,222,13)" fg:x="19" fg:w="7"/><text x="8.6944%" y="831.50">blo..</text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::execute_transactions_parallel (7 samples, 3.11%)</title><rect x="8.4444%" y="805" width="3.1111%" height="15" fill="rgb(244,185,38)" fg:x="19" fg:w="7"/><text x="8.6944%" y="815.50">blo..</text></g><g><title>core::ptr::drop_in_place&lt;blockstm::txn_last_input_output::TxnLastInputOutput&gt; (4 samples, 1.78%)</title><rect x="9.7778%" y="789" width="1.7778%" height="15" fill="rgb(236,202,9)" fg:x="22" fg:w="4"/><text x="10.0278%" y="799.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;crossbeam_utils::cache_padded::CachePadded&lt;std::sync::rwlock::RwLock&lt;core::option::Option&lt;alloc::sync::Arc&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="10.6667%" y="773" width="0.8889%" height="15" fill="rgb(250,229,37)" fg:x="24" fg:w="2"/><text x="10.9167%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.89%)</title><rect x="10.6667%" y="757" width="0.8889%" height="15" fill="rgb(206,174,23)" fg:x="24" fg:w="2"/><text x="10.9167%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[crossbeam_utils::cache_padded::CachePadded&lt;std::sync::rwlock::RwLock&lt;core::option::Option&lt;alloc::sync::Arc&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt;]&gt; (2 samples, 0.89%)</title><rect x="10.6667%" y="741" width="0.8889%" height="15" fill="rgb(211,33,43)" fg:x="24" fg:w="2"/><text x="10.9167%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_utils::cache_padded::CachePadded&lt;std::sync::rwlock::RwLock&lt;core::option::Option&lt;alloc::sync::Arc&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="10.6667%" y="725" width="0.8889%" height="15" fill="rgb(245,58,50)" fg:x="24" fg:w="2"/><text x="10.9167%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLock&lt;core::option::Option&lt;alloc::sync::Arc&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="10.6667%" y="709" width="0.8889%" height="15" fill="rgb(244,68,36)" fg:x="24" fg:w="2"/><text x="10.9167%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::sync::Arc&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="10.6667%" y="693" width="0.8889%" height="15" fill="rgb(232,229,15)" fg:x="24" fg:w="2"/><text x="10.9167%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;revm_primitives::result::ResultAndState&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="10.6667%" y="677" width="0.8889%" height="15" fill="rgb(254,30,23)" fg:x="24" fg:w="2"/><text x="10.9167%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;revm_primitives::result::ResultAndState&gt;&gt; (2 samples, 0.89%)</title><rect x="10.6667%" y="661" width="0.8889%" height="15" fill="rgb(235,160,14)" fg:x="24" fg:w="2"/><text x="10.9167%" y="671.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.89%)</title><rect x="10.6667%" y="645" width="0.8889%" height="15" fill="rgb(212,155,44)" fg:x="24" fg:w="2"/><text x="10.9167%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.89%)</title><rect x="10.6667%" y="629" width="0.8889%" height="15" fill="rgb(226,2,50)" fg:x="24" fg:w="2"/><text x="10.9167%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_primitives::result::ResultAndState&gt; (2 samples, 0.89%)</title><rect x="10.6667%" y="613" width="0.8889%" height="15" fill="rgb(234,177,6)" fg:x="24" fg:w="2"/><text x="10.9167%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account&gt;&gt; (1 samples, 0.44%)</title><rect x="11.1111%" y="597" width="0.4444%" height="15" fill="rgb(217,24,9)" fg:x="25" fg:w="1"/><text x="11.3611%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm_primitives::state::Account,std::hash::random::RandomState&gt;&gt; (1 samples, 0.44%)</title><rect x="11.1111%" y="581" width="0.4444%" height="15" fill="rgb(220,13,46)" fg:x="25" fg:w="1"/><text x="11.3611%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm_primitives::state::Account)&gt;&gt; (1 samples, 0.44%)</title><rect x="11.1111%" y="565" width="0.4444%" height="15" fill="rgb(239,221,27)" fg:x="25" fg:w="1"/><text x="11.3611%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="11.1111%" y="549" width="0.4444%" height="15" fill="rgb(222,198,25)" fg:x="25" fg:w="1"/><text x="11.3611%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.44%)</title><rect x="11.1111%" y="533" width="0.4444%" height="15" fill="rgb(211,99,13)" fg:x="25" fg:w="1"/><text x="11.3611%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.44%)</title><rect x="11.1111%" y="517" width="0.4444%" height="15" fill="rgb(232,111,31)" fg:x="25" fg:w="1"/><text x="11.3611%" y="527.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.44%)</title><rect x="11.1111%" y="501" width="0.4444%" height="15" fill="rgb(245,82,37)" fg:x="25" fg:w="1"/><text x="11.3611%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.44%)</title><rect x="11.1111%" y="485" width="0.4444%" height="15" fill="rgb(227,149,46)" fg:x="25" fg:w="1"/><text x="11.3611%" y="495.50"></text></g><g><title>__free (1 samples, 0.44%)</title><rect x="11.1111%" y="469" width="0.4444%" height="15" fill="rgb(218,36,50)" fg:x="25" fg:w="1"/><text x="11.3611%" y="479.50"></text></g><g><title>_int_free (1 samples, 0.44%)</title><rect x="11.1111%" y="453" width="0.4444%" height="15" fill="rgb(226,80,48)" fg:x="25" fg:w="1"/><text x="11.3611%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::db::in_memory_db::CacheDB&lt;blockstm::example_utils::example_utils::PlaceholderDB&gt;&gt; (1 samples, 0.44%)</title><rect x="11.5556%" y="821" width="0.4444%" height="15" fill="rgb(238,224,15)" fg:x="26" fg:w="1"/><text x="11.8056%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount&gt;&gt; (1 samples, 0.44%)</title><rect x="11.5556%" y="805" width="0.4444%" height="15" fill="rgb(241,136,10)" fg:x="26" fg:w="1"/><text x="11.8056%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount,std::hash::random::RandomState&gt;&gt; (1 samples, 0.44%)</title><rect x="11.5556%" y="789" width="0.4444%" height="15" fill="rgb(208,32,45)" fg:x="26" fg:w="1"/><text x="11.8056%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt;&gt; (1 samples, 0.44%)</title><rect x="11.5556%" y="773" width="0.4444%" height="15" fill="rgb(207,135,9)" fg:x="26" fg:w="1"/><text x="11.8056%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="11.5556%" y="757" width="0.4444%" height="15" fill="rgb(206,86,44)" fg:x="26" fg:w="1"/><text x="11.8056%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.44%)</title><rect x="11.5556%" y="741" width="0.4444%" height="15" fill="rgb(245,177,15)" fg:x="26" fg:w="1"/><text x="11.8056%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.44%)</title><rect x="11.5556%" y="725" width="0.4444%" height="15" fill="rgb(206,64,50)" fg:x="26" fg:w="1"/><text x="11.8056%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.44%)</title><rect x="11.5556%" y="709" width="0.4444%" height="15" fill="rgb(234,36,40)" fg:x="26" fg:w="1"/><text x="11.8056%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.44%)</title><rect x="11.5556%" y="693" width="0.4444%" height="15" fill="rgb(213,64,8)" fg:x="26" fg:w="1"/><text x="11.8056%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloy_primitives::bits::address::Address,revm::db::in_memory_db::DbAccount)&gt; (1 samples, 0.44%)</title><rect x="11.5556%" y="677" width="0.4444%" height="15" fill="rgb(210,75,36)" fg:x="26" fg:w="1"/><text x="11.8056%" y="687.50"></text></g><g><title>__free (1 samples, 0.44%)</title><rect x="11.5556%" y="661" width="0.4444%" height="15" fill="rgb(229,88,21)" fg:x="26" fg:w="1"/><text x="11.8056%" y="671.50"></text></g><g><title>_int_free (1 samples, 0.44%)</title><rect x="11.5556%" y="645" width="0.4444%" height="15" fill="rgb(252,204,47)" fg:x="26" fg:w="1"/><text x="11.8056%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.44%)</title><rect x="12.0000%" y="149" width="0.4444%" height="15" fill="rgb(208,77,27)" fg:x="27" fg:w="1"/><text x="12.2500%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="12.0000%" y="133" width="0.4444%" height="15" fill="rgb(221,76,26)" fg:x="27" fg:w="1"/><text x="12.2500%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="12.0000%" y="117" width="0.4444%" height="15" fill="rgb(225,139,18)" fg:x="27" fg:w="1"/><text x="12.2500%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.44%)</title><rect x="12.0000%" y="101" width="0.4444%" height="15" fill="rgb(230,137,11)" fg:x="27" fg:w="1"/><text x="12.2500%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="12.0000%" y="85" width="0.4444%" height="15" fill="rgb(212,28,1)" fg:x="27" fg:w="1"/><text x="12.2500%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="12.0000%" y="69" width="0.4444%" height="15" fill="rgb(248,164,17)" fg:x="27" fg:w="1"/><text x="12.2500%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="12.0000%" y="53" width="0.4444%" height="15" fill="rgb(222,171,42)" fg:x="27" fg:w="1"/><text x="12.2500%" y="63.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.44%)</title><rect x="12.0000%" y="37" width="0.4444%" height="15" fill="rgb(243,84,45)" fg:x="27" fg:w="1"/><text x="12.2500%" y="47.50"></text></g><g><title>const_hex::arch::x86::check (2 samples, 0.89%)</title><rect x="12.4444%" y="133" width="0.8889%" height="15" fill="rgb(252,49,23)" fg:x="28" fg:w="2"/><text x="12.6944%" y="143.50"></text></g><g><title>const_hex::arch::x86::check_sse2 (2 samples, 0.89%)</title><rect x="12.4444%" y="117" width="0.8889%" height="15" fill="rgb(215,19,7)" fg:x="28" fg:w="2"/><text x="12.6944%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_and_si128 (2 samples, 0.89%)</title><rect x="12.4444%" y="101" width="0.8889%" height="15" fill="rgb(238,81,41)" fg:x="28" fg:w="2"/><text x="12.6944%" y="111.50"></text></g><g><title>const_hex::arch::x86::unhex_avx2 (1 samples, 0.44%)</title><rect x="13.3333%" y="101" width="0.4444%" height="15" fill="rgb(210,199,37)" fg:x="30" fg:w="1"/><text x="13.5833%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_maddubs_epi16 (1 samples, 0.44%)</title><rect x="13.3333%" y="85" width="0.4444%" height="15" fill="rgb(244,192,49)" fg:x="30" fg:w="1"/><text x="13.5833%" y="95.50"></text></g><g><title>&lt;alloy_primitives::bytes_::serde::&lt;impl serde::de::Deserialize for alloy_primitives::bytes_::Bytes&gt;::deserialize::BytesVisitor as serde::de::Visitor&gt;::visit_str (5 samples, 2.22%)</title><rect x="12.0000%" y="197" width="2.2222%" height="15" fill="rgb(226,211,11)" fg:x="27" fg:w="5"/><text x="12.2500%" y="207.50">&lt;..</text></g><g><title>const_hex::decode (5 samples, 2.22%)</title><rect x="12.0000%" y="181" width="2.2222%" height="15" fill="rgb(236,162,54)" fg:x="27" fg:w="5"/><text x="12.2500%" y="191.50">c..</text></g><g><title>const_hex::decode::decode_inner (5 samples, 2.22%)</title><rect x="12.0000%" y="165" width="2.2222%" height="15" fill="rgb(220,229,9)" fg:x="27" fg:w="5"/><text x="12.2500%" y="175.50">c..</text></g><g><title>const_hex::decode_checked (4 samples, 1.78%)</title><rect x="12.4444%" y="149" width="1.7778%" height="15" fill="rgb(250,87,22)" fg:x="28" fg:w="4"/><text x="12.6944%" y="159.50">c..</text></g><g><title>const_hex::arch::x86::decode_unchecked (2 samples, 0.89%)</title><rect x="13.3333%" y="133" width="0.8889%" height="15" fill="rgb(239,43,17)" fg:x="30" fg:w="2"/><text x="13.5833%" y="143.50"></text></g><g><title>const_hex::arch::x86::decode_avx2 (2 samples, 0.89%)</title><rect x="13.3333%" y="117" width="0.8889%" height="15" fill="rgb(231,177,25)" fg:x="30" fg:w="2"/><text x="13.5833%" y="127.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (1 samples, 0.44%)</title><rect x="13.7778%" y="101" width="0.4444%" height="15" fill="rgb(219,179,1)" fg:x="31" fg:w="1"/><text x="14.0278%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (1 samples, 0.44%)</title><rect x="13.7778%" y="85" width="0.4444%" height="15" fill="rgb(238,219,53)" fg:x="31" fg:w="1"/><text x="14.0278%" y="95.50"></text></g><g><title>core::ptr::write_unaligned (1 samples, 0.44%)</title><rect x="13.7778%" y="69" width="0.4444%" height="15" fill="rgb(232,167,36)" fg:x="31" fg:w="1"/><text x="14.0278%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.44%)</title><rect x="13.7778%" y="53" width="0.4444%" height="15" fill="rgb(244,19,51)" fg:x="31" fg:w="1"/><text x="14.0278%" y="63.50"></text></g><g><title>revm_primitives::state::_::&lt;impl serde::de::Deserialize for revm_primitives::state::AccountInfo&gt;::deserialize (15 samples, 6.67%)</title><rect x="12.0000%" y="469" width="6.6667%" height="15" fill="rgb(224,6,22)" fg:x="27" fg:w="15"/><text x="12.2500%" y="479.50">revm_prim..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (15 samples, 6.67%)</title><rect x="12.0000%" y="453" width="6.6667%" height="15" fill="rgb(224,145,5)" fg:x="27" fg:w="15"/><text x="12.2500%" y="463.50">&lt;&amp;mut ser..</text></g><g><title>&lt;revm_primitives::state::_::&lt;impl serde::de::Deserialize for revm_primitives::state::AccountInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (15 samples, 6.67%)</title><rect x="12.0000%" y="437" width="6.6667%" height="15" fill="rgb(234,130,49)" fg:x="27" fg:w="15"/><text x="12.2500%" y="447.50">&lt;revm_pri..</text></g><g><title>serde::de::MapAccess::next_value (15 samples, 6.67%)</title><rect x="12.0000%" y="421" width="6.6667%" height="15" fill="rgb(254,6,2)" fg:x="27" fg:w="15"/><text x="12.2500%" y="431.50">serde::de..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (15 samples, 6.67%)</title><rect x="12.0000%" y="405" width="6.6667%" height="15" fill="rgb(208,96,46)" fg:x="27" fg:w="15"/><text x="12.2500%" y="415.50">&lt;serde_js..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 6.67%)</title><rect x="12.0000%" y="389" width="6.6667%" height="15" fill="rgb(239,3,39)" fg:x="27" fg:w="15"/><text x="12.2500%" y="399.50">&lt;core::ma..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (15 samples, 6.67%)</title><rect x="12.0000%" y="373" width="6.6667%" height="15" fill="rgb(233,210,1)" fg:x="27" fg:w="15"/><text x="12.2500%" y="383.50">serde::de..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_option (15 samples, 6.67%)</title><rect x="12.0000%" y="357" width="6.6667%" height="15" fill="rgb(244,137,37)" fg:x="27" fg:w="15"/><text x="12.2500%" y="367.50">&lt;&amp;mut ser..</text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (15 samples, 6.67%)</title><rect x="12.0000%" y="341" width="6.6667%" height="15" fill="rgb(240,136,2)" fg:x="27" fg:w="15"/><text x="12.2500%" y="351.50">&lt;serde::d..</text></g><g><title>revm_primitives::bytecode::_::&lt;impl serde::de::Deserialize for revm_primitives::bytecode::Bytecode&gt;::deserialize (15 samples, 6.67%)</title><rect x="12.0000%" y="325" width="6.6667%" height="15" fill="rgb(239,18,37)" fg:x="27" fg:w="15"/><text x="12.2500%" y="335.50">revm_prim..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (15 samples, 6.67%)</title><rect x="12.0000%" y="309" width="6.6667%" height="15" fill="rgb(218,185,22)" fg:x="27" fg:w="15"/><text x="12.2500%" y="319.50">&lt;&amp;mut ser..</text></g><g><title>&lt;revm_primitives::bytecode::_::&lt;impl serde::de::Deserialize for revm_primitives::bytecode::Bytecode&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (15 samples, 6.67%)</title><rect x="12.0000%" y="293" width="6.6667%" height="15" fill="rgb(225,218,4)" fg:x="27" fg:w="15"/><text x="12.2500%" y="303.50">&lt;revm_pri..</text></g><g><title>serde::de::MapAccess::next_value (15 samples, 6.67%)</title><rect x="12.0000%" y="277" width="6.6667%" height="15" fill="rgb(230,182,32)" fg:x="27" fg:w="15"/><text x="12.2500%" y="287.50">serde::de..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (15 samples, 6.67%)</title><rect x="12.0000%" y="261" width="6.6667%" height="15" fill="rgb(242,56,43)" fg:x="27" fg:w="15"/><text x="12.2500%" y="271.50">&lt;serde_js..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 6.67%)</title><rect x="12.0000%" y="245" width="6.6667%" height="15" fill="rgb(233,99,24)" fg:x="27" fg:w="15"/><text x="12.2500%" y="255.50">&lt;core::ma..</text></g><g><title>alloy_primitives::bytes_::serde::&lt;impl serde::de::Deserialize for alloy_primitives::bytes_::Bytes&gt;::deserialize (15 samples, 6.67%)</title><rect x="12.0000%" y="229" width="6.6667%" height="15" fill="rgb(234,209,42)" fg:x="27" fg:w="15"/><text x="12.2500%" y="239.50">alloy_pri..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 6.67%)</title><rect x="12.0000%" y="213" width="6.6667%" height="15" fill="rgb(227,7,12)" fg:x="27" fg:w="15"/><text x="12.2500%" y="223.50">&lt;&amp;mut ser..</text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (10 samples, 4.44%)</title><rect x="14.2222%" y="197" width="4.4444%" height="15" fill="rgb(245,203,43)" fg:x="32" fg:w="10"/><text x="14.4722%" y="207.50">&lt;serd..</text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (10 samples, 4.44%)</title><rect x="14.2222%" y="181" width="4.4444%" height="15" fill="rgb(238,205,33)" fg:x="32" fg:w="10"/><text x="14.4722%" y="191.50">serde..</text></g><g><title>&lt;ruint::support::serde::HrVisitor&lt;_,_&gt; as serde::de::Visitor&gt;::visit_str (2 samples, 0.89%)</title><rect x="18.6667%" y="325" width="0.8889%" height="15" fill="rgb(231,56,7)" fg:x="42" fg:w="2"/><text x="18.9167%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (2 samples, 0.89%)</title><rect x="18.6667%" y="309" width="0.8889%" height="15" fill="rgb(244,186,29)" fg:x="42" fg:w="2"/><text x="18.9167%" y="319.50"></text></g><g><title>ruint::string::&lt;impl core::str::traits::FromStr for ruint::Uint&lt;_,_&gt;&gt;::from_str (2 samples, 0.89%)</title><rect x="18.6667%" y="293" width="0.8889%" height="15" fill="rgb(234,111,31)" fg:x="42" fg:w="2"/><text x="18.9167%" y="303.50"></text></g><g><title>ruint::string::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_str_radix (2 samples, 0.89%)</title><rect x="18.6667%" y="277" width="0.8889%" height="15" fill="rgb(241,149,10)" fg:x="42" fg:w="2"/><text x="18.9167%" y="287.50"></text></g><g><title>ruint::base_convert::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_base_be (2 samples, 0.89%)</title><rect x="18.6667%" y="261" width="0.8889%" height="15" fill="rgb(249,206,44)" fg:x="42" fg:w="2"/><text x="18.9167%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="19.1111%" y="245" width="0.4444%" height="15" fill="rgb(251,153,30)" fg:x="43" fg:w="1"/><text x="19.3611%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.44%)</title><rect x="19.1111%" y="229" width="0.4444%" height="15" fill="rgb(239,152,38)" fg:x="43" fg:w="1"/><text x="19.3611%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.44%)</title><rect x="19.1111%" y="213" width="0.4444%" height="15" fill="rgb(249,139,47)" fg:x="43" fg:w="1"/><text x="19.3611%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (1 samples, 0.44%)</title><rect x="19.1111%" y="197" width="0.4444%" height="15" fill="rgb(244,64,35)" fg:x="43" fg:w="1"/><text x="19.3611%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.44%)</title><rect x="19.1111%" y="181" width="0.4444%" height="15" fill="rgb(216,46,15)" fg:x="43" fg:w="1"/><text x="19.3611%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 1.33%)</title><rect x="18.6667%" y="389" width="1.3333%" height="15" fill="rgb(250,74,19)" fg:x="42" fg:w="3"/><text x="18.9167%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 1.33%)</title><rect x="18.6667%" y="373" width="1.3333%" height="15" fill="rgb(249,42,33)" fg:x="42" fg:w="3"/><text x="18.9167%" y="383.50"></text></g><g><title>ruint::support::serde::&lt;impl serde::de::Deserialize for ruint::Uint&lt;_,_&gt;&gt;::deserialize (3 samples, 1.33%)</title><rect x="18.6667%" y="357" width="1.3333%" height="15" fill="rgb(242,149,17)" fg:x="42" fg:w="3"/><text x="18.9167%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 1.33%)</title><rect x="18.6667%" y="341" width="1.3333%" height="15" fill="rgb(244,29,21)" fg:x="42" fg:w="3"/><text x="18.9167%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.44%)</title><rect x="19.5556%" y="325" width="0.4444%" height="15" fill="rgb(220,130,37)" fg:x="44" fg:w="1"/><text x="19.8056%" y="335.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1 samples, 0.44%)</title><rect x="19.5556%" y="309" width="0.4444%" height="15" fill="rgb(211,67,2)" fg:x="44" fg:w="1"/><text x="19.8056%" y="319.50"></text></g><g><title>serde::de::MapAccess::next_entry (4 samples, 1.78%)</title><rect x="18.6667%" y="421" width="1.7778%" height="15" fill="rgb(235,68,52)" fg:x="42" fg:w="4"/><text x="18.9167%" y="431.50">s..</text></g><g><title>serde::de::MapAccess::next_entry_seed (4 samples, 1.78%)</title><rect x="18.6667%" y="405" width="1.7778%" height="15" fill="rgb(246,142,3)" fg:x="42" fg:w="4"/><text x="18.9167%" y="415.50">s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.44%)</title><rect x="20.0000%" y="389" width="0.4444%" height="15" fill="rgb(241,25,7)" fg:x="45" fg:w="1"/><text x="20.2500%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.44%)</title><rect x="20.0000%" y="373" width="0.4444%" height="15" fill="rgb(242,119,39)" fg:x="45" fg:w="1"/><text x="20.2500%" y="383.50"></text></g><g><title>ruint::support::serde::&lt;impl serde::de::Deserialize for ruint::Uint&lt;_,_&gt;&gt;::deserialize (1 samples, 0.44%)</title><rect x="20.0000%" y="357" width="0.4444%" height="15" fill="rgb(241,98,45)" fg:x="45" fg:w="1"/><text x="20.2500%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.44%)</title><rect x="20.0000%" y="341" width="0.4444%" height="15" fill="rgb(254,28,30)" fg:x="45" fg:w="1"/><text x="20.2500%" y="351.50"></text></g><g><title>&lt;ruint::support::serde::HrVisitor&lt;_,_&gt; as serde::de::Visitor&gt;::visit_str (1 samples, 0.44%)</title><rect x="20.0000%" y="325" width="0.4444%" height="15" fill="rgb(241,142,54)" fg:x="45" fg:w="1"/><text x="20.2500%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1 samples, 0.44%)</title><rect x="20.0000%" y="309" width="0.4444%" height="15" fill="rgb(222,85,15)" fg:x="45" fg:w="1"/><text x="20.2500%" y="319.50"></text></g><g><title>ruint::string::&lt;impl core::str::traits::FromStr for ruint::Uint&lt;_,_&gt;&gt;::from_str (1 samples, 0.44%)</title><rect x="20.0000%" y="293" width="0.4444%" height="15" fill="rgb(210,85,47)" fg:x="45" fg:w="1"/><text x="20.2500%" y="303.50"></text></g><g><title>ruint::string::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_str_radix (1 samples, 0.44%)</title><rect x="20.0000%" y="277" width="0.4444%" height="15" fill="rgb(224,206,25)" fg:x="45" fg:w="1"/><text x="20.2500%" y="287.50"></text></g><g><title>ruint::base_convert::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_base_be (1 samples, 0.44%)</title><rect x="20.0000%" y="261" width="0.4444%" height="15" fill="rgb(243,201,19)" fg:x="45" fg:w="1"/><text x="20.2500%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.44%)</title><rect x="20.0000%" y="245" width="0.4444%" height="15" fill="rgb(236,59,4)" fg:x="45" fg:w="1"/><text x="20.2500%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.44%)</title><rect x="20.0000%" y="229" width="0.4444%" height="15" fill="rgb(254,179,45)" fg:x="45" fg:w="1"/><text x="20.2500%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.44%)</title><rect x="20.0000%" y="213" width="0.4444%" height="15" fill="rgb(226,14,10)" fg:x="45" fg:w="1"/><text x="20.2500%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (1 samples, 0.44%)</title><rect x="20.0000%" y="197" width="0.4444%" height="15" fill="rgb(244,27,41)" fg:x="45" fg:w="1"/><text x="20.2500%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.44%)</title><rect x="20.0000%" y="181" width="0.4444%" height="15" fill="rgb(235,35,32)" fg:x="45" fg:w="1"/><text x="20.2500%" y="191.50"></text></g><g><title>ruint::string::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::from_str_radix::{{closure}} (1 samples, 0.44%)</title><rect x="20.0000%" y="165" width="0.4444%" height="15" fill="rgb(218,68,31)" fg:x="45" fg:w="1"/><text x="20.2500%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.44%)</title><rect x="20.4444%" y="309" width="0.4444%" height="15" fill="rgb(207,120,37)" fg:x="46" fg:w="1"/><text x="20.6944%" y="319.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.44%)</title><rect x="20.4444%" y="293" width="0.4444%" height="15" fill="rgb(227,98,0)" fg:x="46" fg:w="1"/><text x="20.6944%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.44%)</title><rect x="20.4444%" y="277" width="0.4444%" height="15" fill="rgb(207,7,3)" fg:x="46" fg:w="1"/><text x="20.6944%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.44%)</title><rect x="20.4444%" y="261" width="0.4444%" height="15" fill="rgb(206,98,19)" fg:x="46" fg:w="1"/><text x="20.6944%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.44%)</title><rect x="20.4444%" y="245" width="0.4444%" height="15" fill="rgb(217,5,26)" fg:x="46" fg:w="1"/><text x="20.6944%" y="255.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.44%)</title><rect x="20.4444%" y="229" width="0.4444%" height="15" fill="rgb(235,190,38)" fg:x="46" fg:w="1"/><text x="20.6944%" y="239.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.44%)</title><rect x="20.4444%" y="213" width="0.4444%" height="15" fill="rgb(247,86,24)" fg:x="46" fg:w="1"/><text x="20.6944%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.44%)</title><rect x="20.4444%" y="197" width="0.4444%" height="15" fill="rgb(205,101,16)" fg:x="46" fg:w="1"/><text x="20.6944%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (1 samples, 0.44%)</title><rect x="20.4444%" y="181" width="0.4444%" height="15" fill="rgb(246,168,33)" fg:x="46" fg:w="1"/><text x="20.6944%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="20.4444%" y="165" width="0.4444%" height="15" fill="rgb(231,114,1)" fg:x="46" fg:w="1"/><text x="20.6944%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="20.4444%" y="149" width="0.4444%" height="15" fill="rgb(207,184,53)" fg:x="46" fg:w="1"/><text x="20.6944%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="20.4444%" y="133" width="0.4444%" height="15" fill="rgb(224,95,51)" fg:x="46" fg:w="1"/><text x="20.6944%" y="143.50"></text></g><g><title>serde::de::MapAccess::next_entry (21 samples, 9.33%)</title><rect x="12.0000%" y="629" width="9.3333%" height="15" fill="rgb(212,188,45)" fg:x="27" fg:w="21"/><text x="12.2500%" y="639.50">serde::de::Ma..</text></g><g><title>serde::de::MapAccess::next_entry_seed (21 samples, 9.33%)</title><rect x="12.0000%" y="613" width="9.3333%" height="15" fill="rgb(223,154,38)" fg:x="27" fg:w="21"/><text x="12.2500%" y="623.50">serde::de::Ma..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (21 samples, 9.33%)</title><rect x="12.0000%" y="597" width="9.3333%" height="15" fill="rgb(251,22,52)" fg:x="27" fg:w="21"/><text x="12.2500%" y="607.50">&lt;serde_json::..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (21 samples, 9.33%)</title><rect x="12.0000%" y="581" width="9.3333%" height="15" fill="rgb(229,209,22)" fg:x="27" fg:w="21"/><text x="12.2500%" y="591.50">&lt;core::marker..</text></g><g><title>revm::db::in_memory_db::_::&lt;impl serde::de::Deserialize for revm::db::in_memory_db::DbAccount&gt;::deserialize (21 samples, 9.33%)</title><rect x="12.0000%" y="565" width="9.3333%" height="15" fill="rgb(234,138,34)" fg:x="27" fg:w="21"/><text x="12.2500%" y="575.50">revm::db::in_..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (21 samples, 9.33%)</title><rect x="12.0000%" y="549" width="9.3333%" height="15" fill="rgb(212,95,11)" fg:x="27" fg:w="21"/><text x="12.2500%" y="559.50">&lt;&amp;mut serde_j..</text></g><g><title>&lt;revm::db::in_memory_db::_::&lt;impl serde::de::Deserialize for revm::db::in_memory_db::DbAccount&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (21 samples, 9.33%)</title><rect x="12.0000%" y="533" width="9.3333%" height="15" fill="rgb(240,179,47)" fg:x="27" fg:w="21"/><text x="12.2500%" y="543.50">&lt;revm::db::in..</text></g><g><title>serde::de::MapAccess::next_value (21 samples, 9.33%)</title><rect x="12.0000%" y="517" width="9.3333%" height="15" fill="rgb(240,163,11)" fg:x="27" fg:w="21"/><text x="12.2500%" y="527.50">serde::de::Ma..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (21 samples, 9.33%)</title><rect x="12.0000%" y="501" width="9.3333%" height="15" fill="rgb(236,37,12)" fg:x="27" fg:w="21"/><text x="12.2500%" y="511.50">&lt;serde_json::..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (21 samples, 9.33%)</title><rect x="12.0000%" y="485" width="9.3333%" height="15" fill="rgb(232,164,16)" fg:x="27" fg:w="21"/><text x="12.2500%" y="495.50">&lt;core::marker..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (6 samples, 2.67%)</title><rect x="18.6667%" y="469" width="2.6667%" height="15" fill="rgb(244,205,15)" fg:x="42" fg:w="6"/><text x="18.9167%" y="479.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (6 samples, 2.67%)</title><rect x="18.6667%" y="453" width="2.6667%" height="15" fill="rgb(223,117,47)" fg:x="42" fg:w="6"/><text x="18.9167%" y="463.50">&lt;&amp;..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize::MapVisitor&lt;K,V,S&gt; as serde::de::Visitor&gt;::visit_map (6 samples, 2.67%)</title><rect x="18.6667%" y="437" width="2.6667%" height="15" fill="rgb(244,107,35)" fg:x="42" fg:w="6"/><text x="18.9167%" y="447.50">&lt;s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.89%)</title><rect x="20.4444%" y="421" width="0.8889%" height="15" fill="rgb(205,140,8)" fg:x="46" fg:w="2"/><text x="20.6944%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.89%)</title><rect x="20.4444%" y="405" width="0.8889%" height="15" fill="rgb(228,84,46)" fg:x="46" fg:w="2"/><text x="20.6944%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2 samples, 0.89%)</title><rect x="20.4444%" y="389" width="0.8889%" height="15" fill="rgb(254,188,9)" fg:x="46" fg:w="2"/><text x="20.6944%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.89%)</title><rect x="20.4444%" y="373" width="0.8889%" height="15" fill="rgb(206,112,54)" fg:x="46" fg:w="2"/><text x="20.6944%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.89%)</title><rect x="20.4444%" y="357" width="0.8889%" height="15" fill="rgb(216,84,49)" fg:x="46" fg:w="2"/><text x="20.6944%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2 samples, 0.89%)</title><rect x="20.4444%" y="341" width="0.8889%" height="15" fill="rgb(214,194,35)" fg:x="46" fg:w="2"/><text x="20.6944%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2 samples, 0.89%)</title><rect x="20.4444%" y="325" width="0.8889%" height="15" fill="rgb(249,28,3)" fg:x="46" fg:w="2"/><text x="20.6944%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.44%)</title><rect x="20.8889%" y="309" width="0.4444%" height="15" fill="rgb(222,56,52)" fg:x="47" fg:w="1"/><text x="21.1389%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.44%)</title><rect x="20.8889%" y="293" width="0.4444%" height="15" fill="rgb(245,217,50)" fg:x="47" fg:w="1"/><text x="21.1389%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.44%)</title><rect x="20.8889%" y="277" width="0.4444%" height="15" fill="rgb(213,201,24)" fg:x="47" fg:w="1"/><text x="21.1389%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.44%)</title><rect x="20.8889%" y="261" width="0.4444%" height="15" fill="rgb(248,116,28)" fg:x="47" fg:w="1"/><text x="21.1389%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (1 samples, 0.44%)</title><rect x="20.8889%" y="245" width="0.4444%" height="15" fill="rgb(219,72,43)" fg:x="47" fg:w="1"/><text x="21.1389%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.44%)</title><rect x="21.3333%" y="597" width="0.4444%" height="15" fill="rgb(209,138,14)" fg:x="48" fg:w="1"/><text x="21.5833%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.44%)</title><rect x="21.3333%" y="581" width="0.4444%" height="15" fill="rgb(222,18,33)" fg:x="48" fg:w="1"/><text x="21.5833%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.44%)</title><rect x="21.3333%" y="565" width="0.4444%" height="15" fill="rgb(213,199,7)" fg:x="48" fg:w="1"/><text x="21.5833%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.44%)</title><rect x="21.3333%" y="549" width="0.4444%" height="15" fill="rgb(250,110,10)" fg:x="48" fg:w="1"/><text x="21.5833%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.44%)</title><rect x="21.3333%" y="533" width="0.4444%" height="15" fill="rgb(248,123,6)" fg:x="48" fg:w="1"/><text x="21.5833%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.44%)</title><rect x="21.3333%" y="517" width="0.4444%" height="15" fill="rgb(206,91,31)" fg:x="48" fg:w="1"/><text x="21.5833%" y="527.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.44%)</title><rect x="21.3333%" y="501" width="0.4444%" height="15" fill="rgb(211,154,13)" fg:x="48" fg:w="1"/><text x="21.5833%" y="511.50"></text></g><g><title>serde_json::de::from_str (23 samples, 10.22%)</title><rect x="12.0000%" y="805" width="10.2222%" height="15" fill="rgb(225,148,7)" fg:x="27" fg:w="23"/><text x="12.2500%" y="815.50">serde_json::de:..</text></g><g><title>serde_json::de::from_trait (23 samples, 10.22%)</title><rect x="12.0000%" y="789" width="10.2222%" height="15" fill="rgb(220,160,43)" fg:x="27" fg:w="23"/><text x="12.2500%" y="799.50">serde_json::de:..</text></g><g><title>revm::db::in_memory_db::_::&lt;impl serde::de::Deserialize for revm::db::in_memory_db::CacheDB&lt;ExtDB&gt;&gt;::deserialize (23 samples, 10.22%)</title><rect x="12.0000%" y="773" width="10.2222%" height="15" fill="rgb(213,52,39)" fg:x="27" fg:w="23"/><text x="12.2500%" y="783.50">revm::db::in_me..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (23 samples, 10.22%)</title><rect x="12.0000%" y="757" width="10.2222%" height="15" fill="rgb(243,137,7)" fg:x="27" fg:w="23"/><text x="12.2500%" y="767.50">&lt;&amp;mut serde_jso..</text></g><g><title>&lt;revm::db::in_memory_db::_::&lt;impl serde::de::Deserialize for revm::db::in_memory_db::CacheDB&lt;ExtDB&gt;&gt;::deserialize::__Visitor&lt;ExtDB&gt; as serde::de::Visitor&gt;::visit_map (23 samples, 10.22%)</title><rect x="12.0000%" y="741" width="10.2222%" height="15" fill="rgb(230,79,13)" fg:x="27" fg:w="23"/><text x="12.2500%" y="751.50">&lt;revm::db::in_m..</text></g><g><title>serde::de::MapAccess::next_value (23 samples, 10.22%)</title><rect x="12.0000%" y="725" width="10.2222%" height="15" fill="rgb(247,105,23)" fg:x="27" fg:w="23"/><text x="12.2500%" y="735.50">serde::de::MapA..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (23 samples, 10.22%)</title><rect x="12.0000%" y="709" width="10.2222%" height="15" fill="rgb(223,179,41)" fg:x="27" fg:w="23"/><text x="12.2500%" y="719.50">&lt;serde_json::de..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (23 samples, 10.22%)</title><rect x="12.0000%" y="693" width="10.2222%" height="15" fill="rgb(218,9,34)" fg:x="27" fg:w="23"/><text x="12.2500%" y="703.50">&lt;core::marker::..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (23 samples, 10.22%)</title><rect x="12.0000%" y="677" width="10.2222%" height="15" fill="rgb(222,106,8)" fg:x="27" fg:w="23"/><text x="12.2500%" y="687.50">serde::de::impl..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (23 samples, 10.22%)</title><rect x="12.0000%" y="661" width="10.2222%" height="15" fill="rgb(211,220,0)" fg:x="27" fg:w="23"/><text x="12.2500%" y="671.50">&lt;&amp;mut serde_jso..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize::MapVisitor&lt;K,V,S&gt; as serde::de::Visitor&gt;::visit_map (23 samples, 10.22%)</title><rect x="12.0000%" y="645" width="10.2222%" height="15" fill="rgb(229,52,16)" fg:x="27" fg:w="23"/><text x="12.2500%" y="655.50">&lt;serde::de::imp..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.89%)</title><rect x="21.3333%" y="629" width="0.8889%" height="15" fill="rgb(212,155,18)" fg:x="48" fg:w="2"/><text x="21.5833%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.89%)</title><rect x="21.3333%" y="613" width="0.8889%" height="15" fill="rgb(242,21,14)" fg:x="48" fg:w="2"/><text x="21.5833%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.44%)</title><rect x="21.7778%" y="597" width="0.4444%" height="15" fill="rgb(222,19,48)" fg:x="49" fg:w="1"/><text x="22.0278%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.44%)</title><rect x="21.7778%" y="581" width="0.4444%" height="15" fill="rgb(232,45,27)" fg:x="49" fg:w="1"/><text x="22.0278%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.44%)</title><rect x="21.7778%" y="565" width="0.4444%" height="15" fill="rgb(249,103,42)" fg:x="49" fg:w="1"/><text x="22.0278%" y="575.50"></text></g><g><title>core::ptr::write (1 samples, 0.44%)</title><rect x="21.7778%" y="549" width="0.4444%" height="15" fill="rgb(246,81,33)" fg:x="49" fg:w="1"/><text x="22.0278%" y="559.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.44%)</title><rect x="21.7778%" y="533" width="0.4444%" height="15" fill="rgb(252,33,42)" fg:x="49" fg:w="1"/><text x="22.0278%" y="543.50"></text></g><g><title>tokio::runtime::coop::budget (32 samples, 14.22%)</title><rect x="8.4444%" y="885" width="14.2222%" height="15" fill="rgb(209,212,41)" fg:x="19" fg:w="32"/><text x="8.6944%" y="895.50">tokio::runtime::coop::..</text></g><g><title>tokio::runtime::coop::with_budget (32 samples, 14.22%)</title><rect x="8.4444%" y="869" width="14.2222%" height="15" fill="rgb(207,154,6)" fg:x="19" fg:w="32"/><text x="8.6944%" y="879.50">tokio::runtime::coop::..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (32 samples, 14.22%)</title><rect x="8.4444%" y="853" width="14.2222%" height="15" fill="rgb(223,64,47)" fg:x="19" fg:w="32"/><text x="8.6944%" y="863.50">tokio::runtime::park::..</text></g><g><title>parallel::main::{{closure}} (32 samples, 14.22%)</title><rect x="8.4444%" y="837" width="14.2222%" height="15" fill="rgb(211,161,38)" fg:x="19" fg:w="32"/><text x="8.6944%" y="847.50">parallel::main::{{clos..</text></g><g><title>parallel::load_db (24 samples, 10.67%)</title><rect x="12.0000%" y="821" width="10.6667%" height="15" fill="rgb(219,138,40)" fg:x="27" fg:w="24"/><text x="12.2500%" y="831.50">parallel::load_db</text></g><g><title>std::fs::read_to_string (1 samples, 0.44%)</title><rect x="22.2222%" y="805" width="0.4444%" height="15" fill="rgb(241,228,46)" fg:x="50" fg:w="1"/><text x="22.4722%" y="815.50"></text></g><g><title>std::fs::read_to_string::inner (1 samples, 0.44%)</title><rect x="22.2222%" y="789" width="0.4444%" height="15" fill="rgb(223,209,38)" fg:x="50" fg:w="1"/><text x="22.4722%" y="799.50"></text></g><g><title>std::io::default_read_to_string (1 samples, 0.44%)</title><rect x="22.2222%" y="773" width="0.4444%" height="15" fill="rgb(236,164,45)" fg:x="50" fg:w="1"/><text x="22.4722%" y="783.50"></text></g><g><title>std::io::append_to_string (1 samples, 0.44%)</title><rect x="22.2222%" y="757" width="0.4444%" height="15" fill="rgb(231,15,5)" fg:x="50" fg:w="1"/><text x="22.4722%" y="767.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.44%)</title><rect x="22.2222%" y="741" width="0.4444%" height="15" fill="rgb(252,35,15)" fg:x="50" fg:w="1"/><text x="22.4722%" y="751.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.44%)</title><rect x="22.2222%" y="725" width="0.4444%" height="15" fill="rgb(248,181,18)" fg:x="50" fg:w="1"/><text x="22.4722%" y="735.50"></text></g><g><title>__libc_start_main_alias_2 (33 samples, 14.67%)</title><rect x="8.4444%" y="1237" width="14.6667%" height="15" fill="rgb(233,39,42)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1247.50">__libc_start_main_alia..</text></g><g><title>__libc_start_call_main (33 samples, 14.67%)</title><rect x="8.4444%" y="1221" width="14.6667%" height="15" fill="rgb(238,110,33)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1231.50">__libc_start_call_main</text></g><g><title>main (33 samples, 14.67%)</title><rect x="8.4444%" y="1205" width="14.6667%" height="15" fill="rgb(233,195,10)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1215.50">main</text></g><g><title>std::rt::lang_start_internal (33 samples, 14.67%)</title><rect x="8.4444%" y="1189" width="14.6667%" height="15" fill="rgb(254,105,3)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1199.50">std::rt::lang_start_in..</text></g><g><title>std::panic::catch_unwind (33 samples, 14.67%)</title><rect x="8.4444%" y="1173" width="14.6667%" height="15" fill="rgb(221,225,9)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1183.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (33 samples, 14.67%)</title><rect x="8.4444%" y="1157" width="14.6667%" height="15" fill="rgb(224,227,45)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1167.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33 samples, 14.67%)</title><rect x="8.4444%" y="1141" width="14.6667%" height="15" fill="rgb(229,198,43)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1151.50">std::panicking::try::d..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (33 samples, 14.67%)</title><rect x="8.4444%" y="1125" width="14.6667%" height="15" fill="rgb(206,209,35)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1135.50">std::rt::lang_start_in..</text></g><g><title>std::panic::catch_unwind (33 samples, 14.67%)</title><rect x="8.4444%" y="1109" width="14.6667%" height="15" fill="rgb(245,195,53)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1119.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (33 samples, 14.67%)</title><rect x="8.4444%" y="1093" width="14.6667%" height="15" fill="rgb(240,92,26)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1103.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33 samples, 14.67%)</title><rect x="8.4444%" y="1077" width="14.6667%" height="15" fill="rgb(207,40,23)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1087.50">std::panicking::try::d..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (33 samples, 14.67%)</title><rect x="8.4444%" y="1061" width="14.6667%" height="15" fill="rgb(223,111,35)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1071.50">core::ops::function::i..</text></g><g><title>std::rt::lang_start::{{closure}} (33 samples, 14.67%)</title><rect x="8.4444%" y="1045" width="14.6667%" height="15" fill="rgb(229,147,28)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1055.50">std::rt::lang_start::{..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (33 samples, 14.67%)</title><rect x="8.4444%" y="1029" width="14.6667%" height="15" fill="rgb(211,29,28)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1039.50">std::sys_common::backt..</text></g><g><title>core::ops::function::FnOnce::call_once (33 samples, 14.67%)</title><rect x="8.4444%" y="1013" width="14.6667%" height="15" fill="rgb(228,72,33)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1023.50">core::ops::function::F..</text></g><g><title>parallel::main (33 samples, 14.67%)</title><rect x="8.4444%" y="997" width="14.6667%" height="15" fill="rgb(205,214,31)" fg:x="19" fg:w="33"/><text x="8.6944%" y="1007.50">parallel::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (33 samples, 14.67%)</title><rect x="8.4444%" y="981" width="14.6667%" height="15" fill="rgb(224,111,15)" fg:x="19" fg:w="33"/><text x="8.6944%" y="991.50">tokio::runtime::runtim..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (33 samples, 14.67%)</title><rect x="8.4444%" y="965" width="14.6667%" height="15" fill="rgb(253,21,26)" fg:x="19" fg:w="33"/><text x="8.6944%" y="975.50">tokio::runtime::schedu..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (33 samples, 14.67%)</title><rect x="8.4444%" y="949" width="14.6667%" height="15" fill="rgb(245,139,43)" fg:x="19" fg:w="33"/><text x="8.6944%" y="959.50">tokio::runtime::contex..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::{{closure}} (33 samples, 14.67%)</title><rect x="8.4444%" y="933" width="14.6667%" height="15" fill="rgb(252,170,7)" fg:x="19" fg:w="33"/><text x="8.6944%" y="943.50">tokio::runtime::schedu..</text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (33 samples, 14.67%)</title><rect x="8.4444%" y="917" width="14.6667%" height="15" fill="rgb(231,118,14)" fg:x="19" fg:w="33"/><text x="8.6944%" y="927.50">tokio::runtime::contex..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (33 samples, 14.67%)</title><rect x="8.4444%" y="901" width="14.6667%" height="15" fill="rgb(238,83,0)" fg:x="19" fg:w="33"/><text x="8.6944%" y="911.50">tokio::runtime::park::..</text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.44%)</title><rect x="22.6667%" y="885" width="0.4444%" height="15" fill="rgb(221,39,39)" fg:x="51" fg:w="1"/><text x="22.9167%" y="895.50"></text></g><g><title>std::sync::condvar::Condvar::wait (1 samples, 0.44%)</title><rect x="22.6667%" y="869" width="0.4444%" height="15" fill="rgb(222,119,46)" fg:x="51" fg:w="1"/><text x="22.9167%" y="879.50"></text></g><g><title>std::sys::pal::unix::locks::futex_condvar::Condvar::wait (1 samples, 0.44%)</title><rect x="22.6667%" y="853" width="0.4444%" height="15" fill="rgb(222,165,49)" fg:x="51" fg:w="1"/><text x="22.9167%" y="863.50"></text></g><g><title>std::sys::pal::unix::locks::futex_condvar::Condvar::wait_optional_timeout (1 samples, 0.44%)</title><rect x="22.6667%" y="837" width="0.4444%" height="15" fill="rgb(219,113,52)" fg:x="51" fg:w="1"/><text x="22.9167%" y="847.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (1 samples, 0.44%)</title><rect x="22.6667%" y="821" width="0.4444%" height="15" fill="rgb(214,7,15)" fg:x="51" fg:w="1"/><text x="22.9167%" y="831.50"></text></g><g><title>_start (34 samples, 15.11%)</title><rect x="8.4444%" y="1253" width="15.1111%" height="15" fill="rgb(235,32,4)" fg:x="19" fg:w="34"/><text x="8.6944%" y="1263.50">_start</text></g><g><title>_dl_start (1 samples, 0.44%)</title><rect x="23.1111%" y="1237" width="0.4444%" height="15" fill="rgb(238,90,54)" fg:x="52" fg:w="1"/><text x="23.3611%" y="1247.50"></text></g><g><title>_dl_start_final (1 samples, 0.44%)</title><rect x="23.1111%" y="1221" width="0.4444%" height="15" fill="rgb(213,208,19)" fg:x="52" fg:w="1"/><text x="23.3611%" y="1231.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.44%)</title><rect x="23.1111%" y="1205" width="0.4444%" height="15" fill="rgb(233,156,4)" fg:x="52" fg:w="1"/><text x="23.3611%" y="1215.50"></text></g><g><title>_dl_x86_init_cpu_features (1 samples, 0.44%)</title><rect x="23.1111%" y="1189" width="0.4444%" height="15" fill="rgb(207,194,5)" fg:x="52" fg:w="1"/><text x="23.3611%" y="1199.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.44%)</title><rect x="23.1111%" y="1173" width="0.4444%" height="15" fill="rgb(206,111,30)" fg:x="52" fg:w="1"/><text x="23.3611%" y="1183.50"></text></g><g><title>handle_intel.constprop.0 (1 samples, 0.44%)</title><rect x="23.1111%" y="1157" width="0.4444%" height="15" fill="rgb(243,70,54)" fg:x="52" fg:w="1"/><text x="23.3611%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="23.5556%" y="1221" width="0.4444%" height="15" fill="rgb(242,28,8)" fg:x="53" fg:w="1"/><text x="23.8056%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.44%)</title><rect x="23.5556%" y="1205" width="0.4444%" height="15" fill="rgb(219,106,18)" fg:x="53" fg:w="1"/><text x="23.8056%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.44%)</title><rect x="23.5556%" y="1189" width="0.4444%" height="15" fill="rgb(244,222,10)" fg:x="53" fg:w="1"/><text x="23.8056%" y="1199.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.44%)</title><rect x="23.5556%" y="1173" width="0.4444%" height="15" fill="rgb(236,179,52)" fg:x="53" fg:w="1"/><text x="23.8056%" y="1183.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.44%)</title><rect x="23.5556%" y="1157" width="0.4444%" height="15" fill="rgb(213,23,39)" fg:x="53" fg:w="1"/><text x="23.8056%" y="1167.50"></text></g><g><title>_int_malloc (1 samples, 0.44%)</title><rect x="23.5556%" y="1141" width="0.4444%" height="15" fill="rgb(238,48,10)" fg:x="53" fg:w="1"/><text x="23.8056%" y="1151.50"></text></g><g><title>sysmalloc (1 samples, 0.44%)</title><rect x="23.5556%" y="1125" width="0.4444%" height="15" fill="rgb(251,196,23)" fg:x="53" fg:w="1"/><text x="23.8056%" y="1135.50"></text></g><g><title>__GI___mprotect (1 samples, 0.44%)</title><rect x="23.5556%" y="1109" width="0.4444%" height="15" fill="rgb(250,152,24)" fg:x="53" fg:w="1"/><text x="23.8056%" y="1119.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.44%)</title><rect x="24.0000%" y="1189" width="0.4444%" height="15" fill="rgb(209,150,17)" fg:x="54" fg:w="1"/><text x="24.2500%" y="1199.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.44%)</title><rect x="24.0000%" y="1173" width="0.4444%" height="15" fill="rgb(234,202,34)" fg:x="54" fg:w="1"/><text x="24.2500%" y="1183.50"></text></g><g><title>malloc_consolidate (1 samples, 0.44%)</title><rect x="24.4444%" y="917" width="0.4444%" height="15" fill="rgb(253,148,53)" fg:x="55" fg:w="1"/><text x="24.6944%" y="927.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 1.33%)</title><rect x="24.0000%" y="1205" width="1.3333%" height="15" fill="rgb(218,129,16)" fg:x="54" fg:w="3"/><text x="24.2500%" y="1215.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.89%)</title><rect x="24.4444%" y="1189" width="0.8889%" height="15" fill="rgb(216,85,19)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1199.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.89%)</title><rect x="24.4444%" y="1173" width="0.8889%" height="15" fill="rgb(235,228,7)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1183.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (2 samples, 0.89%)</title><rect x="24.4444%" y="1157" width="0.8889%" height="15" fill="rgb(245,175,0)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1167.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (2 samples, 0.89%)</title><rect x="24.4444%" y="1141" width="0.8889%" height="15" fill="rgb(208,168,36)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1151.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (2 samples, 0.89%)</title><rect x="24.4444%" y="1125" width="0.8889%" height="15" fill="rgb(246,171,24)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1135.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.89%)</title><rect x="24.4444%" y="1109" width="0.8889%" height="15" fill="rgb(215,142,24)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1119.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.89%)</title><rect x="24.4444%" y="1093" width="0.8889%" height="15" fill="rgb(250,187,7)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.89%)</title><rect x="24.4444%" y="1077" width="0.8889%" height="15" fill="rgb(228,66,33)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1087.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.89%)</title><rect x="24.4444%" y="1061" width="0.8889%" height="15" fill="rgb(234,215,21)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1071.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.89%)</title><rect x="24.4444%" y="1045" width="0.8889%" height="15" fill="rgb(222,191,20)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1055.50"></text></g><g><title>__rdl_alloc (2 samples, 0.89%)</title><rect x="24.4444%" y="1029" width="0.8889%" height="15" fill="rgb(245,79,54)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1039.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.89%)</title><rect x="24.4444%" y="1013" width="0.8889%" height="15" fill="rgb(240,10,37)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1023.50"></text></g><g><title>std::sys::pal::unix::alloc::aligned_malloc (2 samples, 0.89%)</title><rect x="24.4444%" y="997" width="0.8889%" height="15" fill="rgb(214,192,32)" fg:x="55" fg:w="2"/><text x="24.6944%" y="1007.50"></text></g><g><title>__posix_memalign (2 samples, 0.89%)</title><rect x="24.4444%" y="981" width="0.8889%" height="15" fill="rgb(209,36,54)" fg:x="55" fg:w="2"/><text x="24.6944%" y="991.50"></text></g><g><title>_mid_memalign.constprop.0 (2 samples, 0.89%)</title><rect x="24.4444%" y="965" width="0.8889%" height="15" fill="rgb(220,10,11)" fg:x="55" fg:w="2"/><text x="24.6944%" y="975.50"></text></g><g><title>_int_memalign (2 samples, 0.89%)</title><rect x="24.4444%" y="949" width="0.8889%" height="15" fill="rgb(221,106,17)" fg:x="55" fg:w="2"/><text x="24.6944%" y="959.50"></text></g><g><title>_int_malloc (2 samples, 0.89%)</title><rect x="24.4444%" y="933" width="0.8889%" height="15" fill="rgb(251,142,44)" fg:x="55" fg:w="2"/><text x="24.6944%" y="943.50"></text></g><g><title>sysmalloc (1 samples, 0.44%)</title><rect x="24.8889%" y="917" width="0.4444%" height="15" fill="rgb(238,13,15)" fg:x="56" fg:w="1"/><text x="25.1389%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::one::RefMut&lt;blockstm::view::ReadKey,blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="25.3333%" y="1205" width="0.4444%" height="15" fill="rgb(208,107,27)" fg:x="57" fg:w="1"/><text x="25.5833%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;blockstm::view::ReadKey,dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="25.3333%" y="1189" width="0.4444%" height="15" fill="rgb(205,136,37)" fg:x="57" fg:w="1"/><text x="25.5833%" y="1199.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="25.3333%" y="1173" width="0.4444%" height="15" fill="rgb(250,205,27)" fg:x="57" fg:w="1"/><text x="25.5833%" y="1183.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (1 samples, 0.44%)</title><rect x="25.3333%" y="1157" width="0.4444%" height="15" fill="rgb(210,80,43)" fg:x="57" fg:w="1"/><text x="25.5833%" y="1167.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_yield_write_shard (3 samples, 1.33%)</title><rect x="25.7778%" y="1173" width="1.3333%" height="15" fill="rgb(247,160,36)" fg:x="58" fg:w="3"/><text x="26.0278%" y="1183.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (3 samples, 1.33%)</title><rect x="25.7778%" y="1157" width="1.3333%" height="15" fill="rgb(234,13,49)" fg:x="58" fg:w="3"/><text x="26.0278%" y="1167.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (3 samples, 1.33%)</title><rect x="25.7778%" y="1141" width="1.3333%" height="15" fill="rgb(234,122,0)" fg:x="58" fg:w="3"/><text x="26.0278%" y="1151.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::execute::{{closure}} (9 samples, 4.00%)</title><rect x="23.5556%" y="1237" width="4.0000%" height="15" fill="rgb(207,146,38)" fg:x="53" fg:w="9"/><text x="23.8056%" y="1247.50">bloc..</text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedData&lt;K,V&gt;::write (8 samples, 3.56%)</title><rect x="24.0000%" y="1221" width="3.5556%" height="15" fill="rgb(207,177,25)" fg:x="54" fg:w="8"/><text x="24.2500%" y="1231.50">bloc..</text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::entry (4 samples, 1.78%)</title><rect x="25.7778%" y="1205" width="1.7778%" height="15" fill="rgb(211,178,42)" fg:x="58" fg:w="4"/><text x="26.0278%" y="1215.50">d..</text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_entry (4 samples, 1.78%)</title><rect x="25.7778%" y="1189" width="1.7778%" height="15" fill="rgb(230,69,54)" fg:x="58" fg:w="4"/><text x="26.0278%" y="1199.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (1 samples, 0.44%)</title><rect x="27.1111%" y="1173" width="0.4444%" height="15" fill="rgb(214,135,41)" fg:x="61" fg:w="1"/><text x="27.3611%" y="1183.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.44%)</title><rect x="27.1111%" y="1157" width="0.4444%" height="15" fill="rgb(237,67,25)" fg:x="61" fg:w="1"/><text x="27.3611%" y="1167.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1 samples, 0.44%)</title><rect x="27.1111%" y="1141" width="0.4444%" height="15" fill="rgb(222,189,50)" fg:x="61" fg:w="1"/><text x="27.3611%" y="1151.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1 samples, 0.44%)</title><rect x="27.1111%" y="1125" width="0.4444%" height="15" fill="rgb(245,148,34)" fg:x="61" fg:w="1"/><text x="27.3611%" y="1135.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (1 samples, 0.44%)</title><rect x="27.1111%" y="1109" width="0.4444%" height="15" fill="rgb(222,29,6)" fg:x="61" fg:w="1"/><text x="27.3611%" y="1119.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.44%)</title><rect x="27.1111%" y="1093" width="0.4444%" height="15" fill="rgb(221,189,43)" fg:x="61" fg:w="1"/><text x="27.3611%" y="1103.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.44%)</title><rect x="27.5556%" y="1221" width="0.4444%" height="15" fill="rgb(207,36,27)" fg:x="62" fg:w="1"/><text x="27.8056%" y="1231.50"></text></g><g><title>__free (1 samples, 0.44%)</title><rect x="28.0000%" y="1205" width="0.4444%" height="15" fill="rgb(217,90,24)" fg:x="63" fg:w="1"/><text x="28.2500%" y="1215.50"></text></g><g><title>_int_free (1 samples, 0.44%)</title><rect x="28.0000%" y="1189" width="0.4444%" height="15" fill="rgb(224,66,35)" fg:x="63" fg:w="1"/><text x="28.2500%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::evm::Evm&lt;(),blockstm::view::InstrumentedDB&lt;&amp;revm::db::in_memory_db::CacheDB&lt;blockstm::example_utils::example_utils::PlaceholderDB&gt;&gt;&gt;,(),blockstm::view::InstrumentedDB&lt;&amp;revm::db::in_memory_db::CacheDB&lt;blockstm::example_utils::example_utils::PlaceholderDB&gt;&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="28.0000%" y="1221" width="0.8889%" height="15" fill="rgb(221,13,50)" fg:x="63" fg:w="2"/><text x="28.2500%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::validation::ValidationHandler&lt;(),blockstm::view::InstrumentedDB&lt;&amp;revm::db::in_memory_db::CacheDB&lt;blockstm::example_utils::example_utils::PlaceholderDB&gt;&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="28.4444%" y="1205" width="0.4444%" height="15" fill="rgb(236,68,49)" fg:x="64" fg:w="1"/><text x="28.6944%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),blockstm::view::InstrumentedDB&lt;&amp;revm::db::in_memory_db::CacheDB&lt;blockstm::example_utils::example_utils::PlaceholderDB&gt;&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="28.8889%" y="1221" width="0.4444%" height="15" fill="rgb(229,146,28)" fg:x="65" fg:w="1"/><text x="29.1389%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn core::ops::function::Fn&lt;(&amp;mut revm::context::Context&lt;(),blockstm::view::InstrumentedDB&lt;&amp;revm::db::in_memory_db::CacheDB&lt;blockstm::example_utils::example_utils::PlaceholderDB&gt;&gt;&gt;,&amp;mut revm::frame::Frame,&amp;mut revm_interpreter::interpreter::shared_memory::SharedMemory,revm_interpreter::call_outcome::CallOutcome)&gt;+Output = core::result::Result&lt;(),revm_primitives::result::EVMError&lt;core::convert::Infallible&gt;&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="28.8889%" y="1205" width="0.4444%" height="15" fill="rgb(225,31,38)" fg:x="65" fg:w="1"/><text x="29.1389%" y="1215.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="28.8889%" y="1189" width="0.4444%" height="15" fill="rgb(250,208,3)" fg:x="65" fg:w="1"/><text x="29.1389%" y="1199.50"></text></g><g><title>__free (1 samples, 0.44%)</title><rect x="28.8889%" y="1173" width="0.4444%" height="15" fill="rgb(246,54,23)" fg:x="65" fg:w="1"/><text x="29.1389%" y="1183.50"></text></g><g><title>_int_free (1 samples, 0.44%)</title><rect x="28.8889%" y="1157" width="0.4444%" height="15" fill="rgb(243,76,11)" fg:x="65" fg:w="1"/><text x="29.1389%" y="1167.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::new (1 samples, 0.44%)</title><rect x="29.3333%" y="1157" width="0.4444%" height="15" fill="rgb(245,21,50)" fg:x="66" fg:w="1"/><text x="29.5833%" y="1167.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.44%)</title><rect x="29.3333%" y="1141" width="0.4444%" height="15" fill="rgb(228,9,43)" fg:x="66" fg:w="1"/><text x="29.5833%" y="1151.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.44%)</title><rect x="29.3333%" y="1125" width="0.4444%" height="15" fill="rgb(208,100,47)" fg:x="66" fg:w="1"/><text x="29.5833%" y="1135.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.44%)</title><rect x="29.3333%" y="1109" width="0.4444%" height="15" fill="rgb(232,26,8)" fg:x="66" fg:w="1"/><text x="29.5833%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="29.3333%" y="1093" width="0.4444%" height="15" fill="rgb(216,166,38)" fg:x="66" fg:w="1"/><text x="29.5833%" y="1103.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="29.3333%" y="1077" width="0.4444%" height="15" fill="rgb(251,202,51)" fg:x="66" fg:w="1"/><text x="29.5833%" y="1087.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="29.3333%" y="1061" width="0.4444%" height="15" fill="rgb(254,216,34)" fg:x="66" fg:w="1"/><text x="29.5833%" y="1071.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.44%)</title><rect x="29.3333%" y="1045" width="0.4444%" height="15" fill="rgb(251,32,27)" fg:x="66" fg:w="1"/><text x="29.5833%" y="1055.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::handler (3 samples, 1.33%)</title><rect x="29.3333%" y="1221" width="1.3333%" height="15" fill="rgb(208,127,28)" fg:x="66" fg:w="3"/><text x="29.5833%" y="1231.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::new (3 samples, 1.33%)</title><rect x="29.3333%" y="1205" width="1.3333%" height="15" fill="rgb(224,137,22)" fg:x="66" fg:w="3"/><text x="29.5833%" y="1215.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet_with_spec (3 samples, 1.33%)</title><rect x="29.3333%" y="1189" width="1.3333%" height="15" fill="rgb(254,70,32)" fg:x="66" fg:w="3"/><text x="29.5833%" y="1199.50"></text></g><g><title>revm::handler::Handler&lt;revm::evm::Evm&lt;EXT,DB&gt;,EXT,DB&gt;::mainnet (3 samples, 1.33%)</title><rect x="29.3333%" y="1173" width="1.3333%" height="15" fill="rgb(229,75,37)" fg:x="66" fg:w="3"/><text x="29.5833%" y="1183.50"></text></g><g><title>revm::handler::handle_types::post_execution::PostExecutionHandler&lt;EXT,DB&gt;::new (2 samples, 0.89%)</title><rect x="29.7778%" y="1157" width="0.8889%" height="15" fill="rgb(252,64,23)" fg:x="67" fg:w="2"/><text x="30.0278%" y="1167.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.89%)</title><rect x="29.7778%" y="1141" width="0.8889%" height="15" fill="rgb(232,162,48)" fg:x="67" fg:w="2"/><text x="30.0278%" y="1151.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.89%)</title><rect x="29.7778%" y="1125" width="0.8889%" height="15" fill="rgb(246,160,12)" fg:x="67" fg:w="2"/><text x="30.0278%" y="1135.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.89%)</title><rect x="29.7778%" y="1109" width="0.8889%" height="15" fill="rgb(247,166,0)" fg:x="67" fg:w="2"/><text x="30.0278%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.89%)</title><rect x="29.7778%" y="1093" width="0.8889%" height="15" fill="rgb(249,219,21)" fg:x="67" fg:w="2"/><text x="30.0278%" y="1103.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.89%)</title><rect x="29.7778%" y="1077" width="0.8889%" height="15" fill="rgb(205,209,3)" fg:x="67" fg:w="2"/><text x="30.0278%" y="1087.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.89%)</title><rect x="29.7778%" y="1061" width="0.8889%" height="15" fill="rgb(243,44,1)" fg:x="67" fg:w="2"/><text x="30.0278%" y="1071.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.89%)</title><rect x="29.7778%" y="1045" width="0.8889%" height="15" fill="rgb(206,159,16)" fg:x="67" fg:w="2"/><text x="30.0278%" y="1055.50"></text></g><g><title>_int_malloc (2 samples, 0.89%)</title><rect x="29.7778%" y="1029" width="0.8889%" height="15" fill="rgb(244,77,30)" fg:x="67" fg:w="2"/><text x="30.0278%" y="1039.50"></text></g><g><title>revm::builder::EvmBuilder&lt;revm::builder::HandlerStage,EXT,DB&gt;::reset_handler_with_db (8 samples, 3.56%)</title><rect x="27.5556%" y="1237" width="3.5556%" height="15" fill="rgb(218,69,12)" fg:x="62" fg:w="8"/><text x="27.8056%" y="1247.50">revm..</text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::with_db (1 samples, 0.44%)</title><rect x="30.6667%" y="1221" width="0.4444%" height="15" fill="rgb(212,87,7)" fg:x="69" fg:w="1"/><text x="30.9167%" y="1231.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::with_db (1 samples, 0.44%)</title><rect x="30.6667%" y="1205" width="0.4444%" height="15" fill="rgb(245,114,25)" fg:x="69" fg:w="1"/><text x="30.9167%" y="1215.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.44%)</title><rect x="30.6667%" y="1189" width="0.4444%" height="15" fill="rgb(210,61,42)" fg:x="69" fg:w="1"/><text x="30.9167%" y="1199.50"></text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::call_precompile (1 samples, 0.44%)</title><rect x="31.1111%" y="1109" width="0.4444%" height="15" fill="rgb(211,52,33)" fg:x="70" fg:w="1"/><text x="31.3611%" y="1119.50"></text></g><g><title>revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt;::call (1 samples, 0.44%)</title><rect x="31.1111%" y="1093" width="0.4444%" height="15" fill="rgb(234,58,33)" fg:x="70" fg:w="1"/><text x="31.3611%" y="1103.50"></text></g><g><title>revm_primitives::precompile::Precompile::call (1 samples, 0.44%)</title><rect x="31.1111%" y="1077" width="0.4444%" height="15" fill="rgb(220,115,36)" fg:x="70" fg:w="1"/><text x="31.3611%" y="1087.50"></text></g><g><title>revm_precompile::secp256k1::ec_recover_run (1 samples, 0.44%)</title><rect x="31.1111%" y="1061" width="0.4444%" height="15" fill="rgb(243,153,54)" fg:x="70" fg:w="1"/><text x="31.3611%" y="1071.50"></text></g><g><title>revm_precompile::secp256k1::secp256k1::ecrecover (1 samples, 0.44%)</title><rect x="31.1111%" y="1045" width="0.4444%" height="15" fill="rgb(251,47,18)" fg:x="70" fg:w="1"/><text x="31.3611%" y="1055.50"></text></g><g><title>secp256k1::ecdsa::recovery::&lt;impl secp256k1::Secp256k1&lt;C&gt;&gt;::recover_ecdsa (1 samples, 0.44%)</title><rect x="31.1111%" y="1029" width="0.4444%" height="15" fill="rgb(242,102,42)" fg:x="70" fg:w="1"/><text x="31.3611%" y="1039.50"></text></g><g><title>rustsecp256k1_v0_9_2_ecdsa_recover (1 samples, 0.44%)</title><rect x="31.1111%" y="1013" width="0.4444%" height="15" fill="rgb(234,31,38)" fg:x="70" fg:w="1"/><text x="31.3611%" y="1023.50"></text></g><g><title>rustsecp256k1_v0_9_2_ecdsa_sig_recover (1 samples, 0.44%)</title><rect x="31.1111%" y="997" width="0.4444%" height="15" fill="rgb(221,117,51)" fg:x="70" fg:w="1"/><text x="31.3611%" y="1007.50"></text></g><g><title>rustsecp256k1_v0_9_2_ecmult (1 samples, 0.44%)</title><rect x="31.1111%" y="981" width="0.4444%" height="15" fill="rgb(212,20,18)" fg:x="70" fg:w="1"/><text x="31.3611%" y="991.50"></text></g><g><title>rustsecp256k1_v0_9_2_ecmult_strauss_wnaf (1 samples, 0.44%)</title><rect x="31.1111%" y="965" width="0.4444%" height="15" fill="rgb(245,133,36)" fg:x="70" fg:w="1"/><text x="31.3611%" y="975.50"></text></g><g><title>rustsecp256k1_v0_9_2_ecmult_table_get_ge_storage (1 samples, 0.44%)</title><rect x="31.1111%" y="949" width="0.4444%" height="15" fill="rgb(212,6,19)" fg:x="70" fg:w="1"/><text x="31.3611%" y="959.50"></text></g><g><title>rustsecp256k1_v0_9_2_ecmult_table_get_ge_storage (1 samples, 0.44%)</title><rect x="31.1111%" y="933" width="0.4444%" height="15" fill="rgb(218,1,36)" fg:x="70" fg:w="1"/><text x="31.3611%" y="943.50"></text></g><g><title>rustsecp256k1_v0_9_2_ge_from_storage (1 samples, 0.44%)</title><rect x="31.1111%" y="917" width="0.4444%" height="15" fill="rgb(246,84,54)" fg:x="70" fg:w="1"/><text x="31.3611%" y="927.50"></text></g><g><title>rustsecp256k1_v0_9_2_fe_impl_from_storage (1 samples, 0.44%)</title><rect x="31.1111%" y="901" width="0.4444%" height="15" fill="rgb(242,110,6)" fg:x="70" fg:w="1"/><text x="31.3611%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.44%)</title><rect x="44.0000%" y="1045" width="0.4444%" height="15" fill="rgb(214,47,5)" fg:x="99" fg:w="1"/><text x="44.2500%" y="1055.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.44%)</title><rect x="44.0000%" y="1029" width="0.4444%" height="15" fill="rgb(218,159,25)" fg:x="99" fg:w="1"/><text x="44.2500%" y="1039.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.44%)</title><rect x="44.0000%" y="1013" width="0.4444%" height="15" fill="rgb(215,211,28)" fg:x="99" fg:w="1"/><text x="44.2500%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="44.0000%" y="997" width="0.4444%" height="15" fill="rgb(238,59,32)" fg:x="99" fg:w="1"/><text x="44.2500%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="44.0000%" y="981" width="0.4444%" height="15" fill="rgb(226,82,3)" fg:x="99" fg:w="1"/><text x="44.2500%" y="991.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="44.0000%" y="965" width="0.4444%" height="15" fill="rgb(240,164,32)" fg:x="99" fg:w="1"/><text x="44.2500%" y="975.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.44%)</title><rect x="44.0000%" y="949" width="0.4444%" height="15" fill="rgb(232,46,7)" fg:x="99" fg:w="1"/><text x="44.2500%" y="959.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (1 samples, 0.44%)</title><rect x="44.4444%" y="1013" width="0.4444%" height="15" fill="rgb(229,129,53)" fg:x="100" fg:w="1"/><text x="44.6944%" y="1023.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (1 samples, 0.44%)</title><rect x="44.4444%" y="997" width="0.4444%" height="15" fill="rgb(234,188,29)" fg:x="100" fg:w="1"/><text x="44.6944%" y="1007.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (1 samples, 0.44%)</title><rect x="44.4444%" y="981" width="0.4444%" height="15" fill="rgb(246,141,4)" fg:x="100" fg:w="1"/><text x="44.6944%" y="991.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::set_unchecked (2 samples, 0.89%)</title><rect x="44.4444%" y="1045" width="0.8889%" height="15" fill="rgb(229,23,39)" fg:x="100" fg:w="2"/><text x="44.6944%" y="1055.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace_unchecked (2 samples, 0.89%)</title><rect x="44.4444%" y="1029" width="0.8889%" height="15" fill="rgb(206,12,3)" fg:x="100" fg:w="2"/><text x="44.6944%" y="1039.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (1 samples, 0.44%)</title><rect x="44.8889%" y="1013" width="0.4444%" height="15" fill="rgb(252,226,20)" fg:x="101" fg:w="1"/><text x="45.1389%" y="1023.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (1 samples, 0.44%)</title><rect x="44.8889%" y="997" width="0.4444%" height="15" fill="rgb(216,123,35)" fg:x="101" fg:w="1"/><text x="45.1389%" y="1007.50"></text></g><g><title>bitvec::access::BitAccess::write_bit (1 samples, 0.44%)</title><rect x="44.8889%" y="981" width="0.4444%" height="15" fill="rgb(212,68,40)" fg:x="101" fg:w="1"/><text x="45.1389%" y="991.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::repeat (1 samples, 0.44%)</title><rect x="45.3333%" y="1045" width="0.4444%" height="15" fill="rgb(254,125,32)" fg:x="102" fg:w="1"/><text x="45.5833%" y="1055.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill_with (1 samples, 0.44%)</title><rect x="45.3333%" y="1029" width="0.4444%" height="15" fill="rgb(253,97,22)" fg:x="102" fg:w="1"/><text x="45.5833%" y="1039.50"></text></g><g><title>__memset_evex_unaligned_erms (1 samples, 0.44%)</title><rect x="45.3333%" y="1013" width="0.4444%" height="15" fill="rgb(241,101,14)" fg:x="102" fg:w="1"/><text x="45.5833%" y="1023.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (7 samples, 3.11%)</title><rect x="45.7778%" y="1045" width="3.1111%" height="15" fill="rgb(238,103,29)" fg:x="103" fg:w="7"/><text x="46.0278%" y="1055.50">cor..</text></g><g><title>revm_interpreter::interpreter::analysis::analyze (41 samples, 18.22%)</title><rect x="31.5556%" y="1061" width="18.2222%" height="15" fill="rgb(233,195,47)" fg:x="71" fg:w="41"/><text x="31.8056%" y="1071.50">revm_interpreter::interprete..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (2 samples, 0.89%)</title><rect x="48.8889%" y="1045" width="0.8889%" height="15" fill="rgb(246,218,30)" fg:x="110" fg:w="2"/><text x="49.1389%" y="1055.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.44%)</title><rect x="49.7778%" y="1045" width="0.4444%" height="15" fill="rgb(219,145,47)" fg:x="112" fg:w="1"/><text x="50.0278%" y="1055.50"></text></g><g><title>&lt;alloy_primitives::bytes_::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (1 samples, 0.44%)</title><rect x="49.7778%" y="1029" width="0.4444%" height="15" fill="rgb(243,12,26)" fg:x="112" fg:w="1"/><text x="50.0278%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.89%)</title><rect x="50.2222%" y="1045" width="0.8889%" height="15" fill="rgb(214,87,16)" fg:x="113" fg:w="2"/><text x="50.4722%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.89%)</title><rect x="50.2222%" y="1029" width="0.8889%" height="15" fill="rgb(208,99,42)" fg:x="113" fg:w="2"/><text x="50.4722%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.89%)</title><rect x="50.2222%" y="1013" width="0.8889%" height="15" fill="rgb(253,99,2)" fg:x="113" fg:w="2"/><text x="50.4722%" y="1023.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.89%)</title><rect x="50.2222%" y="997" width="0.8889%" height="15" fill="rgb(220,168,23)" fg:x="113" fg:w="2"/><text x="50.4722%" y="1007.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.89%)</title><rect x="50.2222%" y="981" width="0.8889%" height="15" fill="rgb(242,38,24)" fg:x="113" fg:w="2"/><text x="50.4722%" y="991.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (47 samples, 20.89%)</title><rect x="31.1111%" y="1173" width="20.8889%" height="15" fill="rgb(225,182,9)" fg:x="70" fg:w="47"/><text x="31.3611%" y="1183.50">revm::handler::handle_types::exec..</text></g><g><title>core::ops::function::Fn::call (47 samples, 20.89%)</title><rect x="31.1111%" y="1157" width="20.8889%" height="15" fill="rgb(243,178,37)" fg:x="70" fg:w="47"/><text x="31.3611%" y="1167.50">core::ops::function::Fn::call</text></g><g><title>revm::handler::mainnet::execution::call (47 samples, 20.89%)</title><rect x="31.1111%" y="1141" width="20.8889%" height="15" fill="rgb(232,139,19)" fg:x="70" fg:w="47"/><text x="31.3611%" y="1151.50">revm::handler::mainnet::execution..</text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (47 samples, 20.89%)</title><rect x="31.1111%" y="1125" width="20.8889%" height="15" fill="rgb(225,201,24)" fg:x="70" fg:w="47"/><text x="31.3611%" y="1135.50">revm::context::evm_context::EvmCo..</text></g><g><title>revm_interpreter::interpreter::contract::Contract::new_with_context (46 samples, 20.44%)</title><rect x="31.5556%" y="1109" width="20.4444%" height="15" fill="rgb(221,47,46)" fg:x="71" fg:w="46"/><text x="31.8056%" y="1119.50">revm_interpreter::interpreter::c..</text></g><g><title>revm_interpreter::interpreter::contract::Contract::new (46 samples, 20.44%)</title><rect x="31.5556%" y="1093" width="20.4444%" height="15" fill="rgb(249,23,13)" fg:x="71" fg:w="46"/><text x="31.8056%" y="1103.50">revm_interpreter::interpreter::c..</text></g><g><title>revm_interpreter::interpreter::analysis::to_analysed (46 samples, 20.44%)</title><rect x="31.5556%" y="1077" width="20.4444%" height="15" fill="rgb(219,9,5)" fg:x="71" fg:w="46"/><text x="31.8056%" y="1087.50">revm_interpreter::interpreter::a..</text></g><g><title>revm_primitives::bytecode::Bytecode::to_checked (5 samples, 2.22%)</title><rect x="49.7778%" y="1061" width="2.2222%" height="15" fill="rgb(254,171,16)" fg:x="112" fg:w="5"/><text x="50.0278%" y="1071.50">r..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.89%)</title><rect x="51.1111%" y="1045" width="0.8889%" height="15" fill="rgb(230,171,20)" fg:x="115" fg:w="2"/><text x="51.3611%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.89%)</title><rect x="51.1111%" y="1029" width="0.8889%" height="15" fill="rgb(210,71,41)" fg:x="115" fg:w="2"/><text x="51.3611%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.89%)</title><rect x="51.1111%" y="1013" width="0.8889%" height="15" fill="rgb(206,173,20)" fg:x="115" fg:w="2"/><text x="51.3611%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.89%)</title><rect x="51.1111%" y="997" width="0.8889%" height="15" fill="rgb(233,88,34)" fg:x="115" fg:w="2"/><text x="51.3611%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.89%)</title><rect x="51.1111%" y="981" width="0.8889%" height="15" fill="rgb(223,209,46)" fg:x="115" fg:w="2"/><text x="51.3611%" y="991.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.89%)</title><rect x="51.1111%" y="965" width="0.8889%" height="15" fill="rgb(250,43,18)" fg:x="115" fg:w="2"/><text x="51.3611%" y="975.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.89%)</title><rect x="51.1111%" y="949" width="0.8889%" height="15" fill="rgb(208,13,10)" fg:x="115" fg:w="2"/><text x="51.3611%" y="959.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.89%)</title><rect x="51.1111%" y="933" width="0.8889%" height="15" fill="rgb(212,200,36)" fg:x="115" fg:w="2"/><text x="51.3611%" y="943.50"></text></g><g><title>_int_malloc (2 samples, 0.89%)</title><rect x="51.1111%" y="917" width="0.8889%" height="15" fill="rgb(225,90,30)" fg:x="115" fg:w="2"/><text x="51.3611%" y="927.50"></text></g><g><title>malloc_consolidate (1 samples, 0.44%)</title><rect x="51.5556%" y="901" width="0.4444%" height="15" fill="rgb(236,182,39)" fg:x="116" fg:w="1"/><text x="51.8056%" y="911.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call_return (1 samples, 0.44%)</title><rect x="52.0000%" y="1173" width="0.4444%" height="15" fill="rgb(212,144,35)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1183.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.44%)</title><rect x="52.0000%" y="1157" width="0.4444%" height="15" fill="rgb(228,63,44)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1167.50"></text></g><g><title>revm::handler::mainnet::execution::call_return (1 samples, 0.44%)</title><rect x="52.0000%" y="1141" width="0.4444%" height="15" fill="rgb(228,109,6)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm::frame::CallFrame&gt;&gt; (1 samples, 0.44%)</title><rect x="52.0000%" y="1125" width="0.4444%" height="15" fill="rgb(238,117,24)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::frame::CallFrame&gt; (1 samples, 0.44%)</title><rect x="52.0000%" y="1109" width="0.4444%" height="15" fill="rgb(242,26,26)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::frame::FrameData&gt; (1 samples, 0.44%)</title><rect x="52.0000%" y="1093" width="0.4444%" height="15" fill="rgb(221,92,48)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::Interpreter&gt; (1 samples, 0.44%)</title><rect x="52.0000%" y="1077" width="0.4444%" height="15" fill="rgb(209,209,32)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::interpreter::contract::Contract&gt;&gt; (1 samples, 0.44%)</title><rect x="52.0000%" y="1061" width="0.4444%" height="15" fill="rgb(221,70,22)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::contract::Contract&gt; (1 samples, 0.44%)</title><rect x="52.0000%" y="1045" width="0.4444%" height="15" fill="rgb(248,145,5)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::analysis::BytecodeLocked&gt; (1 samples, 0.44%)</title><rect x="52.0000%" y="1029" width="0.4444%" height="15" fill="rgb(226,116,26)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.44%)</title><rect x="52.0000%" y="1013" width="0.4444%" height="15" fill="rgb(244,5,17)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.44%)</title><rect x="52.0000%" y="997" width="0.4444%" height="15" fill="rgb(252,159,33)" fg:x="117" fg:w="1"/><text x="52.2500%" y="1007.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="52.0000%" y="981" width="0.4444%" height="15" fill="rgb(206,71,0)" fg:x="117" fg:w="1"/><text x="52.2500%" y="991.50"></text></g><g><title>__free (1 samples, 0.44%)</title><rect x="52.0000%" y="965" width="0.4444%" height="15" fill="rgb(233,118,54)" fg:x="117" fg:w="1"/><text x="52.2500%" y="975.50"></text></g><g><title>_int_free (1 samples, 0.44%)</title><rect x="52.0000%" y="949" width="0.4444%" height="15" fill="rgb(234,83,48)" fg:x="117" fg:w="1"/><text x="52.2500%" y="959.50"></text></g><g><title>revm_interpreter::instructions::arithmetic::div (1 samples, 0.44%)</title><rect x="52.4444%" y="1125" width="0.4444%" height="15" fill="rgb(228,3,54)" fg:x="118" fg:w="1"/><text x="52.6944%" y="1135.50"></text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_div (1 samples, 0.44%)</title><rect x="52.4444%" y="1109" width="0.4444%" height="15" fill="rgb(226,155,13)" fg:x="118" fg:w="1"/><text x="52.6944%" y="1119.50"></text></g><g><title>ruint::div::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::div_rem (1 samples, 0.44%)</title><rect x="52.4444%" y="1093" width="0.4444%" height="15" fill="rgb(241,28,37)" fg:x="118" fg:w="1"/><text x="52.6944%" y="1103.50"></text></g><g><title>ruint::algorithms::div::div (1 samples, 0.44%)</title><rect x="52.4444%" y="1077" width="0.4444%" height="15" fill="rgb(233,93,10)" fg:x="118" fg:w="1"/><text x="52.6944%" y="1087.50"></text></g><g><title>ruint::algorithms::div::small::div_nx2 (1 samples, 0.44%)</title><rect x="52.4444%" y="1061" width="0.4444%" height="15" fill="rgb(225,113,19)" fg:x="118" fg:w="1"/><text x="52.6944%" y="1071.50"></text></g><g><title>ruint::algorithms::div::reciprocal::reciprocal_2_mg10 (1 samples, 0.44%)</title><rect x="52.4444%" y="1045" width="0.4444%" height="15" fill="rgb(241,2,18)" fg:x="118" fg:w="1"/><text x="52.6944%" y="1055.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u64&gt; for u128&gt;::from (1 samples, 0.44%)</title><rect x="52.4444%" y="1029" width="0.4444%" height="15" fill="rgb(228,207,21)" fg:x="118" fg:w="1"/><text x="52.6944%" y="1039.50"></text></g><g><title>revm_interpreter::instructions::host::call (1 samples, 0.44%)</title><rect x="52.8889%" y="1125" width="0.4444%" height="15" fill="rgb(213,211,35)" fg:x="119" fg:w="1"/><text x="53.1389%" y="1135.50"></text></g><g><title>revm_interpreter::instructions::host::call_helpers::get_memory_input_and_out_ranges (1 samples, 0.44%)</title><rect x="52.8889%" y="1109" width="0.4444%" height="15" fill="rgb(209,83,10)" fg:x="119" fg:w="1"/><text x="53.1389%" y="1119.50"></text></g><g><title>alloy_primitives::bytes_::Bytes::copy_from_slice (1 samples, 0.44%)</title><rect x="52.8889%" y="1093" width="0.4444%" height="15" fill="rgb(209,164,1)" fg:x="119" fg:w="1"/><text x="53.1389%" y="1103.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.44%)</title><rect x="52.8889%" y="1077" width="0.4444%" height="15" fill="rgb(213,184,43)" fg:x="119" fg:w="1"/><text x="53.1389%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.44%)</title><rect x="52.8889%" y="1061" width="0.4444%" height="15" fill="rgb(231,61,34)" fg:x="119" fg:w="1"/><text x="53.1389%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.44%)</title><rect x="52.8889%" y="1045" width="0.4444%" height="15" fill="rgb(235,75,3)" fg:x="119" fg:w="1"/><text x="53.1389%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.44%)</title><rect x="52.8889%" y="1029" width="0.4444%" height="15" fill="rgb(220,106,47)" fg:x="119" fg:w="1"/><text x="53.1389%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.44%)</title><rect x="52.8889%" y="1013" width="0.4444%" height="15" fill="rgb(210,196,33)" fg:x="119" fg:w="1"/><text x="53.1389%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="52.8889%" y="997" width="0.4444%" height="15" fill="rgb(229,154,42)" fg:x="119" fg:w="1"/><text x="53.1389%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="52.8889%" y="981" width="0.4444%" height="15" fill="rgb(228,114,26)" fg:x="119" fg:w="1"/><text x="53.1389%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.44%)</title><rect x="52.8889%" y="965" width="0.4444%" height="15" fill="rgb(208,144,1)" fg:x="119" fg:w="1"/><text x="53.1389%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="52.8889%" y="949" width="0.4444%" height="15" fill="rgb(239,112,37)" fg:x="119" fg:w="1"/><text x="53.1389%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="52.8889%" y="933" width="0.4444%" height="15" fill="rgb(210,96,50)" fg:x="119" fg:w="1"/><text x="53.1389%" y="943.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="52.8889%" y="917" width="0.4444%" height="15" fill="rgb(222,178,2)" fg:x="119" fg:w="1"/><text x="53.1389%" y="927.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.44%)</title><rect x="52.8889%" y="901" width="0.4444%" height="15" fill="rgb(226,74,18)" fg:x="119" fg:w="1"/><text x="53.1389%" y="911.50"></text></g><g><title>revm_interpreter::instructions::host::extcodesize (1 samples, 0.44%)</title><rect x="53.3333%" y="1125" width="0.4444%" height="15" fill="rgb(225,67,54)" fg:x="120" fg:w="1"/><text x="53.5833%" y="1135.50"></text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::code (1 samples, 0.44%)</title><rect x="53.3333%" y="1109" width="0.4444%" height="15" fill="rgb(251,92,32)" fg:x="120" fg:w="1"/><text x="53.5833%" y="1119.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::code (1 samples, 0.44%)</title><rect x="53.3333%" y="1093" width="0.4444%" height="15" fill="rgb(228,149,22)" fg:x="120" fg:w="1"/><text x="53.5833%" y="1103.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (1 samples, 0.44%)</title><rect x="53.3333%" y="1077" width="0.4444%" height="15" fill="rgb(243,54,13)" fg:x="120" fg:w="1"/><text x="53.5833%" y="1087.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (1 samples, 0.44%)</title><rect x="53.3333%" y="1061" width="0.4444%" height="15" fill="rgb(243,180,28)" fg:x="120" fg:w="1"/><text x="53.5833%" y="1071.50"></text></g><g><title>&lt;blockstm::view::InstrumentedDB&lt;ExtDB&gt; as revm_primitives::db::Database&gt;::basic (1 samples, 0.44%)</title><rect x="53.3333%" y="1045" width="0.4444%" height="15" fill="rgb(208,167,24)" fg:x="120" fg:w="1"/><text x="53.5833%" y="1055.50"></text></g><g><title>blockstm::view::ParallelState::read_cached_data (1 samples, 0.44%)</title><rect x="53.3333%" y="1029" width="0.4444%" height="15" fill="rgb(245,73,45)" fg:x="120" fg:w="1"/><text x="53.5833%" y="1039.50"></text></g><g><title>blockstm::captured_reads::CapturedReads&lt;K,V&gt;::capture_read (1 samples, 0.44%)</title><rect x="53.3333%" y="1013" width="0.4444%" height="15" fill="rgb(237,203,48)" fg:x="120" fg:w="1"/><text x="53.5833%" y="1023.50"></text></g><g><title>revm_interpreter::instructions::host::log (1 samples, 0.44%)</title><rect x="53.7778%" y="1125" width="0.4444%" height="15" fill="rgb(211,197,16)" fg:x="121" fg:w="1"/><text x="54.0278%" y="1135.50"></text></g><g><title>alloy_primitives::bytes_::Bytes::copy_from_slice (1 samples, 0.44%)</title><rect x="53.7778%" y="1109" width="0.4444%" height="15" fill="rgb(243,99,51)" fg:x="121" fg:w="1"/><text x="54.0278%" y="1119.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.44%)</title><rect x="53.7778%" y="1093" width="0.4444%" height="15" fill="rgb(215,123,29)" fg:x="121" fg:w="1"/><text x="54.0278%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.44%)</title><rect x="53.7778%" y="1077" width="0.4444%" height="15" fill="rgb(239,186,37)" fg:x="121" fg:w="1"/><text x="54.0278%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.44%)</title><rect x="53.7778%" y="1061" width="0.4444%" height="15" fill="rgb(252,136,39)" fg:x="121" fg:w="1"/><text x="54.0278%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.44%)</title><rect x="53.7778%" y="1045" width="0.4444%" height="15" fill="rgb(223,213,32)" fg:x="121" fg:w="1"/><text x="54.0278%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.44%)</title><rect x="53.7778%" y="1029" width="0.4444%" height="15" fill="rgb(233,115,5)" fg:x="121" fg:w="1"/><text x="54.0278%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="53.7778%" y="1013" width="0.4444%" height="15" fill="rgb(207,226,44)" fg:x="121" fg:w="1"/><text x="54.0278%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="53.7778%" y="997" width="0.4444%" height="15" fill="rgb(208,126,0)" fg:x="121" fg:w="1"/><text x="54.0278%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.44%)</title><rect x="53.7778%" y="981" width="0.4444%" height="15" fill="rgb(244,66,21)" fg:x="121" fg:w="1"/><text x="54.0278%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="53.7778%" y="965" width="0.4444%" height="15" fill="rgb(222,97,12)" fg:x="121" fg:w="1"/><text x="54.0278%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="53.7778%" y="949" width="0.4444%" height="15" fill="rgb(219,213,19)" fg:x="121" fg:w="1"/><text x="54.0278%" y="959.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="53.7778%" y="933" width="0.4444%" height="15" fill="rgb(252,169,30)" fg:x="121" fg:w="1"/><text x="54.0278%" y="943.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.44%)</title><rect x="53.7778%" y="917" width="0.4444%" height="15" fill="rgb(206,32,51)" fg:x="121" fg:w="1"/><text x="54.0278%" y="927.50"></text></g><g><title>_int_malloc (1 samples, 0.44%)</title><rect x="53.7778%" y="901" width="0.4444%" height="15" fill="rgb(250,172,42)" fg:x="121" fg:w="1"/><text x="54.0278%" y="911.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.44%)</title><rect x="54.2222%" y="1029" width="0.4444%" height="15" fill="rgb(209,34,43)" fg:x="122" fg:w="1"/><text x="54.4722%" y="1039.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.44%)</title><rect x="54.2222%" y="1013" width="0.4444%" height="15" fill="rgb(223,11,35)" fg:x="122" fg:w="1"/><text x="54.4722%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::mapref::one::RefMut&lt;blockstm::view::ReadKey,blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="54.6667%" y="1029" width="0.4444%" height="15" fill="rgb(251,219,26)" fg:x="123" fg:w="1"/><text x="54.9167%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;dashmap::lock::RawRwLock,hashbrown::map::HashMap&lt;blockstm::view::ReadKey,dashmap::util::SharedValue&lt;blockstm::mvhashmap::versioned_data::VersionedValue&lt;blockstm::view::ReadValue&gt;&gt;,std::hash::random::RandomState&gt;&gt;&gt; (1 samples, 0.44%)</title><rect x="54.6667%" y="1013" width="0.4444%" height="15" fill="rgb(231,119,3)" fg:x="123" fg:w="1"/><text x="54.9167%" y="1023.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="54.6667%" y="997" width="0.4444%" height="15" fill="rgb(216,97,11)" fg:x="123" fg:w="1"/><text x="54.9167%" y="1007.50"></text></g><g><title>&lt;dashmap::lock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (1 samples, 0.44%)</title><rect x="54.6667%" y="981" width="0.4444%" height="15" fill="rgb(223,59,9)" fg:x="123" fg:w="1"/><text x="54.9167%" y="991.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.44%)</title><rect x="55.1111%" y="997" width="0.4444%" height="15" fill="rgb(233,93,31)" fg:x="124" fg:w="1"/><text x="55.3611%" y="1007.50"></text></g><g><title>&lt;blockstm::view::ReadKey as core::hash::Hash&gt;::hash (1 samples, 0.44%)</title><rect x="55.1111%" y="981" width="0.4444%" height="15" fill="rgb(239,81,33)" fg:x="124" fg:w="1"/><text x="55.3611%" y="991.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::entry (2 samples, 0.89%)</title><rect x="55.1111%" y="1029" width="0.8889%" height="15" fill="rgb(213,120,34)" fg:x="124" fg:w="2"/><text x="55.3611%" y="1039.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_entry (2 samples, 0.89%)</title><rect x="55.1111%" y="1013" width="0.8889%" height="15" fill="rgb(243,49,53)" fg:x="124" fg:w="2"/><text x="55.3611%" y="1023.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (1 samples, 0.44%)</title><rect x="55.5556%" y="997" width="0.4444%" height="15" fill="rgb(247,216,33)" fg:x="125" fg:w="1"/><text x="55.8056%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.44%)</title><rect x="55.5556%" y="981" width="0.4444%" height="15" fill="rgb(226,26,14)" fg:x="125" fg:w="1"/><text x="55.8056%" y="991.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.44%)</title><rect x="55.5556%" y="965" width="0.4444%" height="15" fill="rgb(215,49,53)" fg:x="125" fg:w="1"/><text x="55.8056%" y="975.50"></text></g><g><title>&lt;blockstm::view::ReadKey as core::hash::Hash&gt;::hash (1 samples, 0.44%)</title><rect x="55.5556%" y="949" width="0.4444%" height="15" fill="rgb(245,162,40)" fg:x="125" fg:w="1"/><text x="55.8056%" y="959.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.44%)</title><rect x="55.5556%" y="933" width="0.4444%" height="15" fill="rgb(229,68,17)" fg:x="125" fg:w="1"/><text x="55.8056%" y="943.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.44%)</title><rect x="55.5556%" y="917" width="0.4444%" height="15" fill="rgb(213,182,10)" fg:x="125" fg:w="1"/><text x="55.8056%" y="927.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.44%)</title><rect x="55.5556%" y="901" width="0.4444%" height="15" fill="rgb(245,125,30)" fg:x="125" fg:w="1"/><text x="55.8056%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.44%)</title><rect x="55.5556%" y="885" width="0.4444%" height="15" fill="rgb(232,202,2)" fg:x="125" fg:w="1"/><text x="55.8056%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.44%)</title><rect x="55.5556%" y="869" width="0.4444%" height="15" fill="rgb(237,140,51)" fg:x="125" fg:w="1"/><text x="55.8056%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="55.5556%" y="853" width="0.4444%" height="15" fill="rgb(236,157,25)" fg:x="125" fg:w="1"/><text x="55.8056%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="55.5556%" y="837" width="0.4444%" height="15" fill="rgb(219,209,0)" fg:x="125" fg:w="1"/><text x="55.8056%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="55.5556%" y="821" width="0.4444%" height="15" fill="rgb(240,116,54)" fg:x="125" fg:w="1"/><text x="55.8056%" y="831.50"></text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedData&lt;K,V&gt;::set_base_value (6 samples, 2.67%)</title><rect x="54.2222%" y="1045" width="2.6667%" height="15" fill="rgb(216,10,36)" fg:x="122" fg:w="6"/><text x="54.4722%" y="1055.50">bl..</text></g><g><title>dashmap::mapref::entry::Entry&lt;K,V,S&gt;::or_default (2 samples, 0.89%)</title><rect x="56.0000%" y="1029" width="0.8889%" height="15" fill="rgb(222,72,44)" fg:x="126" fg:w="2"/><text x="56.2500%" y="1039.50"></text></g><g><title>dashmap::mapref::entry::VacantEntry&lt;K,V,S&gt;::insert (2 samples, 0.89%)</title><rect x="56.0000%" y="1013" width="0.8889%" height="15" fill="rgb(232,159,9)" fg:x="126" fg:w="2"/><text x="56.2500%" y="1023.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (1 samples, 0.44%)</title><rect x="56.4444%" y="997" width="0.4444%" height="15" fill="rgb(210,39,32)" fg:x="127" fg:w="1"/><text x="56.6944%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.44%)</title><rect x="56.4444%" y="981" width="0.4444%" height="15" fill="rgb(216,194,45)" fg:x="127" fg:w="1"/><text x="56.6944%" y="991.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.44%)</title><rect x="56.4444%" y="965" width="0.4444%" height="15" fill="rgb(218,18,35)" fg:x="127" fg:w="1"/><text x="56.6944%" y="975.50"></text></g><g><title>&lt;blockstm::view::ReadKey as core::hash::Hash&gt;::hash (1 samples, 0.44%)</title><rect x="56.4444%" y="949" width="0.4444%" height="15" fill="rgb(207,83,51)" fg:x="127" fg:w="1"/><text x="56.6944%" y="959.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::hash::Hash&gt;::hash (1 samples, 0.44%)</title><rect x="56.4444%" y="933" width="0.4444%" height="15" fill="rgb(225,63,43)" fg:x="127" fg:w="1"/><text x="56.6944%" y="943.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.44%)</title><rect x="56.4444%" y="917" width="0.4444%" height="15" fill="rgb(207,57,36)" fg:x="127" fg:w="1"/><text x="56.6944%" y="927.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.44%)</title><rect x="56.4444%" y="901" width="0.4444%" height="15" fill="rgb(216,99,33)" fg:x="127" fg:w="1"/><text x="56.6944%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.44%)</title><rect x="56.4444%" y="885" width="0.4444%" height="15" fill="rgb(225,42,16)" fg:x="127" fg:w="1"/><text x="56.6944%" y="895.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.44%)</title><rect x="56.4444%" y="869" width="0.4444%" height="15" fill="rgb(220,201,45)" fg:x="127" fg:w="1"/><text x="56.6944%" y="879.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.44%)</title><rect x="56.4444%" y="853" width="0.4444%" height="15" fill="rgb(225,33,4)" fg:x="127" fg:w="1"/><text x="56.6944%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="56.4444%" y="837" width="0.4444%" height="15" fill="rgb(224,33,50)" fg:x="127" fg:w="1"/><text x="56.6944%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="56.4444%" y="821" width="0.4444%" height="15" fill="rgb(246,198,51)" fg:x="127" fg:w="1"/><text x="56.6944%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="56.4444%" y="805" width="0.4444%" height="15" fill="rgb(205,22,4)" fg:x="127" fg:w="1"/><text x="56.6944%" y="815.50"></text></g><g><title>&lt;blockstm::captured_reads::DataRead&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.44%)</title><rect x="56.8889%" y="1029" width="0.4444%" height="15" fill="rgb(206,3,8)" fg:x="128" fg:w="1"/><text x="57.1389%" y="1039.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.44%)</title><rect x="56.8889%" y="1013" width="0.4444%" height="15" fill="rgb(251,23,15)" fg:x="128" fg:w="1"/><text x="57.1389%" y="1023.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.44%)</title><rect x="57.3333%" y="981" width="0.4444%" height="15" fill="rgb(252,88,28)" fg:x="129" fg:w="1"/><text x="57.5833%" y="991.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.44%)</title><rect x="57.3333%" y="965" width="0.4444%" height="15" fill="rgb(212,127,14)" fg:x="129" fg:w="1"/><text x="57.5833%" y="975.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="57.3333%" y="949" width="0.4444%" height="15" fill="rgb(247,145,37)" fg:x="129" fg:w="1"/><text x="57.5833%" y="959.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="57.3333%" y="933" width="0.4444%" height="15" fill="rgb(209,117,53)" fg:x="129" fg:w="1"/><text x="57.5833%" y="943.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="57.3333%" y="917" width="0.4444%" height="15" fill="rgb(212,90,42)" fg:x="129" fg:w="1"/><text x="57.5833%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.44%)</title><rect x="57.3333%" y="901" width="0.4444%" height="15" fill="rgb(218,164,37)" fg:x="129" fg:w="1"/><text x="57.5833%" y="911.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.44%)</title><rect x="57.3333%" y="885" width="0.4444%" height="15" fill="rgb(246,65,34)" fg:x="129" fg:w="1"/><text x="57.5833%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.44%)</title><rect x="57.7778%" y="949" width="0.4444%" height="15" fill="rgb(231,100,33)" fg:x="130" fg:w="1"/><text x="58.0278%" y="959.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.44%)</title><rect x="57.7778%" y="933" width="0.4444%" height="15" fill="rgb(228,126,14)" fg:x="130" fg:w="1"/><text x="58.0278%" y="943.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.44%)</title><rect x="57.7778%" y="917" width="0.4444%" height="15" fill="rgb(215,173,21)" fg:x="130" fg:w="1"/><text x="58.0278%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.44%)</title><rect x="57.7778%" y="901" width="0.4444%" height="15" fill="rgb(210,6,40)" fg:x="130" fg:w="1"/><text x="58.0278%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.44%)</title><rect x="57.7778%" y="885" width="0.4444%" height="15" fill="rgb(212,48,18)" fg:x="130" fg:w="1"/><text x="58.0278%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.44%)</title><rect x="57.7778%" y="869" width="0.4444%" height="15" fill="rgb(230,214,11)" fg:x="130" fg:w="1"/><text x="58.0278%" y="879.50"></text></g><g><title>blockstm::view::ParallelState::read_cached_data (4 samples, 1.78%)</title><rect x="56.8889%" y="1045" width="1.7778%" height="15" fill="rgb(254,105,39)" fg:x="128" fg:w="4"/><text x="57.1389%" y="1055.50">b..</text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedData&lt;K,V&gt;::fetch_data (3 samples, 1.33%)</title><rect x="57.3333%" y="1029" width="1.3333%" height="15" fill="rgb(245,158,5)" fg:x="129" fg:w="3"/><text x="57.5833%" y="1039.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (3 samples, 1.33%)</title><rect x="57.3333%" y="1013" width="1.3333%" height="15" fill="rgb(249,208,11)" fg:x="129" fg:w="3"/><text x="57.5833%" y="1023.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (3 samples, 1.33%)</title><rect x="57.3333%" y="997" width="1.3333%" height="15" fill="rgb(210,39,28)" fg:x="129" fg:w="3"/><text x="57.5833%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (2 samples, 0.89%)</title><rect x="57.7778%" y="981" width="0.8889%" height="15" fill="rgb(211,56,53)" fg:x="130" fg:w="2"/><text x="58.0278%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.89%)</title><rect x="57.7778%" y="965" width="0.8889%" height="15" fill="rgb(226,201,30)" fg:x="130" fg:w="2"/><text x="58.0278%" y="975.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1 samples, 0.44%)</title><rect x="58.2222%" y="949" width="0.4444%" height="15" fill="rgb(239,101,34)" fg:x="131" fg:w="1"/><text x="58.4722%" y="959.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1 samples, 0.44%)</title><rect x="58.2222%" y="933" width="0.4444%" height="15" fill="rgb(226,209,5)" fg:x="131" fg:w="1"/><text x="58.4722%" y="943.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (1 samples, 0.44%)</title><rect x="58.2222%" y="917" width="0.4444%" height="15" fill="rgb(250,105,47)" fg:x="131" fg:w="1"/><text x="58.4722%" y="927.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (1 samples, 0.44%)</title><rect x="58.2222%" y="901" width="0.4444%" height="15" fill="rgb(230,72,3)" fg:x="131" fg:w="1"/><text x="58.4722%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.44%)</title><rect x="58.2222%" y="885" width="0.4444%" height="15" fill="rgb(232,218,39)" fg:x="131" fg:w="1"/><text x="58.4722%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.44%)</title><rect x="58.2222%" y="869" width="0.4444%" height="15" fill="rgb(248,166,6)" fg:x="131" fg:w="1"/><text x="58.4722%" y="879.50"></text></g><g><title>revm_interpreter::instructions::host::sload (11 samples, 4.89%)</title><rect x="54.2222%" y="1125" width="4.8889%" height="15" fill="rgb(247,89,20)" fg:x="122" fg:w="11"/><text x="54.4722%" y="1135.50">revm_i..</text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::sload (11 samples, 4.89%)</title><rect x="54.2222%" y="1109" width="4.8889%" height="15" fill="rgb(248,130,54)" fg:x="122" fg:w="11"/><text x="54.4722%" y="1119.50">&lt;revm:..</text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::sload (11 samples, 4.89%)</title><rect x="54.2222%" y="1093" width="4.8889%" height="15" fill="rgb(234,196,4)" fg:x="122" fg:w="11"/><text x="54.4722%" y="1103.50">revm::..</text></g><g><title>revm::journaled_state::JournaledState::sload (11 samples, 4.89%)</title><rect x="54.2222%" y="1077" width="4.8889%" height="15" fill="rgb(250,143,31)" fg:x="122" fg:w="11"/><text x="54.4722%" y="1087.50">revm::..</text></g><g><title>&lt;blockstm::view::InstrumentedDB&lt;ExtDB&gt; as revm_primitives::db::Database&gt;::storage (11 samples, 4.89%)</title><rect x="54.2222%" y="1061" width="4.8889%" height="15" fill="rgb(211,110,34)" fg:x="122" fg:w="11"/><text x="54.4722%" y="1071.50">&lt;block..</text></g><g><title>revm_primitives::db::_::&lt;impl revm_primitives::db::DatabaseRef for &amp;T&gt;::storage_ref (1 samples, 0.44%)</title><rect x="58.6667%" y="1045" width="0.4444%" height="15" fill="rgb(215,124,48)" fg:x="132" fg:w="1"/><text x="58.9167%" y="1055.50"></text></g><g><title>&lt;revm::db::in_memory_db::CacheDB&lt;ExtDB&gt; as revm_primitives::db::DatabaseRef&gt;::storage_ref (1 samples, 0.44%)</title><rect x="58.6667%" y="1029" width="0.4444%" height="15" fill="rgb(216,46,13)" fg:x="132" fg:w="1"/><text x="58.9167%" y="1039.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.44%)</title><rect x="58.6667%" y="1013" width="0.4444%" height="15" fill="rgb(205,184,25)" fg:x="132" fg:w="1"/><text x="58.9167%" y="1023.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.44%)</title><rect x="58.6667%" y="997" width="0.4444%" height="15" fill="rgb(228,1,10)" fg:x="132" fg:w="1"/><text x="58.9167%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.44%)</title><rect x="58.6667%" y="981" width="0.4444%" height="15" fill="rgb(213,116,27)" fg:x="132" fg:w="1"/><text x="58.9167%" y="991.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.44%)</title><rect x="58.6667%" y="965" width="0.4444%" height="15" fill="rgb(241,95,50)" fg:x="132" fg:w="1"/><text x="58.9167%" y="975.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.44%)</title><rect x="58.6667%" y="949" width="0.4444%" height="15" fill="rgb(238,48,32)" fg:x="132" fg:w="1"/><text x="58.9167%" y="959.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.44%)</title><rect x="58.6667%" y="933" width="0.4444%" height="15" fill="rgb(235,113,49)" fg:x="132" fg:w="1"/><text x="58.9167%" y="943.50"></text></g><g><title>&lt;ruint::Uint&lt;_,_&gt; as core::hash::Hash&gt;::hash (1 samples, 0.44%)</title><rect x="58.6667%" y="917" width="0.4444%" height="15" fill="rgb(205,127,43)" fg:x="132" fg:w="1"/><text x="58.9167%" y="927.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.44%)</title><rect x="58.6667%" y="901" width="0.4444%" height="15" fill="rgb(250,162,2)" fg:x="132" fg:w="1"/><text x="58.9167%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.44%)</title><rect x="58.6667%" y="885" width="0.4444%" height="15" fill="rgb(220,13,41)" fg:x="132" fg:w="1"/><text x="58.9167%" y="895.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.44%)</title><rect x="58.6667%" y="869" width="0.4444%" height="15" fill="rgb(249,221,25)" fg:x="132" fg:w="1"/><text x="58.9167%" y="879.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.44%)</title><rect x="58.6667%" y="853" width="0.4444%" height="15" fill="rgb(215,208,19)" fg:x="132" fg:w="1"/><text x="58.9167%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="58.6667%" y="837" width="0.4444%" height="15" fill="rgb(236,175,2)" fg:x="132" fg:w="1"/><text x="58.9167%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="58.6667%" y="821" width="0.4444%" height="15" fill="rgb(241,52,2)" fg:x="132" fg:w="1"/><text x="58.9167%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="58.6667%" y="805" width="0.4444%" height="15" fill="rgb(248,140,14)" fg:x="132" fg:w="1"/><text x="58.9167%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.44%)</title><rect x="58.6667%" y="789" width="0.4444%" height="15" fill="rgb(253,22,42)" fg:x="132" fg:w="1"/><text x="58.9167%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.44%)</title><rect x="58.6667%" y="773" width="0.4444%" height="15" fill="rgb(234,61,47)" fg:x="132" fg:w="1"/><text x="58.9167%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="59.1111%" y="1061" width="0.4444%" height="15" fill="rgb(208,226,15)" fg:x="133" fg:w="1"/><text x="59.3611%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.44%)</title><rect x="59.1111%" y="1045" width="0.4444%" height="15" fill="rgb(217,221,4)" fg:x="133" fg:w="1"/><text x="59.3611%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.44%)</title><rect x="59.1111%" y="1029" width="0.4444%" height="15" fill="rgb(212,174,34)" fg:x="133" fg:w="1"/><text x="59.3611%" y="1039.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.44%)</title><rect x="59.1111%" y="1013" width="0.4444%" height="15" fill="rgb(253,83,4)" fg:x="133" fg:w="1"/><text x="59.3611%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.44%)</title><rect x="59.1111%" y="997" width="0.4444%" height="15" fill="rgb(250,195,49)" fg:x="133" fg:w="1"/><text x="59.3611%" y="1007.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.44%)</title><rect x="59.1111%" y="981" width="0.4444%" height="15" fill="rgb(241,192,25)" fg:x="133" fg:w="1"/><text x="59.3611%" y="991.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.44%)</title><rect x="59.1111%" y="965" width="0.4444%" height="15" fill="rgb(208,124,10)" fg:x="133" fg:w="1"/><text x="59.3611%" y="975.50"></text></g><g><title>__realloc (1 samples, 0.44%)</title><rect x="59.1111%" y="949" width="0.4444%" height="15" fill="rgb(222,33,0)" fg:x="133" fg:w="1"/><text x="59.3611%" y="959.50"></text></g><g><title>revm::journaled_state::JournaledState::sload (1 samples, 0.44%)</title><rect x="59.5556%" y="1061" width="0.4444%" height="15" fill="rgb(234,209,28)" fg:x="134" fg:w="1"/><text x="59.8056%" y="1071.50"></text></g><g><title>&lt;blockstm::view::InstrumentedDB&lt;ExtDB&gt; as revm_primitives::db::Database&gt;::storage (1 samples, 0.44%)</title><rect x="59.5556%" y="1045" width="0.4444%" height="15" fill="rgb(224,11,23)" fg:x="134" fg:w="1"/><text x="59.8056%" y="1055.50"></text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedData&lt;K,V&gt;::set_base_value (1 samples, 0.44%)</title><rect x="59.5556%" y="1029" width="0.4444%" height="15" fill="rgb(232,99,1)" fg:x="134" fg:w="1"/><text x="59.8056%" y="1039.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.44%)</title><rect x="59.5556%" y="1013" width="0.4444%" height="15" fill="rgb(237,95,45)" fg:x="134" fg:w="1"/><text x="59.8056%" y="1023.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.44%)</title><rect x="59.5556%" y="997" width="0.4444%" height="15" fill="rgb(208,109,11)" fg:x="134" fg:w="1"/><text x="59.8056%" y="1007.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.44%)</title><rect x="59.5556%" y="981" width="0.4444%" height="15" fill="rgb(216,190,48)" fg:x="134" fg:w="1"/><text x="59.8056%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.44%)</title><rect x="59.5556%" y="965" width="0.4444%" height="15" fill="rgb(251,171,36)" fg:x="134" fg:w="1"/><text x="59.8056%" y="975.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.44%)</title><rect x="59.5556%" y="949" width="0.4444%" height="15" fill="rgb(230,62,22)" fg:x="134" fg:w="1"/><text x="59.8056%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="59.5556%" y="933" width="0.4444%" height="15" fill="rgb(225,114,35)" fg:x="134" fg:w="1"/><text x="59.8056%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="59.5556%" y="917" width="0.4444%" height="15" fill="rgb(215,118,42)" fg:x="134" fg:w="1"/><text x="59.8056%" y="927.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="59.5556%" y="901" width="0.4444%" height="15" fill="rgb(243,119,21)" fg:x="134" fg:w="1"/><text x="59.8056%" y="911.50"></text></g><g><title>__rdl_alloc (1 samples, 0.44%)</title><rect x="59.5556%" y="885" width="0.4444%" height="15" fill="rgb(252,177,53)" fg:x="134" fg:w="1"/><text x="59.8056%" y="895.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.44%)</title><rect x="59.5556%" y="869" width="0.4444%" height="15" fill="rgb(237,209,29)" fg:x="134" fg:w="1"/><text x="59.8056%" y="879.50"></text></g><g><title>std::sys::pal::unix::alloc::aligned_malloc (1 samples, 0.44%)</title><rect x="59.5556%" y="853" width="0.4444%" height="15" fill="rgb(212,65,23)" fg:x="134" fg:w="1"/><text x="59.8056%" y="863.50"></text></g><g><title>__posix_memalign (1 samples, 0.44%)</title><rect x="59.5556%" y="837" width="0.4444%" height="15" fill="rgb(230,222,46)" fg:x="134" fg:w="1"/><text x="59.8056%" y="847.50"></text></g><g><title>_mid_memalign.constprop.0 (1 samples, 0.44%)</title><rect x="59.5556%" y="821" width="0.4444%" height="15" fill="rgb(215,135,32)" fg:x="134" fg:w="1"/><text x="59.8056%" y="831.50"></text></g><g><title>_int_memalign (1 samples, 0.44%)</title><rect x="59.5556%" y="805" width="0.4444%" height="15" fill="rgb(246,101,22)" fg:x="134" fg:w="1"/><text x="59.8056%" y="815.50"></text></g><g><title>_int_malloc (1 samples, 0.44%)</title><rect x="59.5556%" y="789" width="0.4444%" height="15" fill="rgb(206,107,13)" fg:x="134" fg:w="1"/><text x="59.8056%" y="799.50"></text></g><g><title>sysmalloc (1 samples, 0.44%)</title><rect x="59.5556%" y="773" width="0.4444%" height="15" fill="rgb(250,100,44)" fg:x="134" fg:w="1"/><text x="59.8056%" y="783.50"></text></g><g><title>revm_interpreter::instructions::host::sstore (3 samples, 1.33%)</title><rect x="59.1111%" y="1125" width="1.3333%" height="15" fill="rgb(231,147,38)" fg:x="133" fg:w="3"/><text x="59.3611%" y="1135.50"></text></g><g><title>&lt;revm::evm::Evm&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::sstore (3 samples, 1.33%)</title><rect x="59.1111%" y="1109" width="1.3333%" height="15" fill="rgb(229,8,40)" fg:x="133" fg:w="3"/><text x="59.3611%" y="1119.50"></text></g><g><title>revm::context::inner_evm_context::InnerEvmContext&lt;DB&gt;::sstore (3 samples, 1.33%)</title><rect x="59.1111%" y="1093" width="1.3333%" height="15" fill="rgb(221,135,30)" fg:x="133" fg:w="3"/><text x="59.3611%" y="1103.50"></text></g><g><title>revm::journaled_state::JournaledState::sstore (3 samples, 1.33%)</title><rect x="59.1111%" y="1077" width="1.3333%" height="15" fill="rgb(249,193,18)" fg:x="133" fg:w="3"/><text x="59.3611%" y="1087.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.44%)</title><rect x="60.0000%" y="1061" width="0.4444%" height="15" fill="rgb(209,133,39)" fg:x="135" fg:w="1"/><text x="60.2500%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.44%)</title><rect x="60.0000%" y="1045" width="0.4444%" height="15" fill="rgb(232,100,14)" fg:x="135" fg:w="1"/><text x="60.2500%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.44%)</title><rect x="60.0000%" y="1029" width="0.4444%" height="15" fill="rgb(224,185,1)" fg:x="135" fg:w="1"/><text x="60.2500%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.44%)</title><rect x="60.0000%" y="1013" width="0.4444%" height="15" fill="rgb(223,139,8)" fg:x="135" fg:w="1"/><text x="60.2500%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.44%)</title><rect x="60.0000%" y="997" width="0.4444%" height="15" fill="rgb(232,213,38)" fg:x="135" fg:w="1"/><text x="60.2500%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.44%)</title><rect x="60.0000%" y="981" width="0.4444%" height="15" fill="rgb(207,94,22)" fg:x="135" fg:w="1"/><text x="60.2500%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.44%)</title><rect x="60.0000%" y="965" width="0.4444%" height="15" fill="rgb(219,183,54)" fg:x="135" fg:w="1"/><text x="60.2500%" y="975.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.44%)</title><rect x="60.0000%" y="949" width="0.4444%" height="15" fill="rgb(216,185,54)" fg:x="135" fg:w="1"/><text x="60.2500%" y="959.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.44%)</title><rect x="60.0000%" y="933" width="0.4444%" height="15" fill="rgb(254,217,39)" fg:x="135" fg:w="1"/><text x="60.2500%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.44%)</title><rect x="60.0000%" y="917" width="0.4444%" height="15" fill="rgb(240,178,23)" fg:x="135" fg:w="1"/><text x="60.2500%" y="927.50"></text></g><g><title>&lt;alloy_primitives::bits::address::Address as core::cmp::PartialEq&gt;::eq (1 samples, 0.44%)</title><rect x="60.0000%" y="901" width="0.4444%" height="15" fill="rgb(218,11,47)" fg:x="135" fg:w="1"/><text x="60.2500%" y="911.50"></text></g><g><title>&lt;alloy_primitives::bits::fixed::FixedBytes&lt;_&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.44%)</title><rect x="60.0000%" y="885" width="0.4444%" height="15" fill="rgb(218,51,51)" fg:x="135" fg:w="1"/><text x="60.2500%" y="895.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.44%)</title><rect x="60.0000%" y="869" width="0.4444%" height="15" fill="rgb(238,126,27)" fg:x="135" fg:w="1"/><text x="60.2500%" y="879.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 0.44%)</title><rect x="60.0000%" y="853" width="0.4444%" height="15" fill="rgb(249,202,22)" fg:x="135" fg:w="1"/><text x="60.2500%" y="863.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::start_the_loop (72 samples, 32.00%)</title><rect x="31.1111%" y="1205" width="32.0000%" height="15" fill="rgb(254,195,49)" fg:x="70" fg:w="72"/><text x="31.3611%" y="1215.50">revm::evm::Evm&lt;EXT,DB&gt;::start_the_loop</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::run_the_loop (72 samples, 32.00%)</title><rect x="31.1111%" y="1189" width="32.0000%" height="15" fill="rgb(208,123,14)" fg:x="70" fg:w="72"/><text x="31.3611%" y="1199.50">revm::evm::Evm&lt;EXT,DB&gt;::run_the_loop</text></g><g><title>revm_interpreter::interpreter::Interpreter::run (24 samples, 10.67%)</title><rect x="52.4444%" y="1173" width="10.6667%" height="15" fill="rgb(224,200,8)" fg:x="118" fg:w="24"/><text x="52.6944%" y="1183.50">revm_interpreter..</text></g><g><title>revm_interpreter::interpreter::Interpreter::step (24 samples, 10.67%)</title><rect x="52.4444%" y="1157" width="10.6667%" height="15" fill="rgb(217,61,36)" fg:x="118" fg:w="24"/><text x="52.6944%" y="1167.50">revm_interpreter..</text></g><g><title>core::ops::function::Fn::call (24 samples, 10.67%)</title><rect x="52.4444%" y="1141" width="10.6667%" height="15" fill="rgb(206,35,45)" fg:x="118" fg:w="24"/><text x="52.6944%" y="1151.50">core::ops::funct..</text></g><g><title>revm_interpreter::instructions::system::keccak256 (6 samples, 2.67%)</title><rect x="60.4444%" y="1125" width="2.6667%" height="15" fill="rgb(217,65,33)" fg:x="136" fg:w="6"/><text x="60.6944%" y="1135.50">re..</text></g><g><title>alloy_primitives::utils::keccak256 (6 samples, 2.67%)</title><rect x="60.4444%" y="1109" width="2.6667%" height="15" fill="rgb(222,158,48)" fg:x="136" fg:w="6"/><text x="60.6944%" y="1119.50">al..</text></g><g><title>alloy_primitives::utils::keccak256::keccak256 (6 samples, 2.67%)</title><rect x="60.4444%" y="1093" width="2.6667%" height="15" fill="rgb(254,2,54)" fg:x="136" fg:w="6"/><text x="60.6944%" y="1103.50">al..</text></g><g><title>alloy_primitives::utils::Keccak256::finalize_into_raw (6 samples, 2.67%)</title><rect x="60.4444%" y="1077" width="2.6667%" height="15" fill="rgb(250,143,38)" fg:x="136" fg:w="6"/><text x="60.6944%" y="1087.50">al..</text></g><g><title>alloy_primitives::utils::Keccak256::finalize_into_array (6 samples, 2.67%)</title><rect x="60.4444%" y="1061" width="2.6667%" height="15" fill="rgb(248,25,0)" fg:x="136" fg:w="6"/><text x="60.6944%" y="1071.50">al..</text></g><g><title>&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::finalize (6 samples, 2.67%)</title><rect x="60.4444%" y="1045" width="2.6667%" height="15" fill="rgb(206,152,27)" fg:x="136" fg:w="6"/><text x="60.6944%" y="1055.50">&lt;t..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::finalize (6 samples, 2.67%)</title><rect x="60.4444%" y="1029" width="2.6667%" height="15" fill="rgb(240,77,30)" fg:x="136" fg:w="6"/><text x="60.6944%" y="1039.50">ti..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::squeeze (6 samples, 2.67%)</title><rect x="60.4444%" y="1013" width="2.6667%" height="15" fill="rgb(231,5,3)" fg:x="136" fg:w="6"/><text x="60.6944%" y="1023.50">ti..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::fill_block (6 samples, 2.67%)</title><rect x="60.4444%" y="997" width="2.6667%" height="15" fill="rgb(207,226,32)" fg:x="136" fg:w="6"/><text x="60.6944%" y="1007.50">ti..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::keccak (6 samples, 2.67%)</title><rect x="60.4444%" y="981" width="2.6667%" height="15" fill="rgb(222,207,47)" fg:x="136" fg:w="6"/><text x="60.6944%" y="991.50">ti..</text></g><g><title>&lt;tiny_keccak::keccakf::KeccakF as tiny_keccak::Permutation&gt;::execute (6 samples, 2.67%)</title><rect x="60.4444%" y="965" width="2.6667%" height="15" fill="rgb(229,115,45)" fg:x="136" fg:w="6"/><text x="60.6944%" y="975.50">&lt;t..</text></g><g><title>tiny_keccak::keccakf::keccakf (6 samples, 2.67%)</title><rect x="60.4444%" y="949" width="2.6667%" height="15" fill="rgb(224,191,6)" fg:x="136" fg:w="6"/><text x="60.6944%" y="959.50">ti..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.44%)</title><rect x="62.6667%" y="933" width="0.4444%" height="15" fill="rgb(230,227,24)" fg:x="141" fg:w="1"/><text x="62.9167%" y="943.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint (1 samples, 0.44%)</title><rect x="63.1111%" y="1141" width="0.4444%" height="15" fill="rgb(228,80,19)" fg:x="142" fg:w="1"/><text x="63.3611%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="63.1111%" y="1125" width="0.4444%" height="15" fill="rgb(247,229,0)" fg:x="142" fg:w="1"/><text x="63.3611%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.44%)</title><rect x="63.1111%" y="1109" width="0.4444%" height="15" fill="rgb(237,194,15)" fg:x="142" fg:w="1"/><text x="63.3611%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.44%)</title><rect x="63.1111%" y="1093" width="0.4444%" height="15" fill="rgb(219,203,20)" fg:x="142" fg:w="1"/><text x="63.3611%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.44%)</title><rect x="63.1111%" y="1077" width="0.4444%" height="15" fill="rgb(234,128,8)" fg:x="142" fg:w="1"/><text x="63.3611%" y="1087.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1 samples, 0.44%)</title><rect x="63.1111%" y="1061" width="0.4444%" height="15" fill="rgb(248,202,8)" fg:x="142" fg:w="1"/><text x="63.3611%" y="1071.50"></text></g><g><title>revm::journaled_state::JournaledState::load_code (1 samples, 0.44%)</title><rect x="63.5556%" y="1141" width="0.4444%" height="15" fill="rgb(206,104,37)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1151.50"></text></g><g><title>revm::journaled_state::JournaledState::load_account (1 samples, 0.44%)</title><rect x="63.5556%" y="1125" width="0.4444%" height="15" fill="rgb(223,8,27)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1135.50"></text></g><g><title>&lt;blockstm::view::InstrumentedDB&lt;ExtDB&gt; as revm_primitives::db::Database&gt;::basic (1 samples, 0.44%)</title><rect x="63.5556%" y="1109" width="0.4444%" height="15" fill="rgb(216,217,28)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1119.50"></text></g><g><title>blockstm::view::ParallelState::read_cached_data (1 samples, 0.44%)</title><rect x="63.5556%" y="1093" width="0.4444%" height="15" fill="rgb(249,199,1)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1103.50"></text></g><g><title>blockstm::captured_reads::CapturedReads&lt;K,V&gt;::capture_read (1 samples, 0.44%)</title><rect x="63.5556%" y="1077" width="0.4444%" height="15" fill="rgb(240,85,17)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1087.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.44%)</title><rect x="63.5556%" y="1061" width="0.4444%" height="15" fill="rgb(206,108,45)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.44%)</title><rect x="63.5556%" y="1045" width="0.4444%" height="15" fill="rgb(245,210,41)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1055.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.44%)</title><rect x="63.5556%" y="1029" width="0.4444%" height="15" fill="rgb(206,13,37)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1039.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.44%)</title><rect x="63.5556%" y="1013" width="0.4444%" height="15" fill="rgb(250,61,18)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1023.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.44%)</title><rect x="63.5556%" y="997" width="0.4444%" height="15" fill="rgb(235,172,48)" fg:x="143" fg:w="1"/><text x="63.8056%" y="1007.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.44%)</title><rect x="63.5556%" y="981" width="0.4444%" height="15" fill="rgb(249,201,17)" fg:x="143" fg:w="1"/><text x="63.8056%" y="991.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.44%)</title><rect x="63.5556%" y="965" width="0.4444%" height="15" fill="rgb(219,208,6)" fg:x="143" fg:w="1"/><text x="63.8056%" y="975.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.44%)</title><rect x="63.5556%" y="949" width="0.4444%" height="15" fill="rgb(248,31,23)" fg:x="143" fg:w="1"/><text x="63.8056%" y="959.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::set_unchecked (1 samples, 0.44%)</title><rect x="68.0000%" y="1077" width="0.4444%" height="15" fill="rgb(245,15,42)" fg:x="153" fg:w="1"/><text x="68.2500%" y="1087.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace_unchecked (1 samples, 0.44%)</title><rect x="68.0000%" y="1061" width="0.4444%" height="15" fill="rgb(222,217,39)" fg:x="153" fg:w="1"/><text x="68.2500%" y="1071.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (1 samples, 0.44%)</title><rect x="68.0000%" y="1045" width="0.4444%" height="15" fill="rgb(210,219,27)" fg:x="153" fg:w="1"/><text x="68.2500%" y="1055.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (1 samples, 0.44%)</title><rect x="68.0000%" y="1029" width="0.4444%" height="15" fill="rgb(252,166,36)" fg:x="153" fg:w="1"/><text x="68.2500%" y="1039.50"></text></g><g><title>bitvec::access::BitAccess::write_bit (1 samples, 0.44%)</title><rect x="68.0000%" y="1013" width="0.4444%" height="15" fill="rgb(245,132,34)" fg:x="153" fg:w="1"/><text x="68.2500%" y="1023.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (87 samples, 38.67%)</title><rect x="31.1111%" y="1221" width="38.6667%" height="15" fill="rgb(236,54,3)" fg:x="70" fg:w="87"/><text x="31.3611%" y="1231.50">revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner</text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (15 samples, 6.67%)</title><rect x="63.1111%" y="1205" width="6.6667%" height="15" fill="rgb(241,173,43)" fg:x="142" fg:w="15"/><text x="63.3611%" y="1215.50">revm::han..</text></g><g><title>core::ops::function::Fn::call (15 samples, 6.67%)</title><rect x="63.1111%" y="1189" width="6.6667%" height="15" fill="rgb(215,190,9)" fg:x="142" fg:w="15"/><text x="63.3611%" y="1199.50">core::ops..</text></g><g><title>revm::handler::mainnet::execution::call (15 samples, 6.67%)</title><rect x="63.1111%" y="1173" width="6.6667%" height="15" fill="rgb(242,101,16)" fg:x="142" fg:w="15"/><text x="63.3611%" y="1183.50">revm::han..</text></g><g><title>revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (15 samples, 6.67%)</title><rect x="63.1111%" y="1157" width="6.6667%" height="15" fill="rgb(223,190,21)" fg:x="142" fg:w="15"/><text x="63.3611%" y="1167.50">revm::con..</text></g><g><title>revm_interpreter::interpreter::contract::Contract::new_with_context (13 samples, 5.78%)</title><rect x="64.0000%" y="1141" width="5.7778%" height="15" fill="rgb(215,228,25)" fg:x="144" fg:w="13"/><text x="64.2500%" y="1151.50">revm_in..</text></g><g><title>revm_interpreter::interpreter::contract::Contract::new (13 samples, 5.78%)</title><rect x="64.0000%" y="1125" width="5.7778%" height="15" fill="rgb(225,36,22)" fg:x="144" fg:w="13"/><text x="64.2500%" y="1135.50">revm_in..</text></g><g><title>revm_interpreter::interpreter::analysis::to_analysed (13 samples, 5.78%)</title><rect x="64.0000%" y="1109" width="5.7778%" height="15" fill="rgb(251,106,46)" fg:x="144" fg:w="13"/><text x="64.2500%" y="1119.50">revm_in..</text></g><g><title>revm_interpreter::interpreter::analysis::analyze (13 samples, 5.78%)</title><rect x="64.0000%" y="1093" width="5.7778%" height="15" fill="rgb(208,90,1)" fg:x="144" fg:w="13"/><text x="64.2500%" y="1103.50">revm_in..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 1.33%)</title><rect x="68.4444%" y="1077" width="1.3333%" height="15" fill="rgb(243,10,4)" fg:x="154" fg:w="3"/><text x="68.6944%" y="1087.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 1.33%)</title><rect x="69.7778%" y="1125" width="1.3333%" height="15" fill="rgb(212,137,27)" fg:x="157" fg:w="3"/><text x="70.0278%" y="1135.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (3 samples, 1.33%)</title><rect x="69.7778%" y="1109" width="1.3333%" height="15" fill="rgb(231,220,49)" fg:x="157" fg:w="3"/><text x="70.0278%" y="1119.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (3 samples, 1.33%)</title><rect x="69.7778%" y="1093" width="1.3333%" height="15" fill="rgb(237,96,20)" fg:x="157" fg:w="3"/><text x="70.0278%" y="1103.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (3 samples, 1.33%)</title><rect x="69.7778%" y="1077" width="1.3333%" height="15" fill="rgb(239,229,30)" fg:x="157" fg:w="3"/><text x="70.0278%" y="1087.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (3 samples, 1.33%)</title><rect x="69.7778%" y="1061" width="1.3333%" height="15" fill="rgb(219,65,33)" fg:x="157" fg:w="3"/><text x="70.0278%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 1.33%)</title><rect x="69.7778%" y="1045" width="1.3333%" height="15" fill="rgb(243,134,7)" fg:x="157" fg:w="3"/><text x="70.0278%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 1.33%)</title><rect x="69.7778%" y="1029" width="1.3333%" height="15" fill="rgb(216,177,54)" fg:x="157" fg:w="3"/><text x="70.0278%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 1.33%)</title><rect x="69.7778%" y="1013" width="1.3333%" height="15" fill="rgb(211,160,20)" fg:x="157" fg:w="3"/><text x="70.0278%" y="1023.50"></text></g><g><title>__rdl_alloc (3 samples, 1.33%)</title><rect x="69.7778%" y="997" width="1.3333%" height="15" fill="rgb(239,85,39)" fg:x="157" fg:w="3"/><text x="70.0278%" y="1007.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 1.33%)</title><rect x="69.7778%" y="981" width="1.3333%" height="15" fill="rgb(232,125,22)" fg:x="157" fg:w="3"/><text x="70.0278%" y="991.50"></text></g><g><title>std::sys::pal::unix::alloc::aligned_malloc (3 samples, 1.33%)</title><rect x="69.7778%" y="965" width="1.3333%" height="15" fill="rgb(244,57,34)" fg:x="157" fg:w="3"/><text x="70.0278%" y="975.50"></text></g><g><title>__posix_memalign (3 samples, 1.33%)</title><rect x="69.7778%" y="949" width="1.3333%" height="15" fill="rgb(214,203,32)" fg:x="157" fg:w="3"/><text x="70.0278%" y="959.50"></text></g><g><title>_mid_memalign.constprop.0 (3 samples, 1.33%)</title><rect x="69.7778%" y="933" width="1.3333%" height="15" fill="rgb(207,58,43)" fg:x="157" fg:w="3"/><text x="70.0278%" y="943.50"></text></g><g><title>_int_memalign (3 samples, 1.33%)</title><rect x="69.7778%" y="917" width="1.3333%" height="15" fill="rgb(215,193,15)" fg:x="157" fg:w="3"/><text x="70.0278%" y="927.50"></text></g><g><title>_int_malloc (3 samples, 1.33%)</title><rect x="69.7778%" y="901" width="1.3333%" height="15" fill="rgb(232,15,44)" fg:x="157" fg:w="3"/><text x="70.0278%" y="911.50"></text></g><g><title>malloc_consolidate (2 samples, 0.89%)</title><rect x="70.2222%" y="885" width="0.8889%" height="15" fill="rgb(212,3,48)" fg:x="158" fg:w="2"/><text x="70.4722%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_key_value (1 samples, 0.44%)</title><rect x="71.1111%" y="1093" width="0.4444%" height="15" fill="rgb(218,128,7)" fg:x="160" fg:w="1"/><text x="71.3611%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.44%)</title><rect x="71.1111%" y="1077" width="0.4444%" height="15" fill="rgb(226,216,39)" fg:x="160" fg:w="1"/><text x="71.3611%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1 samples, 0.44%)</title><rect x="71.1111%" y="1061" width="0.4444%" height="15" fill="rgb(243,47,51)" fg:x="160" fg:w="1"/><text x="71.3611%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1 samples, 0.44%)</title><rect x="71.1111%" y="1045" width="0.4444%" height="15" fill="rgb(241,183,40)" fg:x="160" fg:w="1"/><text x="71.3611%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (1 samples, 0.44%)</title><rect x="71.1111%" y="1029" width="0.4444%" height="15" fill="rgb(231,217,32)" fg:x="160" fg:w="1"/><text x="71.3611%" y="1039.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.44%)</title><rect x="71.1111%" y="1013" width="0.4444%" height="15" fill="rgb(229,61,38)" fg:x="160" fg:w="1"/><text x="71.3611%" y="1023.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (1 samples, 0.44%)</title><rect x="71.1111%" y="997" width="0.4444%" height="15" fill="rgb(225,210,5)" fg:x="160" fg:w="1"/><text x="71.3611%" y="1007.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (1 samples, 0.44%)</title><rect x="71.1111%" y="981" width="0.4444%" height="15" fill="rgb(231,79,45)" fg:x="160" fg:w="1"/><text x="71.3611%" y="991.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.44%)</title><rect x="71.1111%" y="965" width="0.4444%" height="15" fill="rgb(224,100,7)" fg:x="160" fg:w="1"/><text x="71.3611%" y="975.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.44%)</title><rect x="71.1111%" y="949" width="0.4444%" height="15" fill="rgb(241,198,18)" fg:x="160" fg:w="1"/><text x="71.3611%" y="959.50"></text></g><g><title>malloc_consolidate (1 samples, 0.44%)</title><rect x="72.0000%" y="853" width="0.4444%" height="15" fill="rgb(252,97,53)" fg:x="162" fg:w="1"/><text x="72.2500%" y="863.50"></text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedData&lt;K,V&gt;::set_base_value (7 samples, 3.11%)</title><rect x="69.7778%" y="1141" width="3.1111%" height="15" fill="rgb(220,88,7)" fg:x="157" fg:w="7"/><text x="70.0278%" y="1151.50">blo..</text></g><g><title>dashmap::mapref::entry::Entry&lt;K,V,S&gt;::or_default (4 samples, 1.78%)</title><rect x="71.1111%" y="1125" width="1.7778%" height="15" fill="rgb(213,176,14)" fg:x="160" fg:w="4"/><text x="71.3611%" y="1135.50">d..</text></g><g><title>dashmap::mapref::entry::VacantEntry&lt;K,V,S&gt;::insert (4 samples, 1.78%)</title><rect x="71.1111%" y="1109" width="1.7778%" height="15" fill="rgb(246,73,7)" fg:x="160" fg:w="4"/><text x="71.3611%" y="1119.50">d..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 1.33%)</title><rect x="71.5556%" y="1093" width="1.3333%" height="15" fill="rgb(245,64,36)" fg:x="161" fg:w="3"/><text x="71.8056%" y="1103.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 1.33%)</title><rect x="71.5556%" y="1077" width="1.3333%" height="15" fill="rgb(245,80,10)" fg:x="161" fg:w="3"/><text x="71.8056%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (3 samples, 1.33%)</title><rect x="71.5556%" y="1061" width="1.3333%" height="15" fill="rgb(232,107,50)" fg:x="161" fg:w="3"/><text x="71.8056%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 1.33%)</title><rect x="71.5556%" y="1045" width="1.3333%" height="15" fill="rgb(253,3,0)" fg:x="161" fg:w="3"/><text x="71.8056%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::reserve_rehash_inner (2 samples, 0.89%)</title><rect x="72.0000%" y="1029" width="0.8889%" height="15" fill="rgb(212,99,53)" fg:x="162" fg:w="2"/><text x="72.2500%" y="1039.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::resize_inner (2 samples, 0.89%)</title><rect x="72.0000%" y="1013" width="0.8889%" height="15" fill="rgb(249,111,54)" fg:x="162" fg:w="2"/><text x="72.2500%" y="1023.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_resize (2 samples, 0.89%)</title><rect x="72.0000%" y="997" width="0.8889%" height="15" fill="rgb(249,55,30)" fg:x="162" fg:w="2"/><text x="72.2500%" y="1007.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fallible_with_capacity (2 samples, 0.89%)</title><rect x="72.0000%" y="981" width="0.8889%" height="15" fill="rgb(237,47,42)" fg:x="162" fg:w="2"/><text x="72.2500%" y="991.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::new_uninitialized (2 samples, 0.89%)</title><rect x="72.0000%" y="965" width="0.8889%" height="15" fill="rgb(211,20,18)" fg:x="162" fg:w="2"/><text x="72.2500%" y="975.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (2 samples, 0.89%)</title><rect x="72.0000%" y="949" width="0.8889%" height="15" fill="rgb(231,203,46)" fg:x="162" fg:w="2"/><text x="72.2500%" y="959.50"></text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::allocate (2 samples, 0.89%)</title><rect x="72.0000%" y="933" width="0.8889%" height="15" fill="rgb(237,142,3)" fg:x="162" fg:w="2"/><text x="72.2500%" y="943.50"></text></g><g><title>allocator_api2::stable::alloc::global::Global::alloc_impl (2 samples, 0.89%)</title><rect x="72.0000%" y="917" width="0.8889%" height="15" fill="rgb(241,107,1)" fg:x="162" fg:w="2"/><text x="72.2500%" y="927.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.89%)</title><rect x="72.0000%" y="901" width="0.8889%" height="15" fill="rgb(229,83,13)" fg:x="162" fg:w="2"/><text x="72.2500%" y="911.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.89%)</title><rect x="72.0000%" y="885" width="0.8889%" height="15" fill="rgb(241,91,40)" fg:x="162" fg:w="2"/><text x="72.2500%" y="895.50"></text></g><g><title>_int_malloc (2 samples, 0.89%)</title><rect x="72.0000%" y="869" width="0.8889%" height="15" fill="rgb(225,3,45)" fg:x="162" fg:w="2"/><text x="72.2500%" y="879.50"></text></g><g><title>sysmalloc (1 samples, 0.44%)</title><rect x="72.4444%" y="853" width="0.4444%" height="15" fill="rgb(244,223,14)" fg:x="163" fg:w="1"/><text x="72.6944%" y="863.50"></text></g><g><title>__GI___mprotect (1 samples, 0.44%)</title><rect x="72.4444%" y="837" width="0.4444%" height="15" fill="rgb(224,124,37)" fg:x="163" fg:w="1"/><text x="72.6944%" y="847.50"></text></g><g><title>blockstm::captured_reads::CapturedReads&lt;K,V&gt;::capture_read (1 samples, 0.44%)</title><rect x="72.8889%" y="1125" width="0.4444%" height="15" fill="rgb(251,171,30)" fg:x="164" fg:w="1"/><text x="73.1389%" y="1135.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.44%)</title><rect x="72.8889%" y="1109" width="0.4444%" height="15" fill="rgb(236,46,54)" fg:x="164" fg:w="1"/><text x="73.1389%" y="1119.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.44%)</title><rect x="72.8889%" y="1093" width="0.4444%" height="15" fill="rgb(245,213,5)" fg:x="164" fg:w="1"/><text x="73.1389%" y="1103.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.44%)</title><rect x="72.8889%" y="1077" width="0.4444%" height="15" fill="rgb(230,144,27)" fg:x="164" fg:w="1"/><text x="73.1389%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.44%)</title><rect x="72.8889%" y="1061" width="0.4444%" height="15" fill="rgb(220,86,6)" fg:x="164" fg:w="1"/><text x="73.1389%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.44%)</title><rect x="72.8889%" y="1045" width="0.4444%" height="15" fill="rgb(240,20,13)" fg:x="164" fg:w="1"/><text x="73.1389%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.44%)</title><rect x="72.8889%" y="1029" width="0.4444%" height="15" fill="rgb(217,89,34)" fg:x="164" fg:w="1"/><text x="73.1389%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.44%)</title><rect x="72.8889%" y="1013" width="0.4444%" height="15" fill="rgb(229,13,5)" fg:x="164" fg:w="1"/><text x="73.1389%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.44%)</title><rect x="72.8889%" y="997" width="0.4444%" height="15" fill="rgb(244,67,35)" fg:x="164" fg:w="1"/><text x="73.1389%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.44%)</title><rect x="72.8889%" y="981" width="0.4444%" height="15" fill="rgb(221,40,2)" fg:x="164" fg:w="1"/><text x="73.1389%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.44%)</title><rect x="72.8889%" y="965" width="0.4444%" height="15" fill="rgb(237,157,21)" fg:x="164" fg:w="1"/><text x="73.1389%" y="975.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.44%)</title><rect x="72.8889%" y="949" width="0.4444%" height="15" fill="rgb(222,94,11)" fg:x="164" fg:w="1"/><text x="73.1389%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="72.8889%" y="933" width="0.4444%" height="15" fill="rgb(249,113,6)" fg:x="164" fg:w="1"/><text x="73.1389%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="72.8889%" y="917" width="0.4444%" height="15" fill="rgb(238,137,36)" fg:x="164" fg:w="1"/><text x="73.1389%" y="927.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="72.8889%" y="901" width="0.4444%" height="15" fill="rgb(210,102,26)" fg:x="164" fg:w="1"/><text x="73.1389%" y="911.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.44%)</title><rect x="72.8889%" y="885" width="0.4444%" height="15" fill="rgb(218,30,30)" fg:x="164" fg:w="1"/><text x="73.1389%" y="895.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::execute (113 samples, 50.22%)</title><rect x="23.5556%" y="1253" width="50.2222%" height="15" fill="rgb(214,67,26)" fg:x="53" fg:w="113"/><text x="23.8056%" y="1263.50">blockstm::executor::BlockExecutor&lt;DB&gt;::execute</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (96 samples, 42.67%)</title><rect x="31.1111%" y="1237" width="42.6667%" height="15" fill="rgb(251,9,53)" fg:x="70" fg:w="96"/><text x="31.3611%" y="1247.50">revm::evm::Evm&lt;EXT,DB&gt;::transact</text></g><g><title>revm::handler::handle_types::validation::ValidationHandler&lt;EXT,DB&gt;::tx_against_state (9 samples, 4.00%)</title><rect x="69.7778%" y="1221" width="4.0000%" height="15" fill="rgb(228,204,25)" fg:x="157" fg:w="9"/><text x="70.0278%" y="1231.50">revm..</text></g><g><title>core::ops::function::Fn::call (9 samples, 4.00%)</title><rect x="69.7778%" y="1205" width="4.0000%" height="15" fill="rgb(207,153,8)" fg:x="157" fg:w="9"/><text x="70.0278%" y="1215.50">core..</text></g><g><title>revm::handler::mainnet::validation::validate_tx_against_state (9 samples, 4.00%)</title><rect x="69.7778%" y="1189" width="4.0000%" height="15" fill="rgb(242,9,16)" fg:x="157" fg:w="9"/><text x="70.0278%" y="1199.50">revm..</text></g><g><title>revm::journaled_state::JournaledState::load_account (9 samples, 4.00%)</title><rect x="69.7778%" y="1173" width="4.0000%" height="15" fill="rgb(217,211,10)" fg:x="157" fg:w="9"/><text x="70.0278%" y="1183.50">revm..</text></g><g><title>&lt;blockstm::view::InstrumentedDB&lt;ExtDB&gt; as revm_primitives::db::Database&gt;::basic (9 samples, 4.00%)</title><rect x="69.7778%" y="1157" width="4.0000%" height="15" fill="rgb(219,228,52)" fg:x="157" fg:w="9"/><text x="70.0278%" y="1167.50">&lt;blo..</text></g><g><title>blockstm::view::ParallelState::read_cached_data (2 samples, 0.89%)</title><rect x="72.8889%" y="1141" width="0.8889%" height="15" fill="rgb(231,92,29)" fg:x="164" fg:w="2"/><text x="73.1389%" y="1151.50"></text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedData&lt;K,V&gt;::fetch_data (1 samples, 0.44%)</title><rect x="73.3333%" y="1125" width="0.4444%" height="15" fill="rgb(232,8,23)" fg:x="165" fg:w="1"/><text x="73.5833%" y="1135.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (1 samples, 0.44%)</title><rect x="73.3333%" y="1109" width="0.4444%" height="15" fill="rgb(216,211,34)" fg:x="165" fg:w="1"/><text x="73.5833%" y="1119.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (1 samples, 0.44%)</title><rect x="73.3333%" y="1093" width="0.4444%" height="15" fill="rgb(236,151,0)" fg:x="165" fg:w="1"/><text x="73.5833%" y="1103.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.44%)</title><rect x="73.3333%" y="1077" width="0.4444%" height="15" fill="rgb(209,168,3)" fg:x="165" fg:w="1"/><text x="73.5833%" y="1087.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.44%)</title><rect x="73.3333%" y="1061" width="0.4444%" height="15" fill="rgb(208,129,28)" fg:x="165" fg:w="1"/><text x="73.5833%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.44%)</title><rect x="73.3333%" y="1045" width="0.4444%" height="15" fill="rgb(229,78,22)" fg:x="165" fg:w="1"/><text x="73.5833%" y="1055.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.44%)</title><rect x="73.3333%" y="1029" width="0.4444%" height="15" fill="rgb(228,187,13)" fg:x="165" fg:w="1"/><text x="73.5833%" y="1039.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.44%)</title><rect x="73.3333%" y="1013" width="0.4444%" height="15" fill="rgb(240,119,24)" fg:x="165" fg:w="1"/><text x="73.5833%" y="1023.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.44%)</title><rect x="73.3333%" y="997" width="0.4444%" height="15" fill="rgb(209,194,42)" fg:x="165" fg:w="1"/><text x="73.5833%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="73.7778%" y="1205" width="0.4444%" height="15" fill="rgb(247,200,46)" fg:x="166" fg:w="1"/><text x="74.0278%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.44%)</title><rect x="73.7778%" y="1189" width="0.4444%" height="15" fill="rgb(218,76,16)" fg:x="166" fg:w="1"/><text x="74.0278%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.44%)</title><rect x="73.7778%" y="1173" width="0.4444%" height="15" fill="rgb(225,21,48)" fg:x="166" fg:w="1"/><text x="74.0278%" y="1183.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.44%)</title><rect x="73.7778%" y="1157" width="0.4444%" height="15" fill="rgb(239,223,50)" fg:x="166" fg:w="1"/><text x="74.0278%" y="1167.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.44%)</title><rect x="73.7778%" y="1141" width="0.4444%" height="15" fill="rgb(244,45,21)" fg:x="166" fg:w="1"/><text x="74.0278%" y="1151.50"></text></g><g><title>_int_malloc (1 samples, 0.44%)</title><rect x="73.7778%" y="1125" width="0.4444%" height="15" fill="rgb(232,33,43)" fg:x="166" fg:w="1"/><text x="74.0278%" y="1135.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.44%)</title><rect x="73.7778%" y="1109" width="0.4444%" height="15" fill="rgb(209,8,3)" fg:x="166" fg:w="1"/><text x="74.0278%" y="1119.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::execute::{{closure}} (3 samples, 1.33%)</title><rect x="73.7778%" y="1221" width="1.3333%" height="15" fill="rgb(214,25,53)" fg:x="166" fg:w="3"/><text x="74.0278%" y="1231.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.89%)</title><rect x="74.2222%" y="1205" width="0.8889%" height="15" fill="rgb(254,186,54)" fg:x="167" fg:w="2"/><text x="74.4722%" y="1215.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.89%)</title><rect x="74.2222%" y="1189" width="0.8889%" height="15" fill="rgb(208,174,49)" fg:x="167" fg:w="2"/><text x="74.4722%" y="1199.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.44%)</title><rect x="74.6667%" y="1173" width="0.4444%" height="15" fill="rgb(233,191,51)" fg:x="168" fg:w="1"/><text x="74.9167%" y="1183.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.44%)</title><rect x="74.6667%" y="1157" width="0.4444%" height="15" fill="rgb(222,134,10)" fg:x="168" fg:w="1"/><text x="74.9167%" y="1167.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.44%)</title><rect x="74.6667%" y="1141" width="0.4444%" height="15" fill="rgb(230,226,20)" fg:x="168" fg:w="1"/><text x="74.9167%" y="1151.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.44%)</title><rect x="74.6667%" y="1125" width="0.4444%" height="15" fill="rgb(251,111,25)" fg:x="168" fg:w="1"/><text x="74.9167%" y="1135.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="74.6667%" y="1109" width="0.4444%" height="15" fill="rgb(224,40,46)" fg:x="168" fg:w="1"/><text x="74.9167%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="74.6667%" y="1093" width="0.4444%" height="15" fill="rgb(236,108,47)" fg:x="168" fg:w="1"/><text x="74.9167%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="74.6667%" y="1077" width="0.4444%" height="15" fill="rgb(234,93,0)" fg:x="168" fg:w="1"/><text x="74.9167%" y="1087.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.44%)</title><rect x="74.6667%" y="1061" width="0.4444%" height="15" fill="rgb(224,213,32)" fg:x="168" fg:w="1"/><text x="74.9167%" y="1071.50"></text></g><g><title>blockstm::txn_last_input_output::TxnLastInputOutput::modified_keys (1 samples, 0.44%)</title><rect x="75.1111%" y="1221" width="0.4444%" height="15" fill="rgb(251,11,48)" fg:x="169" fg:w="1"/><text x="75.3611%" y="1231.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.44%)</title><rect x="75.1111%" y="1205" width="0.4444%" height="15" fill="rgb(236,173,5)" fg:x="169" fg:w="1"/><text x="75.3611%" y="1215.50"></text></g><g><title>std::sys::pal::unix::locks::futex_rwlock::RwLock::read (1 samples, 0.44%)</title><rect x="75.1111%" y="1189" width="0.4444%" height="15" fill="rgb(230,95,12)" fg:x="169" fg:w="1"/><text x="75.3611%" y="1199.50"></text></g><g><title>std::sys::pal::unix::locks::futex_rwlock::is_read_lockable (1 samples, 0.44%)</title><rect x="75.1111%" y="1173" width="0.4444%" height="15" fill="rgb(232,209,1)" fg:x="169" fg:w="1"/><text x="75.3611%" y="1183.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::build (1 samples, 0.44%)</title><rect x="75.5556%" y="1221" width="0.4444%" height="15" fill="rgb(232,6,1)" fg:x="170" fg:w="1"/><text x="75.8056%" y="1231.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.44%)</title><rect x="75.5556%" y="1205" width="0.4444%" height="15" fill="rgb(210,224,50)" fg:x="170" fg:w="1"/><text x="75.8056%" y="1215.50"></text></g><g><title>revm::builder::EvmBuilder&lt;BuilderStage,EXT,DB&gt;::modify_tx_env (1 samples, 0.44%)</title><rect x="76.0000%" y="1221" width="0.4444%" height="15" fill="rgb(228,127,35)" fg:x="171" fg:w="1"/><text x="76.2500%" y="1231.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.44%)</title><rect x="76.0000%" y="1205" width="0.4444%" height="15" fill="rgb(245,102,45)" fg:x="171" fg:w="1"/><text x="76.2500%" y="1215.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call (1 samples, 0.44%)</title><rect x="76.4444%" y="1157" width="0.4444%" height="15" fill="rgb(214,1,49)" fg:x="172" fg:w="1"/><text x="76.6944%" y="1167.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.44%)</title><rect x="76.4444%" y="1141" width="0.4444%" height="15" fill="rgb(226,163,40)" fg:x="172" fg:w="1"/><text x="76.6944%" y="1151.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.44%)</title><rect x="76.4444%" y="1125" width="0.4444%" height="15" fill="rgb(239,212,28)" fg:x="172" fg:w="1"/><text x="76.6944%" y="1135.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.44%)</title><rect x="76.4444%" y="1109" width="0.4444%" height="15" fill="rgb(220,20,13)" fg:x="172" fg:w="1"/><text x="76.6944%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="76.4444%" y="1093" width="0.4444%" height="15" fill="rgb(210,164,35)" fg:x="172" fg:w="1"/><text x="76.6944%" y="1103.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="76.4444%" y="1077" width="0.4444%" height="15" fill="rgb(248,109,41)" fg:x="172" fg:w="1"/><text x="76.6944%" y="1087.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="76.4444%" y="1061" width="0.4444%" height="15" fill="rgb(238,23,50)" fg:x="172" fg:w="1"/><text x="76.6944%" y="1071.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.44%)</title><rect x="76.4444%" y="1045" width="0.4444%" height="15" fill="rgb(211,48,49)" fg:x="172" fg:w="1"/><text x="76.6944%" y="1055.50"></text></g><g><title>revm::handler::handle_types::execution::ExecutionHandler&lt;EXT,DB&gt;::call_return (1 samples, 0.44%)</title><rect x="76.8889%" y="1157" width="0.4444%" height="15" fill="rgb(223,36,21)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1167.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.44%)</title><rect x="76.8889%" y="1141" width="0.4444%" height="15" fill="rgb(207,123,46)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1151.50"></text></g><g><title>revm::handler::mainnet::execution::call_return (1 samples, 0.44%)</title><rect x="76.8889%" y="1125" width="0.4444%" height="15" fill="rgb(240,218,32)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm::frame::CallFrame&gt;&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="1109" width="0.4444%" height="15" fill="rgb(252,5,43)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::frame::CallFrame&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="1093" width="0.4444%" height="15" fill="rgb(252,84,19)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::frame::FrameData&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="1077" width="0.4444%" height="15" fill="rgb(243,152,39)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::Interpreter&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="1061" width="0.4444%" height="15" fill="rgb(234,160,15)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;revm_interpreter::interpreter::contract::Contract&gt;&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="1045" width="0.4444%" height="15" fill="rgb(237,34,20)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm_interpreter::interpreter::contract::Contract&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="1029" width="0.4444%" height="15" fill="rgb(229,97,13)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloy_primitives::bytes_::Bytes&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="1013" width="0.4444%" height="15" fill="rgb(234,71,50)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="997" width="0.4444%" height="15" fill="rgb(253,155,4)" fg:x="173" fg:w="1"/><text x="77.1389%" y="1007.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="76.8889%" y="981" width="0.4444%" height="15" fill="rgb(222,185,37)" fg:x="173" fg:w="1"/><text x="77.1389%" y="991.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.44%)</title><rect x="76.8889%" y="965" width="0.4444%" height="15" fill="rgb(251,177,13)" fg:x="173" fg:w="1"/><text x="77.1389%" y="975.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (1 samples, 0.44%)</title><rect x="76.8889%" y="949" width="0.4444%" height="15" fill="rgb(250,179,40)" fg:x="173" fg:w="1"/><text x="77.1389%" y="959.50"></text></g><g><title>bytes::bytes::shared_drop::{{closure}} (1 samples, 0.44%)</title><rect x="76.8889%" y="933" width="0.4444%" height="15" fill="rgb(242,44,2)" fg:x="173" fg:w="1"/><text x="77.1389%" y="943.50"></text></g><g><title>bytes::bytes::release_shared (1 samples, 0.44%)</title><rect x="76.8889%" y="917" width="0.4444%" height="15" fill="rgb(216,177,13)" fg:x="173" fg:w="1"/><text x="77.1389%" y="927.50"></text></g><g><title>core::mem::drop (1 samples, 0.44%)</title><rect x="76.8889%" y="901" width="0.4444%" height="15" fill="rgb(216,106,43)" fg:x="173" fg:w="1"/><text x="77.1389%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes::Shared&gt;&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="885" width="0.4444%" height="15" fill="rgb(216,183,2)" fg:x="173" fg:w="1"/><text x="77.1389%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Shared&gt; (1 samples, 0.44%)</title><rect x="76.8889%" y="869" width="0.4444%" height="15" fill="rgb(249,75,3)" fg:x="173" fg:w="1"/><text x="77.1389%" y="879.50"></text></g><g><title>&lt;bytes::bytes::Shared as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="76.8889%" y="853" width="0.4444%" height="15" fill="rgb(219,67,39)" fg:x="173" fg:w="1"/><text x="77.1389%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.44%)</title><rect x="76.8889%" y="837" width="0.4444%" height="15" fill="rgb(253,228,2)" fg:x="173" fg:w="1"/><text x="77.1389%" y="847.50"></text></g><g><title>__free (1 samples, 0.44%)</title><rect x="76.8889%" y="821" width="0.4444%" height="15" fill="rgb(235,138,27)" fg:x="173" fg:w="1"/><text x="77.1389%" y="831.50"></text></g><g><title>&lt;revm_interpreter::instruction_result::InstructionResult as core::cmp::PartialEq&gt;::eq (1 samples, 0.44%)</title><rect x="77.3333%" y="1141" width="0.4444%" height="15" fill="rgb(236,97,51)" fg:x="174" fg:w="1"/><text x="77.5833%" y="1151.50"></text></g><g><title>revm_interpreter::instructions::arithmetic::exp (1 samples, 0.44%)</title><rect x="77.7778%" y="1109" width="0.4444%" height="15" fill="rgb(240,80,30)" fg:x="175" fg:w="1"/><text x="78.0278%" y="1119.50"></text></g><g><title>revm_interpreter::gas::calc::exp_cost (1 samples, 0.44%)</title><rect x="77.7778%" y="1093" width="0.4444%" height="15" fill="rgb(230,178,19)" fg:x="175" fg:w="1"/><text x="78.0278%" y="1103.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::checked_add (1 samples, 0.44%)</title><rect x="77.7778%" y="1077" width="0.4444%" height="15" fill="rgb(210,190,27)" fg:x="175" fg:w="1"/><text x="78.0278%" y="1087.50"></text></g><g><title>ruint::add::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_add (1 samples, 0.44%)</title><rect x="77.7778%" y="1061" width="0.4444%" height="15" fill="rgb(222,107,31)" fg:x="175" fg:w="1"/><text x="78.0278%" y="1071.50"></text></g><g><title>revm_interpreter::instructions::arithmetic::wrapping_add (1 samples, 0.44%)</title><rect x="78.2222%" y="1109" width="0.4444%" height="15" fill="rgb(216,127,34)" fg:x="176" fg:w="1"/><text x="78.4722%" y="1119.50"></text></g><g><title>revm_interpreter::instructions::bitwise::bitand (1 samples, 0.44%)</title><rect x="78.6667%" y="1109" width="0.4444%" height="15" fill="rgb(234,116,52)" fg:x="177" fg:w="1"/><text x="78.9167%" y="1119.50"></text></g><g><title>revm_interpreter::instructions::bitwise::lt (1 samples, 0.44%)</title><rect x="79.1111%" y="1109" width="0.4444%" height="15" fill="rgb(222,124,15)" fg:x="178" fg:w="1"/><text x="79.3611%" y="1119.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (1 samples, 0.44%)</title><rect x="79.1111%" y="1093" width="0.4444%" height="15" fill="rgb(231,179,28)" fg:x="178" fg:w="1"/><text x="79.3611%" y="1103.50"></text></g><g><title>revm_interpreter::instructions::bitwise::shr (1 samples, 0.44%)</title><rect x="79.5556%" y="1109" width="0.4444%" height="15" fill="rgb(226,93,45)" fg:x="179" fg:w="1"/><text x="79.8056%" y="1119.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::ShrAssign&lt;usize&gt; for ruint::Uint&lt;_,_&gt;&gt;::shr_assign (1 samples, 0.44%)</title><rect x="79.5556%" y="1093" width="0.4444%" height="15" fill="rgb(215,8,51)" fg:x="179" fg:w="1"/><text x="79.8056%" y="1103.50"></text></g><g><title>ruint::bits::&lt;impl core::ops::bit::Shr&lt;usize&gt; for ruint::Uint&lt;_,_&gt;&gt;::shr (1 samples, 0.44%)</title><rect x="79.5556%" y="1077" width="0.4444%" height="15" fill="rgb(223,106,5)" fg:x="179" fg:w="1"/><text x="79.8056%" y="1087.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::wrapping_shr (1 samples, 0.44%)</title><rect x="79.5556%" y="1061" width="0.4444%" height="15" fill="rgb(250,191,5)" fg:x="179" fg:w="1"/><text x="79.8056%" y="1071.50"></text></g><g><title>ruint::bits::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::overflowing_shr (1 samples, 0.44%)</title><rect x="79.5556%" y="1045" width="0.4444%" height="15" fill="rgb(242,132,44)" fg:x="179" fg:w="1"/><text x="79.8056%" y="1055.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.44%)</title><rect x="79.5556%" y="1029" width="0.4444%" height="15" fill="rgb(251,152,29)" fg:x="179" fg:w="1"/><text x="79.8056%" y="1039.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.44%)</title><rect x="79.5556%" y="1013" width="0.4444%" height="15" fill="rgb(218,179,5)" fg:x="179" fg:w="1"/><text x="79.8056%" y="1023.50"></text></g><g><title>revm_interpreter::instructions::control::jump (1 samples, 0.44%)</title><rect x="80.0000%" y="1109" width="0.4444%" height="15" fill="rgb(227,67,19)" fg:x="180" fg:w="1"/><text x="80.2500%" y="1119.50"></text></g><g><title>revm_interpreter::instructions::control::jump_inner (1 samples, 0.44%)</title><rect x="80.0000%" y="1093" width="0.4444%" height="15" fill="rgb(233,119,31)" fg:x="180" fg:w="1"/><text x="80.2500%" y="1103.50"></text></g><g><title>revm_interpreter::interpreter::contract::Contract::is_valid_jump (1 samples, 0.44%)</title><rect x="80.0000%" y="1077" width="0.4444%" height="15" fill="rgb(241,120,22)" fg:x="180" fg:w="1"/><text x="80.2500%" y="1087.50"></text></g><g><title>revm_primitives::bytecode::JumpMap::is_valid (1 samples, 0.44%)</title><rect x="80.0000%" y="1061" width="0.4444%" height="15" fill="rgb(224,102,30)" fg:x="180" fg:w="1"/><text x="80.2500%" y="1071.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::len (1 samples, 0.44%)</title><rect x="80.0000%" y="1045" width="0.4444%" height="15" fill="rgb(210,164,37)" fg:x="180" fg:w="1"/><text x="80.2500%" y="1055.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::len (1 samples, 0.44%)</title><rect x="80.0000%" y="1029" width="0.4444%" height="15" fill="rgb(226,191,16)" fg:x="180" fg:w="1"/><text x="80.2500%" y="1039.50"></text></g><g><title>revm_interpreter::instructions::control::ret (2 samples, 0.89%)</title><rect x="80.4444%" y="1109" width="0.8889%" height="15" fill="rgb(214,40,45)" fg:x="181" fg:w="2"/><text x="80.6944%" y="1119.50"></text></g><g><title>revm_interpreter::instructions::control::return_inner (2 samples, 0.89%)</title><rect x="80.4444%" y="1093" width="0.8889%" height="15" fill="rgb(244,29,26)" fg:x="181" fg:w="2"/><text x="80.6944%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.44%)</title><rect x="80.8889%" y="1077" width="0.4444%" height="15" fill="rgb(216,16,5)" fg:x="182" fg:w="1"/><text x="81.1389%" y="1087.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.44%)</title><rect x="80.8889%" y="1061" width="0.4444%" height="15" fill="rgb(249,76,35)" fg:x="182" fg:w="1"/><text x="81.1389%" y="1071.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.44%)</title><rect x="80.8889%" y="1045" width="0.4444%" height="15" fill="rgb(207,11,44)" fg:x="182" fg:w="1"/><text x="81.1389%" y="1055.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.44%)</title><rect x="80.8889%" y="1029" width="0.4444%" height="15" fill="rgb(228,190,49)" fg:x="182" fg:w="1"/><text x="81.1389%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="80.8889%" y="1013" width="0.4444%" height="15" fill="rgb(214,173,12)" fg:x="182" fg:w="1"/><text x="81.1389%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.44%)</title><rect x="80.8889%" y="997" width="0.4444%" height="15" fill="rgb(218,26,35)" fg:x="182" fg:w="1"/><text x="81.1389%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.44%)</title><rect x="80.8889%" y="981" width="0.4444%" height="15" fill="rgb(220,200,19)" fg:x="182" fg:w="1"/><text x="81.1389%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.44%)</title><rect x="80.8889%" y="965" width="0.4444%" height="15" fill="rgb(239,95,49)" fg:x="182" fg:w="1"/><text x="81.1389%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.44%)</title><rect x="80.8889%" y="949" width="0.4444%" height="15" fill="rgb(235,85,53)" fg:x="182" fg:w="1"/><text x="81.1389%" y="959.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.44%)</title><rect x="80.8889%" y="933" width="0.4444%" height="15" fill="rgb(233,133,31)" fg:x="182" fg:w="1"/><text x="81.1389%" y="943.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.44%)</title><rect x="80.8889%" y="917" width="0.4444%" height="15" fill="rgb(218,25,20)" fg:x="182" fg:w="1"/><text x="81.1389%" y="927.50"></text></g><g><title>revm_interpreter::instructions::memory::mstore (1 samples, 0.44%)</title><rect x="81.3333%" y="1109" width="0.4444%" height="15" fill="rgb(252,210,38)" fg:x="183" fg:w="1"/><text x="81.5833%" y="1119.50"></text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::set_u256 (1 samples, 0.44%)</title><rect x="81.3333%" y="1093" width="0.4444%" height="15" fill="rgb(242,134,21)" fg:x="183" fg:w="1"/><text x="81.5833%" y="1103.50"></text></g><g><title>ruint::bytes::&lt;impl ruint::Uint&lt;_,_&gt;&gt;::to_be_bytes (1 samples, 0.44%)</title><rect x="81.3333%" y="1077" width="0.4444%" height="15" fill="rgb(213,28,48)" fg:x="183" fg:w="1"/><text x="81.5833%" y="1087.50"></text></g><g><title>revm_interpreter::instructions::stack::dup (1 samples, 0.44%)</title><rect x="81.7778%" y="1109" width="0.4444%" height="15" fill="rgb(250,196,2)" fg:x="184" fg:w="1"/><text x="82.0278%" y="1119.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::dup (1 samples, 0.44%)</title><rect x="81.7778%" y="1093" width="0.4444%" height="15" fill="rgb(227,5,17)" fg:x="184" fg:w="1"/><text x="82.0278%" y="1103.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.44%)</title><rect x="81.7778%" y="1077" width="0.4444%" height="15" fill="rgb(221,226,24)" fg:x="184" fg:w="1"/><text x="82.0278%" y="1087.50"></text></g><g><title>revm_interpreter::instructions::stack::push (2 samples, 0.89%)</title><rect x="82.2222%" y="1109" width="0.8889%" height="15" fill="rgb(211,5,48)" fg:x="185" fg:w="2"/><text x="82.4722%" y="1119.50"></text></g><g><title>revm_interpreter::gas::Gas::record_cost (2 samples, 0.89%)</title><rect x="82.2222%" y="1093" width="0.8889%" height="15" fill="rgb(219,150,6)" fg:x="185" fg:w="2"/><text x="82.4722%" y="1103.50"></text></g><g><title>core::ops::function::Fn::call (13 samples, 5.78%)</title><rect x="77.7778%" y="1125" width="5.7778%" height="15" fill="rgb(251,46,16)" fg:x="175" fg:w="13"/><text x="78.0278%" y="1135.50">core::o..</text></g><g><title>revm_interpreter::instructions::stack::swap (1 samples, 0.44%)</title><rect x="83.1111%" y="1109" width="0.4444%" height="15" fill="rgb(220,204,40)" fg:x="187" fg:w="1"/><text x="83.3611%" y="1119.50"></text></g><g><title>revm_interpreter::interpreter::stack::Stack::swap (1 samples, 0.44%)</title><rect x="83.1111%" y="1093" width="0.4444%" height="15" fill="rgb(211,85,2)" fg:x="187" fg:w="1"/><text x="83.3611%" y="1103.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (1 samples, 0.44%)</title><rect x="83.1111%" y="1077" width="0.4444%" height="15" fill="rgb(229,17,7)" fg:x="187" fg:w="1"/><text x="83.3611%" y="1087.50"></text></g><g><title>core::ptr::swap (1 samples, 0.44%)</title><rect x="83.1111%" y="1061" width="0.4444%" height="15" fill="rgb(239,72,28)" fg:x="187" fg:w="1"/><text x="83.3611%" y="1071.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.44%)</title><rect x="83.1111%" y="1045" width="0.4444%" height="15" fill="rgb(230,47,54)" fg:x="187" fg:w="1"/><text x="83.3611%" y="1055.50"></text></g><g><title>revm_interpreter::interpreter::Interpreter::run (15 samples, 6.67%)</title><rect x="77.3333%" y="1157" width="6.6667%" height="15" fill="rgb(214,50,8)" fg:x="174" fg:w="15"/><text x="77.5833%" y="1167.50">revm_inte..</text></g><g><title>revm_interpreter::interpreter::Interpreter::step (14 samples, 6.22%)</title><rect x="77.7778%" y="1141" width="6.2222%" height="15" fill="rgb(216,198,43)" fg:x="175" fg:w="14"/><text x="78.0278%" y="1151.50">revm_int..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.44%)</title><rect x="83.5556%" y="1125" width="0.4444%" height="15" fill="rgb(234,20,35)" fg:x="188" fg:w="1"/><text x="83.8056%" y="1135.50"></text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::start_the_loop (18 samples, 8.00%)</title><rect x="76.4444%" y="1189" width="8.0000%" height="15" fill="rgb(254,45,19)" fg:x="172" fg:w="18"/><text x="76.6944%" y="1199.50">revm::evm::..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::run_the_loop (18 samples, 8.00%)</title><rect x="76.4444%" y="1173" width="8.0000%" height="15" fill="rgb(219,14,44)" fg:x="172" fg:w="18"/><text x="76.6944%" y="1183.50">revm::evm::..</text></g><g><title>revm_interpreter::interpreter::shared_memory::SharedMemory::new_context (1 samples, 0.44%)</title><rect x="84.0000%" y="1157" width="0.4444%" height="15" fill="rgb(217,220,26)" fg:x="189" fg:w="1"/><text x="84.2500%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.44%)</title><rect x="84.0000%" y="1141" width="0.4444%" height="15" fill="rgb(213,158,28)" fg:x="189" fg:w="1"/><text x="84.2500%" y="1151.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.44%)</title><rect x="84.4444%" y="1141" width="0.4444%" height="15" fill="rgb(252,51,52)" fg:x="190" fg:w="1"/><text x="84.6944%" y="1151.50"></text></g><g><title>&lt;revm::context::context_precompiles::ContextPrecompiles&lt;DB&gt; as core::convert::From&lt;revm_precompile::Precompiles&gt;&gt;::from (1 samples, 0.44%)</title><rect x="84.4444%" y="1125" width="0.4444%" height="15" fill="rgb(246,89,16)" fg:x="190" fg:w="1"/><text x="84.6944%" y="1135.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.44%)</title><rect x="84.4444%" y="1109" width="0.4444%" height="15" fill="rgb(216,158,49)" fg:x="190" fg:w="1"/><text x="84.6944%" y="1119.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.44%)</title><rect x="84.4444%" y="1093" width="0.4444%" height="15" fill="rgb(236,107,19)" fg:x="190" fg:w="1"/><text x="84.6944%" y="1103.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::worker_loop (26 samples, 11.56%)</title><rect x="73.7778%" y="1253" width="11.5556%" height="15" fill="rgb(228,185,30)" fg:x="166" fg:w="26"/><text x="74.0278%" y="1263.50">blockstm::executo..</text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::execute (26 samples, 11.56%)</title><rect x="73.7778%" y="1237" width="11.5556%" height="15" fill="rgb(246,134,8)" fg:x="166" fg:w="26"/><text x="74.0278%" y="1247.50">blockstm::executo..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact (20 samples, 8.89%)</title><rect x="76.4444%" y="1221" width="8.8889%" height="15" fill="rgb(214,143,50)" fg:x="172" fg:w="20"/><text x="76.6944%" y="1231.50">revm::evm::Ev..</text></g><g><title>revm::evm::Evm&lt;EXT,DB&gt;::transact_preverified_inner (20 samples, 8.89%)</title><rect x="76.4444%" y="1205" width="8.8889%" height="15" fill="rgb(228,75,8)" fg:x="172" fg:w="20"/><text x="76.6944%" y="1215.50">revm::evm::Ev..</text></g><g><title>revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;EXT,DB&gt;::load_precompiles (2 samples, 0.89%)</title><rect x="84.4444%" y="1189" width="0.8889%" height="15" fill="rgb(207,175,4)" fg:x="190" fg:w="2"/><text x="84.6944%" y="1199.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.89%)</title><rect x="84.4444%" y="1173" width="0.8889%" height="15" fill="rgb(205,108,24)" fg:x="190" fg:w="2"/><text x="84.6944%" y="1183.50"></text></g><g><title>revm::handler::mainnet::pre_execution::load_precompiles (2 samples, 0.89%)</title><rect x="84.4444%" y="1157" width="0.8889%" height="15" fill="rgb(244,120,49)" fg:x="190" fg:w="2"/><text x="84.6944%" y="1167.50"></text></g><g><title>revm_precompile::Precompiles::new (1 samples, 0.44%)</title><rect x="84.8889%" y="1141" width="0.4444%" height="15" fill="rgb(223,47,38)" fg:x="191" fg:w="1"/><text x="85.1389%" y="1151.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::update_on_validation (1 samples, 0.44%)</title><rect x="85.3333%" y="661" width="0.4444%" height="15" fill="rgb(229,179,11)" fg:x="192" fg:w="1"/><text x="85.5833%" y="671.50"></text></g><g><title>blockstm::scheduler::Scheduler::finish_validation (1 samples, 0.44%)</title><rect x="85.3333%" y="645" width="0.4444%" height="15" fill="rgb(231,122,1)" fg:x="192" fg:w="1"/><text x="85.5833%" y="655.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (1 samples, 0.44%)</title><rect x="85.3333%" y="629" width="0.4444%" height="15" fill="rgb(245,119,9)" fg:x="192" fg:w="1"/><text x="85.5833%" y="639.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (1 samples, 0.44%)</title><rect x="85.3333%" y="613" width="0.4444%" height="15" fill="rgb(241,163,25)" fg:x="192" fg:w="1"/><text x="85.5833%" y="623.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::validate (1 samples, 0.44%)</title><rect x="85.7778%" y="661" width="0.4444%" height="15" fill="rgb(217,214,3)" fg:x="193" fg:w="1"/><text x="86.0278%" y="671.50"></text></g><g><title>blockstm::captured_reads::CapturedReads&lt;K,V&gt;::validate_reads (1 samples, 0.44%)</title><rect x="85.7778%" y="645" width="0.4444%" height="15" fill="rgb(240,86,28)" fg:x="193" fg:w="1"/><text x="86.0278%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.44%)</title><rect x="85.7778%" y="629" width="0.4444%" height="15" fill="rgb(215,47,9)" fg:x="193" fg:w="1"/><text x="86.0278%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.44%)</title><rect x="85.7778%" y="613" width="0.4444%" height="15" fill="rgb(252,25,45)" fg:x="193" fg:w="1"/><text x="86.0278%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (1 samples, 0.44%)</title><rect x="85.7778%" y="597" width="0.4444%" height="15" fill="rgb(251,164,9)" fg:x="193" fg:w="1"/><text x="86.0278%" y="607.50"></text></g><g><title>blockstm::captured_reads::CapturedReads&lt;K,V&gt;::validate_reads::{{closure}} (1 samples, 0.44%)</title><rect x="85.7778%" y="581" width="0.4444%" height="15" fill="rgb(233,194,0)" fg:x="193" fg:w="1"/><text x="86.0278%" y="591.50"></text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedData&lt;K,V&gt;::fetch_data (1 samples, 0.44%)</title><rect x="85.7778%" y="565" width="0.4444%" height="15" fill="rgb(249,111,24)" fg:x="193" fg:w="1"/><text x="86.0278%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.44%)</title><rect x="85.7778%" y="549" width="0.4444%" height="15" fill="rgb(250,223,3)" fg:x="193" fg:w="1"/><text x="86.0278%" y="559.50"></text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedData&lt;K,V&gt;::fetch_data::{{closure}} (1 samples, 0.44%)</title><rect x="85.7778%" y="533" width="0.4444%" height="15" fill="rgb(236,178,37)" fg:x="193" fg:w="1"/><text x="86.0278%" y="543.50"></text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedValue&lt;V&gt;::read (1 samples, 0.44%)</title><rect x="85.7778%" y="517" width="0.4444%" height="15" fill="rgb(241,158,50)" fg:x="193" fg:w="1"/><text x="86.0278%" y="527.50"></text></g><g><title>&lt;blockstm::view::ReadValue as core::clone::Clone&gt;::clone (1 samples, 0.44%)</title><rect x="85.7778%" y="501" width="0.4444%" height="15" fill="rgb(213,121,41)" fg:x="193" fg:w="1"/><text x="86.0278%" y="511.50"></text></g><g><title>blockstm::scheduler::Scheduler::finish_execution (1 samples, 0.44%)</title><rect x="86.2222%" y="661" width="0.4444%" height="15" fill="rgb(240,92,3)" fg:x="194" fg:w="1"/><text x="86.4722%" y="671.50"></text></g><g><title>blockstm::scheduler::Scheduler::set_executed_status (1 samples, 0.44%)</title><rect x="86.2222%" y="645" width="0.4444%" height="15" fill="rgb(205,123,3)" fg:x="194" fg:w="1"/><text x="86.4722%" y="655.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (1 samples, 0.44%)</title><rect x="86.2222%" y="629" width="0.4444%" height="15" fill="rgb(205,97,47)" fg:x="194" fg:w="1"/><text x="86.4722%" y="639.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (1 samples, 0.44%)</title><rect x="86.2222%" y="613" width="0.4444%" height="15" fill="rgb(247,152,14)" fg:x="194" fg:w="1"/><text x="86.4722%" y="623.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (4 samples, 1.78%)</title><rect x="85.3333%" y="1253" width="1.7778%" height="15" fill="rgb(248,195,53)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1263.50">r..</text></g><g><title>rayon_core::registry::main_loop (4 samples, 1.78%)</title><rect x="85.3333%" y="1237" width="1.7778%" height="15" fill="rgb(226,201,16)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1247.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (4 samples, 1.78%)</title><rect x="85.3333%" y="1221" width="1.7778%" height="15" fill="rgb(205,98,0)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1231.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (4 samples, 1.78%)</title><rect x="85.3333%" y="1205" width="1.7778%" height="15" fill="rgb(214,191,48)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1215.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (4 samples, 1.78%)</title><rect x="85.3333%" y="1189" width="1.7778%" height="15" fill="rgb(237,112,39)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1199.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::execute (4 samples, 1.78%)</title><rect x="85.3333%" y="1173" width="1.7778%" height="15" fill="rgb(247,203,27)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1183.50">r..</text></g><g><title>rayon_core::job::JobRef::execute (4 samples, 1.78%)</title><rect x="85.3333%" y="1157" width="1.7778%" height="15" fill="rgb(235,124,28)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1167.50">r..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (4 samples, 1.78%)</title><rect x="85.3333%" y="1141" width="1.7778%" height="15" fill="rgb(208,207,46)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1151.50">&lt;..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (4 samples, 1.78%)</title><rect x="85.3333%" y="1125" width="1.7778%" height="15" fill="rgb(234,176,4)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1135.50">r..</text></g><g><title>rayon_core::unwind::halt_unwinding (4 samples, 1.78%)</title><rect x="85.3333%" y="1109" width="1.7778%" height="15" fill="rgb(230,133,28)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1119.50">r..</text></g><g><title>std::panic::catch_unwind (4 samples, 1.78%)</title><rect x="85.3333%" y="1093" width="1.7778%" height="15" fill="rgb(211,137,40)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1103.50">s..</text></g><g><title>std::panicking::try (4 samples, 1.78%)</title><rect x="85.3333%" y="1077" width="1.7778%" height="15" fill="rgb(254,35,13)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1087.50">s..</text></g><g><title>std::panicking::try::do_call (4 samples, 1.78%)</title><rect x="85.3333%" y="1061" width="1.7778%" height="15" fill="rgb(225,49,51)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1071.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 1.78%)</title><rect x="85.3333%" y="1045" width="1.7778%" height="15" fill="rgb(251,10,15)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1055.50">&lt;..</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::{{closure}} (4 samples, 1.78%)</title><rect x="85.3333%" y="1029" width="1.7778%" height="15" fill="rgb(228,207,15)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1039.50">r..</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (4 samples, 1.78%)</title><rect x="85.3333%" y="1013" width="1.7778%" height="15" fill="rgb(241,99,19)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1023.50">r..</text></g><g><title>rayon_core::thread_pool::ThreadPool::install::{{closure}} (4 samples, 1.78%)</title><rect x="85.3333%" y="997" width="1.7778%" height="15" fill="rgb(207,104,49)" fg:x="192" fg:w="4"/><text x="85.5833%" y="1007.50">r..</text></g><g><title>rayon_core::thread_pool::ThreadPool::scope::{{closure}} (4 samples, 1.78%)</title><rect x="85.3333%" y="981" width="1.7778%" height="15" fill="rgb(234,99,18)" fg:x="192" fg:w="4"/><text x="85.5833%" y="991.50">r..</text></g><g><title>rayon_core::scope::scope (4 samples, 1.78%)</title><rect x="85.3333%" y="965" width="1.7778%" height="15" fill="rgb(213,191,49)" fg:x="192" fg:w="4"/><text x="85.5833%" y="975.50">r..</text></g><g><title>rayon_core::registry::in_worker (4 samples, 1.78%)</title><rect x="85.3333%" y="949" width="1.7778%" height="15" fill="rgb(210,226,19)" fg:x="192" fg:w="4"/><text x="85.5833%" y="959.50">r..</text></g><g><title>rayon_core::scope::scope::{{closure}} (4 samples, 1.78%)</title><rect x="85.3333%" y="933" width="1.7778%" height="15" fill="rgb(229,97,18)" fg:x="192" fg:w="4"/><text x="85.5833%" y="943.50">r..</text></g><g><title>rayon_core::scope::ScopeBase::complete (4 samples, 1.78%)</title><rect x="85.3333%" y="917" width="1.7778%" height="15" fill="rgb(211,167,15)" fg:x="192" fg:w="4"/><text x="85.5833%" y="927.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (4 samples, 1.78%)</title><rect x="85.3333%" y="901" width="1.7778%" height="15" fill="rgb(210,169,34)" fg:x="192" fg:w="4"/><text x="85.5833%" y="911.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::execute (4 samples, 1.78%)</title><rect x="85.3333%" y="885" width="1.7778%" height="15" fill="rgb(241,121,31)" fg:x="192" fg:w="4"/><text x="85.5833%" y="895.50">r..</text></g><g><title>rayon_core::job::JobRef::execute (4 samples, 1.78%)</title><rect x="85.3333%" y="869" width="1.7778%" height="15" fill="rgb(232,40,11)" fg:x="192" fg:w="4"/><text x="85.5833%" y="879.50">r..</text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (4 samples, 1.78%)</title><rect x="85.3333%" y="853" width="1.7778%" height="15" fill="rgb(205,86,26)" fg:x="192" fg:w="4"/><text x="85.5833%" y="863.50">&lt;..</text></g><g><title>rayon_core::scope::Scope::spawn::{{closure}} (4 samples, 1.78%)</title><rect x="85.3333%" y="837" width="1.7778%" height="15" fill="rgb(231,126,28)" fg:x="192" fg:w="4"/><text x="85.5833%" y="847.50">r..</text></g><g><title>rayon_core::scope::ScopeBase::execute_job (4 samples, 1.78%)</title><rect x="85.3333%" y="821" width="1.7778%" height="15" fill="rgb(219,221,18)" fg:x="192" fg:w="4"/><text x="85.5833%" y="831.50">r..</text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (4 samples, 1.78%)</title><rect x="85.3333%" y="805" width="1.7778%" height="15" fill="rgb(211,40,0)" fg:x="192" fg:w="4"/><text x="85.5833%" y="815.50">r..</text></g><g><title>rayon_core::unwind::halt_unwinding (4 samples, 1.78%)</title><rect x="85.3333%" y="789" width="1.7778%" height="15" fill="rgb(239,85,43)" fg:x="192" fg:w="4"/><text x="85.5833%" y="799.50">r..</text></g><g><title>std::panic::catch_unwind (4 samples, 1.78%)</title><rect x="85.3333%" y="773" width="1.7778%" height="15" fill="rgb(231,55,21)" fg:x="192" fg:w="4"/><text x="85.5833%" y="783.50">s..</text></g><g><title>std::panicking::try (4 samples, 1.78%)</title><rect x="85.3333%" y="757" width="1.7778%" height="15" fill="rgb(225,184,43)" fg:x="192" fg:w="4"/><text x="85.5833%" y="767.50">s..</text></g><g><title>std::panicking::try::do_call (4 samples, 1.78%)</title><rect x="85.3333%" y="741" width="1.7778%" height="15" fill="rgb(251,158,41)" fg:x="192" fg:w="4"/><text x="85.5833%" y="751.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 1.78%)</title><rect x="85.3333%" y="725" width="1.7778%" height="15" fill="rgb(234,159,37)" fg:x="192" fg:w="4"/><text x="85.5833%" y="735.50">&lt;..</text></g><g><title>rayon_core::scope::Scope::spawn::{{closure}}::{{closure}} (4 samples, 1.78%)</title><rect x="85.3333%" y="709" width="1.7778%" height="15" fill="rgb(216,204,22)" fg:x="192" fg:w="4"/><text x="85.5833%" y="719.50">r..</text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::execute_transactions_parallel::{{closure}}::{{closure}} (4 samples, 1.78%)</title><rect x="85.3333%" y="693" width="1.7778%" height="15" fill="rgb(214,17,3)" fg:x="192" fg:w="4"/><text x="85.5833%" y="703.50">b..</text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::worker_loop (4 samples, 1.78%)</title><rect x="85.3333%" y="677" width="1.7778%" height="15" fill="rgb(212,111,17)" fg:x="192" fg:w="4"/><text x="85.5833%" y="687.50">b..</text></g><g><title>blockstm::scheduler::Scheduler::next_task (1 samples, 0.44%)</title><rect x="86.6667%" y="661" width="0.4444%" height="15" fill="rgb(221,157,24)" fg:x="195" fg:w="1"/><text x="86.9167%" y="671.50"></text></g><g><title>blockstm::scheduler::Scheduler::try_execute_next_version (1 samples, 0.44%)</title><rect x="86.6667%" y="645" width="0.4444%" height="15" fill="rgb(252,16,13)" fg:x="195" fg:w="1"/><text x="86.9167%" y="655.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 0.44%)</title><rect x="87.1111%" y="1253" width="0.4444%" height="15" fill="rgb(221,62,2)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1263.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (1 samples, 0.44%)</title><rect x="87.1111%" y="1237" width="0.4444%" height="15" fill="rgb(247,87,22)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1247.50"></text></g><g><title>rayon_core::job::JobRef::execute (1 samples, 0.44%)</title><rect x="87.1111%" y="1221" width="0.4444%" height="15" fill="rgb(215,73,9)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1231.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1 samples, 0.44%)</title><rect x="87.1111%" y="1205" width="0.4444%" height="15" fill="rgb(207,175,33)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1215.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (1 samples, 0.44%)</title><rect x="87.1111%" y="1189" width="0.4444%" height="15" fill="rgb(243,129,54)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1199.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1 samples, 0.44%)</title><rect x="87.1111%" y="1173" width="0.4444%" height="15" fill="rgb(227,119,45)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1183.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.44%)</title><rect x="87.1111%" y="1157" width="0.4444%" height="15" fill="rgb(205,109,36)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1167.50"></text></g><g><title>std::panicking::try (1 samples, 0.44%)</title><rect x="87.1111%" y="1141" width="0.4444%" height="15" fill="rgb(205,6,39)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1151.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.44%)</title><rect x="87.1111%" y="1125" width="0.4444%" height="15" fill="rgb(221,32,16)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1135.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.44%)</title><rect x="87.1111%" y="1109" width="0.4444%" height="15" fill="rgb(228,144,50)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1119.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="1093" width="0.4444%" height="15" fill="rgb(229,201,53)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1103.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="1077" width="0.4444%" height="15" fill="rgb(249,153,27)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1087.50"></text></g><g><title>rayon_core::thread_pool::ThreadPool::install::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="1061" width="0.4444%" height="15" fill="rgb(227,106,25)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1071.50"></text></g><g><title>rayon_core::thread_pool::ThreadPool::scope::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="1045" width="0.4444%" height="15" fill="rgb(230,65,29)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1055.50"></text></g><g><title>rayon_core::scope::scope (1 samples, 0.44%)</title><rect x="87.1111%" y="1029" width="0.4444%" height="15" fill="rgb(221,57,46)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1039.50"></text></g><g><title>rayon_core::registry::in_worker (1 samples, 0.44%)</title><rect x="87.1111%" y="1013" width="0.4444%" height="15" fill="rgb(229,161,17)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1023.50"></text></g><g><title>rayon_core::scope::scope::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="997" width="0.4444%" height="15" fill="rgb(222,213,11)" fg:x="196" fg:w="1"/><text x="87.3611%" y="1007.50"></text></g><g><title>rayon_core::scope::ScopeBase::complete (1 samples, 0.44%)</title><rect x="87.1111%" y="981" width="0.4444%" height="15" fill="rgb(235,35,13)" fg:x="196" fg:w="1"/><text x="87.3611%" y="991.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 0.44%)</title><rect x="87.1111%" y="965" width="0.4444%" height="15" fill="rgb(233,158,34)" fg:x="196" fg:w="1"/><text x="87.3611%" y="975.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (1 samples, 0.44%)</title><rect x="87.1111%" y="949" width="0.4444%" height="15" fill="rgb(215,151,48)" fg:x="196" fg:w="1"/><text x="87.3611%" y="959.50"></text></g><g><title>rayon_core::job::JobRef::execute (1 samples, 0.44%)</title><rect x="87.1111%" y="933" width="0.4444%" height="15" fill="rgb(229,84,14)" fg:x="196" fg:w="1"/><text x="87.3611%" y="943.50"></text></g><g><title>&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (1 samples, 0.44%)</title><rect x="87.1111%" y="917" width="0.4444%" height="15" fill="rgb(229,68,14)" fg:x="196" fg:w="1"/><text x="87.3611%" y="927.50"></text></g><g><title>rayon_core::scope::Scope::spawn::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="901" width="0.4444%" height="15" fill="rgb(243,106,26)" fg:x="196" fg:w="1"/><text x="87.3611%" y="911.50"></text></g><g><title>rayon_core::scope::ScopeBase::execute_job (1 samples, 0.44%)</title><rect x="87.1111%" y="885" width="0.4444%" height="15" fill="rgb(206,45,38)" fg:x="196" fg:w="1"/><text x="87.3611%" y="895.50"></text></g><g><title>rayon_core::scope::ScopeBase::execute_job_closure (1 samples, 0.44%)</title><rect x="87.1111%" y="869" width="0.4444%" height="15" fill="rgb(226,6,15)" fg:x="196" fg:w="1"/><text x="87.3611%" y="879.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1 samples, 0.44%)</title><rect x="87.1111%" y="853" width="0.4444%" height="15" fill="rgb(232,22,54)" fg:x="196" fg:w="1"/><text x="87.3611%" y="863.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.44%)</title><rect x="87.1111%" y="837" width="0.4444%" height="15" fill="rgb(229,222,32)" fg:x="196" fg:w="1"/><text x="87.3611%" y="847.50"></text></g><g><title>std::panicking::try (1 samples, 0.44%)</title><rect x="87.1111%" y="821" width="0.4444%" height="15" fill="rgb(228,62,29)" fg:x="196" fg:w="1"/><text x="87.3611%" y="831.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.44%)</title><rect x="87.1111%" y="805" width="0.4444%" height="15" fill="rgb(251,103,34)" fg:x="196" fg:w="1"/><text x="87.3611%" y="815.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.44%)</title><rect x="87.1111%" y="789" width="0.4444%" height="15" fill="rgb(233,12,30)" fg:x="196" fg:w="1"/><text x="87.3611%" y="799.50"></text></g><g><title>rayon_core::scope::Scope::spawn::{{closure}}::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="773" width="0.4444%" height="15" fill="rgb(238,52,0)" fg:x="196" fg:w="1"/><text x="87.3611%" y="783.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::execute_transactions_parallel::{{closure}}::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="757" width="0.4444%" height="15" fill="rgb(223,98,5)" fg:x="196" fg:w="1"/><text x="87.3611%" y="767.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::worker_loop (1 samples, 0.44%)</title><rect x="87.1111%" y="741" width="0.4444%" height="15" fill="rgb(228,75,37)" fg:x="196" fg:w="1"/><text x="87.3611%" y="751.50"></text></g><g><title>blockstm::executor::BlockExecutor&lt;DB&gt;::validate (1 samples, 0.44%)</title><rect x="87.1111%" y="725" width="0.4444%" height="15" fill="rgb(205,115,49)" fg:x="196" fg:w="1"/><text x="87.3611%" y="735.50"></text></g><g><title>blockstm::captured_reads::CapturedReads&lt;K,V&gt;::validate_reads (1 samples, 0.44%)</title><rect x="87.1111%" y="709" width="0.4444%" height="15" fill="rgb(250,154,43)" fg:x="196" fg:w="1"/><text x="87.3611%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (1 samples, 0.44%)</title><rect x="87.1111%" y="693" width="0.4444%" height="15" fill="rgb(226,43,29)" fg:x="196" fg:w="1"/><text x="87.3611%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.44%)</title><rect x="87.1111%" y="677" width="0.4444%" height="15" fill="rgb(249,228,39)" fg:x="196" fg:w="1"/><text x="87.3611%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="661" width="0.4444%" height="15" fill="rgb(216,79,43)" fg:x="196" fg:w="1"/><text x="87.3611%" y="671.50"></text></g><g><title>blockstm::captured_reads::CapturedReads&lt;K,V&gt;::validate_reads::{{closure}} (1 samples, 0.44%)</title><rect x="87.1111%" y="645" width="0.4444%" height="15" fill="rgb(228,95,12)" fg:x="196" fg:w="1"/><text x="87.3611%" y="655.50"></text></g><g><title>blockstm::mvhashmap::versioned_data::VersionedData&lt;K,V&gt;::fetch_data (1 samples, 0.44%)</title><rect x="87.1111%" y="629" width="0.4444%" height="15" fill="rgb(249,221,15)" fg:x="196" fg:w="1"/><text x="87.3611%" y="639.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (1 samples, 0.44%)</title><rect x="87.1111%" y="613" width="0.4444%" height="15" fill="rgb(233,34,13)" fg:x="196" fg:w="1"/><text x="87.3611%" y="623.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (1 samples, 0.44%)</title><rect x="87.1111%" y="597" width="0.4444%" height="15" fill="rgb(214,103,39)" fg:x="196" fg:w="1"/><text x="87.3611%" y="607.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.44%)</title><rect x="87.1111%" y="581" width="0.4444%" height="15" fill="rgb(251,126,39)" fg:x="196" fg:w="1"/><text x="87.3611%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.44%)</title><rect x="87.1111%" y="565" width="0.4444%" height="15" fill="rgb(214,216,36)" fg:x="196" fg:w="1"/><text x="87.3611%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="87.1111%" y="549" width="0.4444%" height="15" fill="rgb(220,221,8)" fg:x="196" fg:w="1"/><text x="87.3611%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="87.1111%" y="533" width="0.4444%" height="15" fill="rgb(240,216,3)" fg:x="196" fg:w="1"/><text x="87.3611%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.44%)</title><rect x="87.1111%" y="517" width="0.4444%" height="15" fill="rgb(232,218,17)" fg:x="196" fg:w="1"/><text x="87.3611%" y="527.50"></text></g><g><title>elem_mul_mont (1 samples, 0.44%)</title><rect x="87.5556%" y="661" width="0.4444%" height="15" fill="rgb(229,163,45)" fg:x="197" fg:w="1"/><text x="87.8056%" y="671.50"></text></g><g><title>ring_core_0_17_8_bn_mul_mont (1 samples, 0.44%)</title><rect x="87.5556%" y="645" width="0.4444%" height="15" fill="rgb(231,110,42)" fg:x="197" fg:w="1"/><text x="87.8056%" y="655.50"></text></g><g><title>add_precomputed_w5 (2 samples, 0.89%)</title><rect x="87.5556%" y="693" width="0.8889%" height="15" fill="rgb(208,170,48)" fg:x="197" fg:w="2"/><text x="87.8056%" y="703.50"></text></g><g><title>nistz384_point_add (2 samples, 0.89%)</title><rect x="87.5556%" y="677" width="0.8889%" height="15" fill="rgb(239,116,25)" fg:x="197" fg:w="2"/><text x="87.8056%" y="687.50"></text></g><g><title>elem_sqr_mont (1 samples, 0.44%)</title><rect x="88.0000%" y="661" width="0.4444%" height="15" fill="rgb(219,200,50)" fg:x="198" fg:w="1"/><text x="88.2500%" y="671.50"></text></g><g><title>elem_mul_mont (1 samples, 0.44%)</title><rect x="88.0000%" y="645" width="0.4444%" height="15" fill="rgb(245,200,0)" fg:x="198" fg:w="1"/><text x="88.2500%" y="655.50"></text></g><g><title>ring_core_0_17_8_bn_mul_mont (1 samples, 0.44%)</title><rect x="88.0000%" y="629" width="0.4444%" height="15" fill="rgb(245,119,33)" fg:x="198" fg:w="1"/><text x="88.2500%" y="639.50"></text></g><g><title>nistz384_point_add (1 samples, 0.44%)</title><rect x="88.4444%" y="693" width="0.4444%" height="15" fill="rgb(231,125,12)" fg:x="199" fg:w="1"/><text x="88.6944%" y="703.50"></text></g><g><title>elem_sub (1 samples, 0.44%)</title><rect x="88.4444%" y="677" width="0.4444%" height="15" fill="rgb(216,96,41)" fg:x="199" fg:w="1"/><text x="88.6944%" y="687.50"></text></g><g><title>ring_core_0_17_8_LIMBS_sub_mod (1 samples, 0.44%)</title><rect x="88.4444%" y="661" width="0.4444%" height="15" fill="rgb(248,43,45)" fg:x="199" fg:w="1"/><text x="88.6944%" y="671.50"></text></g><g><title>limbs_sub (1 samples, 0.44%)</title><rect x="88.4444%" y="645" width="0.4444%" height="15" fill="rgb(217,222,7)" fg:x="199" fg:w="1"/><text x="88.6944%" y="655.50"></text></g><g><title>limb_sub (1 samples, 0.44%)</title><rect x="88.4444%" y="629" width="0.4444%" height="15" fill="rgb(233,28,6)" fg:x="199" fg:w="1"/><text x="88.6944%" y="639.50"></text></g><g><title>ring::ec::suite_b::ops::PrivateKeyOps::point_mul (4 samples, 1.78%)</title><rect x="87.5556%" y="741" width="1.7778%" height="15" fill="rgb(231,218,15)" fg:x="197" fg:w="4"/><text x="87.8056%" y="751.50">r..</text></g><g><title>ring_core_0_17_8_p384_point_mul (4 samples, 1.78%)</title><rect x="87.5556%" y="725" width="1.7778%" height="15" fill="rgb(226,171,48)" fg:x="197" fg:w="4"/><text x="87.8056%" y="735.50">r..</text></g><g><title>nistz384_point_mul (4 samples, 1.78%)</title><rect x="87.5556%" y="709" width="1.7778%" height="15" fill="rgb(235,201,9)" fg:x="197" fg:w="4"/><text x="87.8056%" y="719.50">n..</text></g><g><title>nistz384_point_double (1 samples, 0.44%)</title><rect x="88.8889%" y="693" width="0.4444%" height="15" fill="rgb(217,80,15)" fg:x="200" fg:w="1"/><text x="89.1389%" y="703.50"></text></g><g><title>elem_sqr_mont (1 samples, 0.44%)</title><rect x="88.8889%" y="677" width="0.4444%" height="15" fill="rgb(219,152,8)" fg:x="200" fg:w="1"/><text x="89.1389%" y="687.50"></text></g><g><title>elem_mul_mont (1 samples, 0.44%)</title><rect x="88.8889%" y="661" width="0.4444%" height="15" fill="rgb(243,107,38)" fg:x="200" fg:w="1"/><text x="89.1389%" y="671.50"></text></g><g><title>ring_core_0_17_8_bn_mul_mont (1 samples, 0.44%)</title><rect x="88.8889%" y="645" width="0.4444%" height="15" fill="rgb(231,17,5)" fg:x="200" fg:w="1"/><text x="89.1389%" y="655.50"></text></g><g><title>add_precomputed_w5 (2 samples, 0.89%)</title><rect x="89.3333%" y="661" width="0.8889%" height="15" fill="rgb(209,25,54)" fg:x="201" fg:w="2"/><text x="89.5833%" y="671.50"></text></g><g><title>nistz384_point_add (2 samples, 0.89%)</title><rect x="89.3333%" y="645" width="0.8889%" height="15" fill="rgb(219,0,2)" fg:x="201" fg:w="2"/><text x="89.5833%" y="655.50"></text></g><g><title>elem_sqr_mont (2 samples, 0.89%)</title><rect x="89.3333%" y="629" width="0.8889%" height="15" fill="rgb(246,9,5)" fg:x="201" fg:w="2"/><text x="89.5833%" y="639.50"></text></g><g><title>elem_mul_mont (2 samples, 0.89%)</title><rect x="89.3333%" y="613" width="0.8889%" height="15" fill="rgb(226,159,4)" fg:x="201" fg:w="2"/><text x="89.5833%" y="623.50"></text></g><g><title>ring_core_0_17_8_bn_mul_mont (2 samples, 0.89%)</title><rect x="89.3333%" y="597" width="0.8889%" height="15" fill="rgb(219,175,34)" fg:x="201" fg:w="2"/><text x="89.5833%" y="607.50"></text></g><g><title>elem_mul_mont (2 samples, 0.89%)</title><rect x="90.2222%" y="645" width="0.8889%" height="15" fill="rgb(236,10,46)" fg:x="203" fg:w="2"/><text x="90.4722%" y="655.50"></text></g><g><title>ring_core_0_17_8_bn_mul_mont (2 samples, 0.89%)</title><rect x="90.2222%" y="629" width="0.8889%" height="15" fill="rgb(240,211,16)" fg:x="203" fg:w="2"/><text x="90.4722%" y="639.50"></text></g><g><title>reqwest::connect::Connector::connect_with_maybe_proxy::{{closure}} (11 samples, 4.89%)</title><rect x="87.5556%" y="1253" width="4.8889%" height="15" fill="rgb(205,3,43)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1263.50">reqwes..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11 samples, 4.89%)</title><rect x="87.5556%" y="1237" width="4.8889%" height="15" fill="rgb(245,7,22)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1247.50">&lt;core:..</text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (11 samples, 4.89%)</title><rect x="87.5556%" y="1221" width="4.8889%" height="15" fill="rgb(239,132,32)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1231.50">&lt;hyper..</text></g><g><title>&lt;tokio_rustls::Connect&lt;IO&gt; as core::future::future::Future&gt;::poll (11 samples, 4.89%)</title><rect x="87.5556%" y="1205" width="4.8889%" height="15" fill="rgb(228,202,34)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1215.50">&lt;tokio..</text></g><g><title>&lt;tokio_rustls::common::handshake::MidHandshake&lt;IS&gt; as core::future::future::Future&gt;::poll (11 samples, 4.89%)</title><rect x="87.5556%" y="1189" width="4.8889%" height="15" fill="rgb(254,200,22)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1199.50">&lt;tokio..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::handshake (11 samples, 4.89%)</title><rect x="87.5556%" y="1173" width="4.8889%" height="15" fill="rgb(219,10,39)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1183.50">tokio_..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (11 samples, 4.89%)</title><rect x="87.5556%" y="1157" width="4.8889%" height="15" fill="rgb(226,210,39)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1167.50">tokio_..</text></g><g><title>rustls::conn::ConnectionCommon&lt;Data&gt;::process_new_packets (11 samples, 4.89%)</title><rect x="87.5556%" y="1141" width="4.8889%" height="15" fill="rgb(208,219,16)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1151.50">rustls..</text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (11 samples, 4.89%)</title><rect x="87.5556%" y="1125" width="4.8889%" height="15" fill="rgb(216,158,51)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1135.50">rustls..</text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_msg (11 samples, 4.89%)</title><rect x="87.5556%" y="1109" width="4.8889%" height="15" fill="rgb(233,14,44)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1119.50">rustls..</text></g><g><title>rustls::common_state::CommonState::process_main_protocol (11 samples, 4.89%)</title><rect x="87.5556%" y="1093" width="4.8889%" height="15" fill="rgb(237,97,39)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1103.50">rustls..</text></g><g><title>&lt;rustls::client::tls13::ExpectCertificateVerify as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (11 samples, 4.89%)</title><rect x="87.5556%" y="1077" width="4.8889%" height="15" fill="rgb(218,198,43)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1087.50">&lt;rustl..</text></g><g><title>&lt;rustls::verify::WebPkiVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (11 samples, 4.89%)</title><rect x="87.5556%" y="1061" width="4.8889%" height="15" fill="rgb(231,104,20)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1071.50">&lt;rustl..</text></g><g><title>rustls::verify::verify_server_cert_signed_by_trust_anchor (11 samples, 4.89%)</title><rect x="87.5556%" y="1045" width="4.8889%" height="15" fill="rgb(254,36,13)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1055.50">rustls..</text></g><g><title>webpki::end_entity::EndEntityCert::verify_for_usage (11 samples, 4.89%)</title><rect x="87.5556%" y="1029" width="4.8889%" height="15" fill="rgb(248,14,50)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1039.50">webpki..</text></g><g><title>webpki::end_entity::EndEntityCert::verify_is_valid_cert (11 samples, 4.89%)</title><rect x="87.5556%" y="1013" width="4.8889%" height="15" fill="rgb(217,107,29)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1023.50">webpki..</text></g><g><title>webpki::verify_cert::build_chain (11 samples, 4.89%)</title><rect x="87.5556%" y="997" width="4.8889%" height="15" fill="rgb(251,169,33)" fg:x="197" fg:w="11"/><text x="87.8056%" y="1007.50">webpki..</text></g><g><title>webpki::verify_cert::build_chain_inner (11 samples, 4.89%)</title><rect x="87.5556%" y="981" width="4.8889%" height="15" fill="rgb(217,108,32)" fg:x="197" fg:w="11"/><text x="87.8056%" y="991.50">webpki..</text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (11 samples, 4.89%)</title><rect x="87.5556%" y="965" width="4.8889%" height="15" fill="rgb(219,66,42)" fg:x="197" fg:w="11"/><text x="87.8056%" y="975.50">webpki..</text></g><g><title>webpki::verify_cert::build_chain_inner::{{closure}} (11 samples, 4.89%)</title><rect x="87.5556%" y="949" width="4.8889%" height="15" fill="rgb(206,180,7)" fg:x="197" fg:w="11"/><text x="87.8056%" y="959.50">webpki..</text></g><g><title>webpki::verify_cert::build_chain_inner (11 samples, 4.89%)</title><rect x="87.5556%" y="933" width="4.8889%" height="15" fill="rgb(208,226,31)" fg:x="197" fg:w="11"/><text x="87.8056%" y="943.50">webpki..</text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (11 samples, 4.89%)</title><rect x="87.5556%" y="917" width="4.8889%" height="15" fill="rgb(218,26,49)" fg:x="197" fg:w="11"/><text x="87.8056%" y="927.50">webpki..</text></g><g><title>webpki::verify_cert::build_chain_inner::{{closure}} (11 samples, 4.89%)</title><rect x="87.5556%" y="901" width="4.8889%" height="15" fill="rgb(233,197,48)" fg:x="197" fg:w="11"/><text x="87.8056%" y="911.50">webpki..</text></g><g><title>webpki::verify_cert::check_signed_chain (11 samples, 4.89%)</title><rect x="87.5556%" y="885" width="4.8889%" height="15" fill="rgb(252,181,51)" fg:x="197" fg:w="11"/><text x="87.8056%" y="895.50">webpki..</text></g><g><title>webpki::signed_data::verify_signed_data (11 samples, 4.89%)</title><rect x="87.5556%" y="869" width="4.8889%" height="15" fill="rgb(253,90,19)" fg:x="197" fg:w="11"/><text x="87.8056%" y="879.50">webpki..</text></g><g><title>webpki::signed_data::verify_signature (11 samples, 4.89%)</title><rect x="87.5556%" y="853" width="4.8889%" height="15" fill="rgb(215,171,30)" fg:x="197" fg:w="11"/><text x="87.8056%" y="863.50">webpki..</text></g><g><title>ring::signature::UnparsedPublicKey&lt;B&gt;::verify (11 samples, 4.89%)</title><rect x="87.5556%" y="837" width="4.8889%" height="15" fill="rgb(214,222,9)" fg:x="197" fg:w="11"/><text x="87.8056%" y="847.50">ring::..</text></g><g><title>&lt;ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm as ring::signature::VerificationAlgorithm&gt;::verify (11 samples, 4.89%)</title><rect x="87.5556%" y="821" width="4.8889%" height="15" fill="rgb(223,3,22)" fg:x="197" fg:w="11"/><text x="87.8056%" y="831.50">&lt;ring:..</text></g><g><title>ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm::verify_digest (11 samples, 4.89%)</title><rect x="87.5556%" y="805" width="4.8889%" height="15" fill="rgb(225,196,46)" fg:x="197" fg:w="11"/><text x="87.8056%" y="815.50">ring::..</text></g><g><title>core::ops::function::FnOnce::call_once (11 samples, 4.89%)</title><rect x="87.5556%" y="789" width="4.8889%" height="15" fill="rgb(209,110,37)" fg:x="197" fg:w="11"/><text x="87.8056%" y="799.50">core::..</text></g><g><title>ring::ec::suite_b::ops::p384::PUBLIC_SCALAR_OPS::{{closure}} (11 samples, 4.89%)</title><rect x="87.5556%" y="773" width="4.8889%" height="15" fill="rgb(249,89,12)" fg:x="197" fg:w="11"/><text x="87.8056%" y="783.50">ring::..</text></g><g><title>ring::ec::suite_b::ops::twin_mul_inefficient (11 samples, 4.89%)</title><rect x="87.5556%" y="757" width="4.8889%" height="15" fill="rgb(226,27,33)" fg:x="197" fg:w="11"/><text x="87.8056%" y="767.50">ring::..</text></g><g><title>ring::ec::suite_b::ops::PrivateKeyOps::point_mul_base (7 samples, 3.11%)</title><rect x="89.3333%" y="741" width="3.1111%" height="15" fill="rgb(213,82,22)" fg:x="201" fg:w="7"/><text x="89.5833%" y="751.50">rin..</text></g><g><title>ring::ec::suite_b::ops::p384::p384_point_mul_base_impl (7 samples, 3.11%)</title><rect x="89.3333%" y="725" width="3.1111%" height="15" fill="rgb(248,140,0)" fg:x="201" fg:w="7"/><text x="89.5833%" y="735.50">rin..</text></g><g><title>ring::ec::suite_b::ops::PrivateKeyOps::point_mul (7 samples, 3.11%)</title><rect x="89.3333%" y="709" width="3.1111%" height="15" fill="rgb(228,106,3)" fg:x="201" fg:w="7"/><text x="89.5833%" y="719.50">rin..</text></g><g><title>ring_core_0_17_8_p384_point_mul (7 samples, 3.11%)</title><rect x="89.3333%" y="693" width="3.1111%" height="15" fill="rgb(209,23,37)" fg:x="201" fg:w="7"/><text x="89.5833%" y="703.50">rin..</text></g><g><title>nistz384_point_mul (7 samples, 3.11%)</title><rect x="89.3333%" y="677" width="3.1111%" height="15" fill="rgb(241,93,50)" fg:x="201" fg:w="7"/><text x="89.5833%" y="687.50">nis..</text></g><g><title>nistz384_point_double (5 samples, 2.22%)</title><rect x="90.2222%" y="661" width="2.2222%" height="15" fill="rgb(253,46,43)" fg:x="203" fg:w="5"/><text x="90.4722%" y="671.50">n..</text></g><g><title>elem_sqr_mont (3 samples, 1.33%)</title><rect x="91.1111%" y="645" width="1.3333%" height="15" fill="rgb(226,206,43)" fg:x="205" fg:w="3"/><text x="91.3611%" y="655.50"></text></g><g><title>elem_mul_mont (3 samples, 1.33%)</title><rect x="91.1111%" y="629" width="1.3333%" height="15" fill="rgb(217,54,7)" fg:x="205" fg:w="3"/><text x="91.3611%" y="639.50"></text></g><g><title>ring_core_0_17_8_bn_mul_mont (3 samples, 1.33%)</title><rect x="91.1111%" y="613" width="1.3333%" height="15" fill="rgb(223,5,52)" fg:x="205" fg:w="3"/><text x="91.3611%" y="623.50"></text></g><g><title>&lt;rustls::client::hs::ExpectServerHelloOrHelloRetryRequest as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.44%)</title><rect x="92.4444%" y="1061" width="0.4444%" height="15" fill="rgb(206,52,46)" fg:x="208" fg:w="1"/><text x="92.6944%" y="1071.50"></text></g><g><title>&lt;rustls::client::hs::ExpectServerHello as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.44%)</title><rect x="92.4444%" y="1045" width="0.4444%" height="15" fill="rgb(253,136,11)" fg:x="208" fg:w="1"/><text x="92.6944%" y="1055.50"></text></g><g><title>rustls::client::tls13::handle_server_hello (1 samples, 0.44%)</title><rect x="92.4444%" y="1029" width="0.4444%" height="15" fill="rgb(208,106,33)" fg:x="208" fg:w="1"/><text x="92.6944%" y="1039.50"></text></g><g><title>rustls::kx::KeyExchange::complete (1 samples, 0.44%)</title><rect x="92.4444%" y="1013" width="0.4444%" height="15" fill="rgb(206,54,4)" fg:x="208" fg:w="1"/><text x="92.6944%" y="1023.50"></text></g><g><title>ring::agreement::agree_ephemeral (1 samples, 0.44%)</title><rect x="92.4444%" y="997" width="0.4444%" height="15" fill="rgb(213,3,15)" fg:x="208" fg:w="1"/><text x="92.6944%" y="1007.50"></text></g><g><title>ring::agreement::agree_ephemeral_ (1 samples, 0.44%)</title><rect x="92.4444%" y="981" width="0.4444%" height="15" fill="rgb(252,211,39)" fg:x="208" fg:w="1"/><text x="92.6944%" y="991.50"></text></g><g><title>ring::ec::curve25519::x25519::x25519_ecdh (1 samples, 0.44%)</title><rect x="92.4444%" y="965" width="0.4444%" height="15" fill="rgb(223,6,36)" fg:x="208" fg:w="1"/><text x="92.6944%" y="975.50"></text></g><g><title>ring::ec::curve25519::x25519::x25519_ecdh::scalar_mult (1 samples, 0.44%)</title><rect x="92.4444%" y="949" width="0.4444%" height="15" fill="rgb(252,169,45)" fg:x="208" fg:w="1"/><text x="92.6944%" y="959.50"></text></g><g><title>ring_core_0_17_8_x25519_scalar_mult_adx (1 samples, 0.44%)</title><rect x="92.4444%" y="933" width="0.4444%" height="15" fill="rgb(212,48,26)" fg:x="208" fg:w="1"/><text x="92.6944%" y="943.50"></text></g><g><title>fe4_sq (1 samples, 0.44%)</title><rect x="92.4444%" y="917" width="0.4444%" height="15" fill="rgb(251,102,48)" fg:x="208" fg:w="1"/><text x="92.6944%" y="927.50"></text></g><g><title>ring_core_0_17_8_fiat_curve25519_adx_square (1 samples, 0.44%)</title><rect x="92.4444%" y="901" width="0.4444%" height="15" fill="rgb(243,208,16)" fg:x="208" fg:w="1"/><text x="92.6944%" y="911.50"></text></g><g><title>elem_mul_by_3 (2 samples, 0.89%)</title><rect x="93.3333%" y="661" width="0.8889%" height="15" fill="rgb(219,96,24)" fg:x="210" fg:w="2"/><text x="93.5833%" y="671.50"></text></g><g><title>elem_add (2 samples, 0.89%)</title><rect x="93.3333%" y="645" width="0.8889%" height="15" fill="rgb(219,33,29)" fg:x="210" fg:w="2"/><text x="93.5833%" y="655.50"></text></g><g><title>ring_core_0_17_8_LIMBS_add_mod (2 samples, 0.89%)</title><rect x="93.3333%" y="629" width="0.8889%" height="15" fill="rgb(223,176,5)" fg:x="210" fg:w="2"/><text x="93.5833%" y="639.50"></text></g><g><title>ring_core_0_17_8_LIMBS_less_than (1 samples, 0.44%)</title><rect x="93.7778%" y="613" width="0.4444%" height="15" fill="rgb(228,140,14)" fg:x="211" fg:w="1"/><text x="94.0278%" y="623.50"></text></g><g><title>limb_sbb (1 samples, 0.44%)</title><rect x="93.7778%" y="597" width="0.4444%" height="15" fill="rgb(217,179,31)" fg:x="211" fg:w="1"/><text x="94.0278%" y="607.50"></text></g><g><title>limb_adc (1 samples, 0.44%)</title><rect x="94.2222%" y="629" width="0.4444%" height="15" fill="rgb(230,9,30)" fg:x="212" fg:w="1"/><text x="94.4722%" y="639.50"></text></g><g><title>ring::ec::suite_b::ops::PrivateKeyOps::point_mul (5 samples, 2.22%)</title><rect x="92.8889%" y="725" width="2.2222%" height="15" fill="rgb(230,136,20)" fg:x="209" fg:w="5"/><text x="93.1389%" y="735.50">r..</text></g><g><title>ring_core_0_17_8_p384_point_mul (5 samples, 2.22%)</title><rect x="92.8889%" y="709" width="2.2222%" height="15" fill="rgb(215,210,22)" fg:x="209" fg:w="5"/><text x="93.1389%" y="719.50">r..</text></g><g><title>nistz384_point_mul (5 samples, 2.22%)</title><rect x="92.8889%" y="693" width="2.2222%" height="15" fill="rgb(218,43,5)" fg:x="209" fg:w="5"/><text x="93.1389%" y="703.50">n..</text></g><g><title>nistz384_point_double (5 samples, 2.22%)</title><rect x="92.8889%" y="677" width="2.2222%" height="15" fill="rgb(216,11,5)" fg:x="209" fg:w="5"/><text x="93.1389%" y="687.50">n..</text></g><g><title>elem_sub (2 samples, 0.89%)</title><rect x="94.2222%" y="661" width="0.8889%" height="15" fill="rgb(209,82,29)" fg:x="212" fg:w="2"/><text x="94.4722%" y="671.50"></text></g><g><title>ring_core_0_17_8_LIMBS_sub_mod (2 samples, 0.89%)</title><rect x="94.2222%" y="645" width="0.8889%" height="15" fill="rgb(244,115,12)" fg:x="212" fg:w="2"/><text x="94.4722%" y="655.50"></text></g><g><title>limbs_sub (1 samples, 0.44%)</title><rect x="94.6667%" y="629" width="0.4444%" height="15" fill="rgb(222,82,18)" fg:x="213" fg:w="1"/><text x="94.9167%" y="639.50"></text></g><g><title>limb_sbb (1 samples, 0.44%)</title><rect x="94.6667%" y="613" width="0.4444%" height="15" fill="rgb(249,227,8)" fg:x="213" fg:w="1"/><text x="94.9167%" y="623.50"></text></g><g><title>elem_mul_by_2 (1 samples, 0.44%)</title><rect x="95.1111%" y="629" width="0.4444%" height="15" fill="rgb(253,141,45)" fg:x="214" fg:w="1"/><text x="95.3611%" y="639.50"></text></g><g><title>ring_core_0_17_8_LIMBS_shl_mod (1 samples, 0.44%)</title><rect x="95.1111%" y="613" width="0.4444%" height="15" fill="rgb(234,184,4)" fg:x="214" fg:w="1"/><text x="95.3611%" y="623.50"></text></g><g><title>ring_core_0_17_8_LIMBS_less_than (1 samples, 0.44%)</title><rect x="95.1111%" y="597" width="0.4444%" height="15" fill="rgb(218,194,23)" fg:x="214" fg:w="1"/><text x="95.3611%" y="607.50"></text></g><g><title>limb_sbb (1 samples, 0.44%)</title><rect x="95.1111%" y="581" width="0.4444%" height="15" fill="rgb(235,66,41)" fg:x="214" fg:w="1"/><text x="95.3611%" y="591.50"></text></g><g><title>parallel (216 samples, 96.00%)</title><rect x="0.0000%" y="1269" width="96.0000%" height="15" fill="rgb(245,217,1)" fg:x="0" fg:w="216"/><text x="0.2500%" y="1279.50">parallel</text></g><g><title>reqwest::connect::with_timeout::{{closure}} (8 samples, 3.56%)</title><rect x="92.4444%" y="1253" width="3.5556%" height="15" fill="rgb(229,91,1)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1263.50">reqw..</text></g><g><title>reqwest::connect::Connector::connect_with_maybe_proxy::{{closure}} (8 samples, 3.56%)</title><rect x="92.4444%" y="1237" width="3.5556%" height="15" fill="rgb(207,101,30)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1247.50">reqw..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8 samples, 3.56%)</title><rect x="92.4444%" y="1221" width="3.5556%" height="15" fill="rgb(223,82,49)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1231.50">&lt;cor..</text></g><g><title>&lt;hyper_rustls::connector::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (8 samples, 3.56%)</title><rect x="92.4444%" y="1205" width="3.5556%" height="15" fill="rgb(218,167,17)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1215.50">&lt;hyp..</text></g><g><title>&lt;tokio_rustls::Connect&lt;IO&gt; as core::future::future::Future&gt;::poll (8 samples, 3.56%)</title><rect x="92.4444%" y="1189" width="3.5556%" height="15" fill="rgb(208,103,14)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1199.50">&lt;tok..</text></g><g><title>&lt;tokio_rustls::common::handshake::MidHandshake&lt;IS&gt; as core::future::future::Future&gt;::poll (8 samples, 3.56%)</title><rect x="92.4444%" y="1173" width="3.5556%" height="15" fill="rgb(238,20,8)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1183.50">&lt;tok..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::handshake (8 samples, 3.56%)</title><rect x="92.4444%" y="1157" width="3.5556%" height="15" fill="rgb(218,80,54)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1167.50">toki..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (8 samples, 3.56%)</title><rect x="92.4444%" y="1141" width="3.5556%" height="15" fill="rgb(240,144,17)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1151.50">toki..</text></g><g><title>rustls::conn::ConnectionCommon&lt;Data&gt;::process_new_packets (8 samples, 3.56%)</title><rect x="92.4444%" y="1125" width="3.5556%" height="15" fill="rgb(245,27,50)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1135.50">rust..</text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (8 samples, 3.56%)</title><rect x="92.4444%" y="1109" width="3.5556%" height="15" fill="rgb(251,51,7)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1119.50">rust..</text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_msg (8 samples, 3.56%)</title><rect x="92.4444%" y="1093" width="3.5556%" height="15" fill="rgb(245,217,29)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1103.50">rust..</text></g><g><title>rustls::common_state::CommonState::process_main_protocol (8 samples, 3.56%)</title><rect x="92.4444%" y="1077" width="3.5556%" height="15" fill="rgb(221,176,29)" fg:x="208" fg:w="8"/><text x="92.6944%" y="1087.50">rust..</text></g><g><title>&lt;rustls::client::tls13::ExpectCertificateVerify as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (7 samples, 3.11%)</title><rect x="92.8889%" y="1061" width="3.1111%" height="15" fill="rgb(212,180,24)" fg:x="209" fg:w="7"/><text x="93.1389%" y="1071.50">&lt;ru..</text></g><g><title>&lt;rustls::verify::WebPkiVerifier as rustls::verify::ServerCertVerifier&gt;::verify_server_cert (7 samples, 3.11%)</title><rect x="92.8889%" y="1045" width="3.1111%" height="15" fill="rgb(254,24,2)" fg:x="209" fg:w="7"/><text x="93.1389%" y="1055.50">&lt;ru..</text></g><g><title>rustls::verify::verify_server_cert_signed_by_trust_anchor (7 samples, 3.11%)</title><rect x="92.8889%" y="1029" width="3.1111%" height="15" fill="rgb(230,100,2)" fg:x="209" fg:w="7"/><text x="93.1389%" y="1039.50">rus..</text></g><g><title>webpki::end_entity::EndEntityCert::verify_for_usage (7 samples, 3.11%)</title><rect x="92.8889%" y="1013" width="3.1111%" height="15" fill="rgb(219,142,25)" fg:x="209" fg:w="7"/><text x="93.1389%" y="1023.50">web..</text></g><g><title>webpki::end_entity::EndEntityCert::verify_is_valid_cert (7 samples, 3.11%)</title><rect x="92.8889%" y="997" width="3.1111%" height="15" fill="rgb(240,73,43)" fg:x="209" fg:w="7"/><text x="93.1389%" y="1007.50">web..</text></g><g><title>webpki::verify_cert::build_chain (7 samples, 3.11%)</title><rect x="92.8889%" y="981" width="3.1111%" height="15" fill="rgb(214,114,15)" fg:x="209" fg:w="7"/><text x="93.1389%" y="991.50">web..</text></g><g><title>webpki::verify_cert::build_chain_inner (7 samples, 3.11%)</title><rect x="92.8889%" y="965" width="3.1111%" height="15" fill="rgb(207,130,4)" fg:x="209" fg:w="7"/><text x="93.1389%" y="975.50">web..</text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (7 samples, 3.11%)</title><rect x="92.8889%" y="949" width="3.1111%" height="15" fill="rgb(221,25,40)" fg:x="209" fg:w="7"/><text x="93.1389%" y="959.50">web..</text></g><g><title>webpki::verify_cert::build_chain_inner::{{closure}} (7 samples, 3.11%)</title><rect x="92.8889%" y="933" width="3.1111%" height="15" fill="rgb(241,184,7)" fg:x="209" fg:w="7"/><text x="93.1389%" y="943.50">web..</text></g><g><title>webpki::verify_cert::build_chain_inner (7 samples, 3.11%)</title><rect x="92.8889%" y="917" width="3.1111%" height="15" fill="rgb(235,159,4)" fg:x="209" fg:w="7"/><text x="93.1389%" y="927.50">web..</text></g><g><title>webpki::verify_cert::loop_while_non_fatal_error (7 samples, 3.11%)</title><rect x="92.8889%" y="901" width="3.1111%" height="15" fill="rgb(214,87,48)" fg:x="209" fg:w="7"/><text x="93.1389%" y="911.50">web..</text></g><g><title>webpki::verify_cert::build_chain_inner::{{closure}} (7 samples, 3.11%)</title><rect x="92.8889%" y="885" width="3.1111%" height="15" fill="rgb(246,198,24)" fg:x="209" fg:w="7"/><text x="93.1389%" y="895.50">web..</text></g><g><title>webpki::verify_cert::check_signed_chain (7 samples, 3.11%)</title><rect x="92.8889%" y="869" width="3.1111%" height="15" fill="rgb(209,66,40)" fg:x="209" fg:w="7"/><text x="93.1389%" y="879.50">web..</text></g><g><title>webpki::signed_data::verify_signed_data (7 samples, 3.11%)</title><rect x="92.8889%" y="853" width="3.1111%" height="15" fill="rgb(233,147,39)" fg:x="209" fg:w="7"/><text x="93.1389%" y="863.50">web..</text></g><g><title>webpki::signed_data::verify_signature (7 samples, 3.11%)</title><rect x="92.8889%" y="837" width="3.1111%" height="15" fill="rgb(231,145,52)" fg:x="209" fg:w="7"/><text x="93.1389%" y="847.50">web..</text></g><g><title>ring::signature::UnparsedPublicKey&lt;B&gt;::verify (7 samples, 3.11%)</title><rect x="92.8889%" y="821" width="3.1111%" height="15" fill="rgb(206,20,26)" fg:x="209" fg:w="7"/><text x="93.1389%" y="831.50">rin..</text></g><g><title>&lt;ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm as ring::signature::VerificationAlgorithm&gt;::verify (7 samples, 3.11%)</title><rect x="92.8889%" y="805" width="3.1111%" height="15" fill="rgb(238,220,4)" fg:x="209" fg:w="7"/><text x="93.1389%" y="815.50">&lt;ri..</text></g><g><title>ring::ec::suite_b::ecdsa::verification::EcdsaVerificationAlgorithm::verify_digest (7 samples, 3.11%)</title><rect x="92.8889%" y="789" width="3.1111%" height="15" fill="rgb(252,195,42)" fg:x="209" fg:w="7"/><text x="93.1389%" y="799.50">rin..</text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 3.11%)</title><rect x="92.8889%" y="773" width="3.1111%" height="15" fill="rgb(209,10,6)" fg:x="209" fg:w="7"/><text x="93.1389%" y="783.50">cor..</text></g><g><title>ring::ec::suite_b::ops::p384::PUBLIC_SCALAR_OPS::{{closure}} (7 samples, 3.11%)</title><rect x="92.8889%" y="757" width="3.1111%" height="15" fill="rgb(229,3,52)" fg:x="209" fg:w="7"/><text x="93.1389%" y="767.50">rin..</text></g><g><title>ring::ec::suite_b::ops::twin_mul_inefficient (7 samples, 3.11%)</title><rect x="92.8889%" y="741" width="3.1111%" height="15" fill="rgb(253,49,37)" fg:x="209" fg:w="7"/><text x="93.1389%" y="751.50">rin..</text></g><g><title>ring::ec::suite_b::ops::PrivateKeyOps::point_mul_base (2 samples, 0.89%)</title><rect x="95.1111%" y="725" width="0.8889%" height="15" fill="rgb(240,103,49)" fg:x="214" fg:w="2"/><text x="95.3611%" y="735.50"></text></g><g><title>ring::ec::suite_b::ops::p384::p384_point_mul_base_impl (2 samples, 0.89%)</title><rect x="95.1111%" y="709" width="0.8889%" height="15" fill="rgb(250,182,30)" fg:x="214" fg:w="2"/><text x="95.3611%" y="719.50"></text></g><g><title>ring::ec::suite_b::ops::PrivateKeyOps::point_mul (2 samples, 0.89%)</title><rect x="95.1111%" y="693" width="0.8889%" height="15" fill="rgb(248,8,30)" fg:x="214" fg:w="2"/><text x="95.3611%" y="703.50"></text></g><g><title>ring_core_0_17_8_p384_point_mul (2 samples, 0.89%)</title><rect x="95.1111%" y="677" width="0.8889%" height="15" fill="rgb(237,120,30)" fg:x="214" fg:w="2"/><text x="95.3611%" y="687.50"></text></g><g><title>nistz384_point_mul (2 samples, 0.89%)</title><rect x="95.1111%" y="661" width="0.8889%" height="15" fill="rgb(221,146,34)" fg:x="214" fg:w="2"/><text x="95.3611%" y="671.50"></text></g><g><title>nistz384_point_double (2 samples, 0.89%)</title><rect x="95.1111%" y="645" width="0.8889%" height="15" fill="rgb(242,55,13)" fg:x="214" fg:w="2"/><text x="95.3611%" y="655.50"></text></g><g><title>elem_mul_mont (1 samples, 0.44%)</title><rect x="95.5556%" y="629" width="0.4444%" height="15" fill="rgb(242,112,31)" fg:x="215" fg:w="1"/><text x="95.8056%" y="639.50"></text></g><g><title>ring_core_0_17_8_bn_mul_mont (1 samples, 0.44%)</title><rect x="95.5556%" y="613" width="0.4444%" height="15" fill="rgb(249,192,27)" fg:x="215" fg:w="1"/><text x="95.8056%" y="623.50"></text></g><g><title>&lt;hyper::client::connect::dns::GaiResolver as tower_service::Service&lt;hyper::client::connect::dns::Name&gt;&gt;::call::{{closure}} (1 samples, 0.44%)</title><rect x="96.0000%" y="773" width="0.4444%" height="15" fill="rgb(208,204,44)" fg:x="216" fg:w="1"/><text x="96.2500%" y="783.50"></text></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.44%)</title><rect x="96.0000%" y="757" width="0.4444%" height="15" fill="rgb(208,93,54)" fg:x="216" fg:w="1"/><text x="96.2500%" y="767.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.44%)</title><rect x="96.0000%" y="741" width="0.4444%" height="15" fill="rgb(242,1,31)" fg:x="216" fg:w="1"/><text x="96.2500%" y="751.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (1 samples, 0.44%)</title><rect x="96.0000%" y="725" width="0.4444%" height="15" fill="rgb(241,83,25)" fg:x="216" fg:w="1"/><text x="96.2500%" y="735.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (1 samples, 0.44%)</title><rect x="96.0000%" y="709" width="0.4444%" height="15" fill="rgb(205,169,50)" fg:x="216" fg:w="1"/><text x="96.2500%" y="719.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (1 samples, 0.44%)</title><rect x="96.0000%" y="693" width="0.4444%" height="15" fill="rgb(239,186,37)" fg:x="216" fg:w="1"/><text x="96.2500%" y="703.50"></text></g><g><title>__GI_getaddrinfo (1 samples, 0.44%)</title><rect x="96.0000%" y="677" width="0.4444%" height="15" fill="rgb(205,221,10)" fg:x="216" fg:w="1"/><text x="96.2500%" y="687.50"></text></g><g><title>__GI___resolv_context_get (1 samples, 0.44%)</title><rect x="96.0000%" y="661" width="0.4444%" height="15" fill="rgb(218,196,15)" fg:x="216" fg:w="1"/><text x="96.2500%" y="671.50"></text></g><g><title>maybe_init (1 samples, 0.44%)</title><rect x="96.0000%" y="645" width="0.4444%" height="15" fill="rgb(218,196,35)" fg:x="216" fg:w="1"/><text x="96.2500%" y="655.50"></text></g><g><title>__res_vinit (1 samples, 0.44%)</title><rect x="96.0000%" y="629" width="0.4444%" height="15" fill="rgb(233,63,24)" fg:x="216" fg:w="1"/><text x="96.2500%" y="639.50"></text></g><g><title>__resolv_conf_get_current (1 samples, 0.44%)</title><rect x="96.0000%" y="613" width="0.4444%" height="15" fill="rgb(225,8,4)" fg:x="216" fg:w="1"/><text x="96.2500%" y="623.50"></text></g><g><title>__resolv_conf_load (1 samples, 0.44%)</title><rect x="96.0000%" y="597" width="0.4444%" height="15" fill="rgb(234,105,35)" fg:x="216" fg:w="1"/><text x="96.2500%" y="607.50"></text></g><g><title>__GI_getenv (1 samples, 0.44%)</title><rect x="96.0000%" y="581" width="0.4444%" height="15" fill="rgb(236,21,32)" fg:x="216" fg:w="1"/><text x="96.2500%" y="591.50"></text></g><g><title>__strncmp_evex (1 samples, 0.44%)</title><rect x="96.0000%" y="565" width="0.4444%" height="15" fill="rgb(228,109,6)" fg:x="216" fg:w="1"/><text x="96.2500%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (1 samples, 0.44%)</title><rect x="96.4444%" y="597" width="0.4444%" height="15" fill="rgb(229,215,31)" fg:x="217" fg:w="1"/><text x="96.6944%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.44%)</title><rect x="96.4444%" y="581" width="0.4444%" height="15" fill="rgb(221,52,54)" fg:x="217" fg:w="1"/><text x="96.6944%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (1 samples, 0.44%)</title><rect x="96.4444%" y="565" width="0.4444%" height="15" fill="rgb(252,129,43)" fg:x="217" fg:w="1"/><text x="96.6944%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (1 samples, 0.44%)</title><rect x="96.4444%" y="549" width="0.4444%" height="15" fill="rgb(248,183,27)" fg:x="217" fg:w="1"/><text x="96.6944%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (1 samples, 0.44%)</title><rect x="96.4444%" y="533" width="0.4444%" height="15" fill="rgb(250,0,22)" fg:x="217" fg:w="1"/><text x="96.6944%" y="543.50"></text></g><g><title>tokio::runtime::driver::Driver::park (1 samples, 0.44%)</title><rect x="96.4444%" y="517" width="0.4444%" height="15" fill="rgb(213,166,10)" fg:x="217" fg:w="1"/><text x="96.6944%" y="527.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::park (1 samples, 0.44%)</title><rect x="96.4444%" y="501" width="0.4444%" height="15" fill="rgb(207,163,36)" fg:x="217" fg:w="1"/><text x="96.6944%" y="511.50"></text></g><g><title>tokio::runtime::time::Driver::park (1 samples, 0.44%)</title><rect x="96.4444%" y="485" width="0.4444%" height="15" fill="rgb(208,122,22)" fg:x="217" fg:w="1"/><text x="96.6944%" y="495.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (1 samples, 0.44%)</title><rect x="96.4444%" y="469" width="0.4444%" height="15" fill="rgb(207,104,49)" fg:x="217" fg:w="1"/><text x="96.6944%" y="479.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1 samples, 0.44%)</title><rect x="96.4444%" y="453" width="0.4444%" height="15" fill="rgb(248,211,50)" fg:x="217" fg:w="1"/><text x="96.6944%" y="463.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (1 samples, 0.44%)</title><rect x="96.4444%" y="437" width="0.4444%" height="15" fill="rgb(217,13,45)" fg:x="217" fg:w="1"/><text x="96.6944%" y="447.50"></text></g><g><title>epoll_wait (1 samples, 0.44%)</title><rect x="96.4444%" y="421" width="0.4444%" height="15" fill="rgb(211,216,49)" fg:x="217" fg:w="1"/><text x="96.6944%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1 samples, 0.44%)</title><rect x="96.8889%" y="597" width="0.4444%" height="15" fill="rgb(221,58,53)" fg:x="218" fg:w="1"/><text x="97.1389%" y="607.50"></text></g><g><title>tokio::runtime::coop::budget (1 samples, 0.44%)</title><rect x="96.8889%" y="581" width="0.4444%" height="15" fill="rgb(220,112,41)" fg:x="218" fg:w="1"/><text x="97.1389%" y="591.50"></text></g><g><title>tokio::runtime::coop::with_budget (1 samples, 0.44%)</title><rect x="96.8889%" y="565" width="0.4444%" height="15" fill="rgb(236,38,28)" fg:x="218" fg:w="1"/><text x="97.1389%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (1 samples, 0.44%)</title><rect x="96.8889%" y="549" width="0.4444%" height="15" fill="rgb(227,195,22)" fg:x="218" fg:w="1"/><text x="97.1389%" y="559.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1 samples, 0.44%)</title><rect x="96.8889%" y="533" width="0.4444%" height="15" fill="rgb(214,55,33)" fg:x="218" fg:w="1"/><text x="97.1389%" y="543.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="517" width="0.4444%" height="15" fill="rgb(248,80,13)" fg:x="218" fg:w="1"/><text x="97.1389%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="501" width="0.4444%" height="15" fill="rgb(238,52,6)" fg:x="218" fg:w="1"/><text x="97.1389%" y="511.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.44%)</title><rect x="96.8889%" y="485" width="0.4444%" height="15" fill="rgb(224,198,47)" fg:x="218" fg:w="1"/><text x="97.1389%" y="495.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.44%)</title><rect x="96.8889%" y="469" width="0.4444%" height="15" fill="rgb(233,171,20)" fg:x="218" fg:w="1"/><text x="97.1389%" y="479.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.44%)</title><rect x="96.8889%" y="453" width="0.4444%" height="15" fill="rgb(241,30,25)" fg:x="218" fg:w="1"/><text x="97.1389%" y="463.50"></text></g><g><title>std::panicking::try (1 samples, 0.44%)</title><rect x="96.8889%" y="437" width="0.4444%" height="15" fill="rgb(207,171,38)" fg:x="218" fg:w="1"/><text x="97.1389%" y="447.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.44%)</title><rect x="96.8889%" y="421" width="0.4444%" height="15" fill="rgb(234,70,1)" fg:x="218" fg:w="1"/><text x="97.1389%" y="431.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.44%)</title><rect x="96.8889%" y="405" width="0.4444%" height="15" fill="rgb(232,178,18)" fg:x="218" fg:w="1"/><text x="97.1389%" y="415.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.44%)</title><rect x="96.8889%" y="389" width="0.4444%" height="15" fill="rgb(241,78,40)" fg:x="218" fg:w="1"/><text x="97.1389%" y="399.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="373" width="0.4444%" height="15" fill="rgb(222,35,25)" fg:x="218" fg:w="1"/><text x="97.1389%" y="383.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.44%)</title><rect x="96.8889%" y="357" width="0.4444%" height="15" fill="rgb(207,92,16)" fg:x="218" fg:w="1"/><text x="97.1389%" y="367.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (1 samples, 0.44%)</title><rect x="96.8889%" y="341" width="0.4444%" height="15" fill="rgb(216,59,51)" fg:x="218" fg:w="1"/><text x="97.1389%" y="351.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="325" width="0.4444%" height="15" fill="rgb(213,80,28)" fg:x="218" fg:w="1"/><text x="97.1389%" y="335.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="309" width="0.4444%" height="15" fill="rgb(220,93,7)" fg:x="218" fg:w="1"/><text x="97.1389%" y="319.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="293" width="0.4444%" height="15" fill="rgb(225,24,44)" fg:x="218" fg:w="1"/><text x="97.1389%" y="303.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="277" width="0.4444%" height="15" fill="rgb(243,74,40)" fg:x="218" fg:w="1"/><text x="97.1389%" y="287.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="261" width="0.4444%" height="15" fill="rgb(228,39,7)" fg:x="218" fg:w="1"/><text x="97.1389%" y="271.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="245" width="0.4444%" height="15" fill="rgb(227,79,8)" fg:x="218" fg:w="1"/><text x="97.1389%" y="255.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.44%)</title><rect x="96.8889%" y="229" width="0.4444%" height="15" fill="rgb(236,58,11)" fg:x="218" fg:w="1"/><text x="97.1389%" y="239.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="213" width="0.4444%" height="15" fill="rgb(249,63,35)" fg:x="218" fg:w="1"/><text x="97.1389%" y="223.50"></text></g><g><title>&lt;hyper::client::conn::ProtoClient&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="197" width="0.4444%" height="15" fill="rgb(252,114,16)" fg:x="218" fg:w="1"/><text x="97.1389%" y="207.50"></text></g><g><title>&lt;hyper::proto::h2::client::ClientTask&lt;B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="96.8889%" y="181" width="0.4444%" height="15" fill="rgb(254,151,24)" fg:x="218" fg:w="1"/><text x="97.1389%" y="191.50"></text></g><g><title>hyper::proto::h2::client::ClientTask&lt;B&gt;::poll_pipe (1 samples, 0.44%)</title><rect x="96.8889%" y="165" width="0.4444%" height="15" fill="rgb(253,54,39)" fg:x="218" fg:w="1"/><text x="97.1389%" y="175.50"></text></g><g><title>hyper::common::exec::Exec::execute (1 samples, 0.44%)</title><rect x="96.8889%" y="149" width="0.4444%" height="15" fill="rgb(243,25,45)" fg:x="218" fg:w="1"/><text x="97.1389%" y="159.50"></text></g><g><title>tokio::task::spawn::spawn (1 samples, 0.44%)</title><rect x="96.8889%" y="133" width="0.4444%" height="15" fill="rgb(234,134,9)" fg:x="218" fg:w="1"/><text x="97.1389%" y="143.50"></text></g><g><title>tokio::task::spawn::spawn_inner (1 samples, 0.44%)</title><rect x="96.8889%" y="117" width="0.4444%" height="15" fill="rgb(227,166,31)" fg:x="218" fg:w="1"/><text x="97.1389%" y="127.50"></text></g><g><title>tokio::runtime::task::id::Id::next (1 samples, 0.44%)</title><rect x="96.8889%" y="101" width="0.4444%" height="15" fill="rgb(245,143,41)" fg:x="218" fg:w="1"/><text x="97.1389%" y="111.50"></text></g><g><title>__clone3 (4 samples, 1.78%)</title><rect x="96.0000%" y="1253" width="1.7778%" height="15" fill="rgb(238,181,32)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1263.50">_..</text></g><g><title>start_thread (4 samples, 1.78%)</title><rect x="96.0000%" y="1237" width="1.7778%" height="15" fill="rgb(224,113,18)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1247.50">s..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (4 samples, 1.78%)</title><rect x="96.0000%" y="1221" width="1.7778%" height="15" fill="rgb(240,229,28)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1231.50">s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4 samples, 1.78%)</title><rect x="96.0000%" y="1205" width="1.7778%" height="15" fill="rgb(250,185,3)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1215.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4 samples, 1.78%)</title><rect x="96.0000%" y="1189" width="1.7778%" height="15" fill="rgb(212,59,25)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1199.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 1.78%)</title><rect x="96.0000%" y="1173" width="1.7778%" height="15" fill="rgb(221,87,20)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1183.50">c..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (4 samples, 1.78%)</title><rect x="96.0000%" y="1157" width="1.7778%" height="15" fill="rgb(213,74,28)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1167.50">s..</text></g><g><title>std::panic::catch_unwind (4 samples, 1.78%)</title><rect x="96.0000%" y="1141" width="1.7778%" height="15" fill="rgb(224,132,34)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1151.50">s..</text></g><g><title>std::panicking::try (4 samples, 1.78%)</title><rect x="96.0000%" y="1125" width="1.7778%" height="15" fill="rgb(222,101,24)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1135.50">s..</text></g><g><title>std::panicking::try::do_call (4 samples, 1.78%)</title><rect x="96.0000%" y="1109" width="1.7778%" height="15" fill="rgb(254,142,4)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1119.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 1.78%)</title><rect x="96.0000%" y="1093" width="1.7778%" height="15" fill="rgb(230,229,49)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1103.50">&lt;..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (4 samples, 1.78%)</title><rect x="96.0000%" y="1077" width="1.7778%" height="15" fill="rgb(238,70,47)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1087.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 1.78%)</title><rect x="96.0000%" y="1061" width="1.7778%" height="15" fill="rgb(231,160,17)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1071.50">s..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (4 samples, 1.78%)</title><rect x="96.0000%" y="1045" width="1.7778%" height="15" fill="rgb(218,68,53)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1055.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (4 samples, 1.78%)</title><rect x="96.0000%" y="1029" width="1.7778%" height="15" fill="rgb(236,111,10)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1039.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (4 samples, 1.78%)</title><rect x="96.0000%" y="1013" width="1.7778%" height="15" fill="rgb(224,34,41)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1023.50">t..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (4 samples, 1.78%)</title><rect x="96.0000%" y="997" width="1.7778%" height="15" fill="rgb(241,118,19)" fg:x="216" fg:w="4"/><text x="96.2500%" y="1007.50">t..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (4 samples, 1.78%)</title><rect x="96.0000%" y="981" width="1.7778%" height="15" fill="rgb(238,129,25)" fg:x="216" fg:w="4"/><text x="96.2500%" y="991.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 1.78%)</title><rect x="96.0000%" y="965" width="1.7778%" height="15" fill="rgb(238,22,31)" fg:x="216" fg:w="4"/><text x="96.2500%" y="975.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (4 samples, 1.78%)</title><rect x="96.0000%" y="949" width="1.7778%" height="15" fill="rgb(222,174,48)" fg:x="216" fg:w="4"/><text x="96.2500%" y="959.50">t..</text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 1.78%)</title><rect x="96.0000%" y="933" width="1.7778%" height="15" fill="rgb(206,152,40)" fg:x="216" fg:w="4"/><text x="96.2500%" y="943.50">t..</text></g><g><title>std::panic::catch_unwind (4 samples, 1.78%)</title><rect x="96.0000%" y="917" width="1.7778%" height="15" fill="rgb(218,99,54)" fg:x="216" fg:w="4"/><text x="96.2500%" y="927.50">s..</text></g><g><title>std::panicking::try (4 samples, 1.78%)</title><rect x="96.0000%" y="901" width="1.7778%" height="15" fill="rgb(220,174,26)" fg:x="216" fg:w="4"/><text x="96.2500%" y="911.50">s..</text></g><g><title>std::panicking::try::do_call (4 samples, 1.78%)</title><rect x="96.0000%" y="885" width="1.7778%" height="15" fill="rgb(245,116,9)" fg:x="216" fg:w="4"/><text x="96.2500%" y="895.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 1.78%)</title><rect x="96.0000%" y="869" width="1.7778%" height="15" fill="rgb(209,72,35)" fg:x="216" fg:w="4"/><text x="96.2500%" y="879.50">&lt;..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (4 samples, 1.78%)</title><rect x="96.0000%" y="853" width="1.7778%" height="15" fill="rgb(226,126,21)" fg:x="216" fg:w="4"/><text x="96.2500%" y="863.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 1.78%)</title><rect x="96.0000%" y="837" width="1.7778%" height="15" fill="rgb(227,192,1)" fg:x="216" fg:w="4"/><text x="96.2500%" y="847.50">t..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 1.78%)</title><rect x="96.0000%" y="821" width="1.7778%" height="15" fill="rgb(237,180,29)" fg:x="216" fg:w="4"/><text x="96.2500%" y="831.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (4 samples, 1.78%)</title><rect x="96.0000%" y="805" width="1.7778%" height="15" fill="rgb(230,197,35)" fg:x="216" fg:w="4"/><text x="96.2500%" y="815.50">t..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 1.78%)</title><rect x="96.0000%" y="789" width="1.7778%" height="15" fill="rgb(246,193,31)" fg:x="216" fg:w="4"/><text x="96.2500%" y="799.50">&lt;..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (3 samples, 1.33%)</title><rect x="96.4444%" y="773" width="1.3333%" height="15" fill="rgb(241,36,4)" fg:x="217" fg:w="3"/><text x="96.6944%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (3 samples, 1.33%)</title><rect x="96.4444%" y="757" width="1.3333%" height="15" fill="rgb(241,130,17)" fg:x="217" fg:w="3"/><text x="96.6944%" y="767.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (3 samples, 1.33%)</title><rect x="96.4444%" y="741" width="1.3333%" height="15" fill="rgb(206,137,32)" fg:x="217" fg:w="3"/><text x="96.6944%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (3 samples, 1.33%)</title><rect x="96.4444%" y="725" width="1.3333%" height="15" fill="rgb(237,228,51)" fg:x="217" fg:w="3"/><text x="96.6944%" y="735.50"></text></g><g><title>tokio::runtime::context::set_scheduler (3 samples, 1.33%)</title><rect x="96.4444%" y="709" width="1.3333%" height="15" fill="rgb(243,6,42)" fg:x="217" fg:w="3"/><text x="96.6944%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.33%)</title><rect x="96.4444%" y="693" width="1.3333%" height="15" fill="rgb(251,74,28)" fg:x="217" fg:w="3"/><text x="96.6944%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 1.33%)</title><rect x="96.4444%" y="677" width="1.3333%" height="15" fill="rgb(218,20,49)" fg:x="217" fg:w="3"/><text x="96.6944%" y="687.50"></text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (3 samples, 1.33%)</title><rect x="96.4444%" y="661" width="1.3333%" height="15" fill="rgb(238,28,14)" fg:x="217" fg:w="3"/><text x="96.6944%" y="671.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (3 samples, 1.33%)</title><rect x="96.4444%" y="645" width="1.3333%" height="15" fill="rgb(229,40,46)" fg:x="217" fg:w="3"/><text x="96.6944%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (3 samples, 1.33%)</title><rect x="96.4444%" y="629" width="1.3333%" height="15" fill="rgb(244,195,20)" fg:x="217" fg:w="3"/><text x="96.6944%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (3 samples, 1.33%)</title><rect x="96.4444%" y="613" width="1.3333%" height="15" fill="rgb(253,56,35)" fg:x="217" fg:w="3"/><text x="96.6944%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::pre_shutdown (1 samples, 0.44%)</title><rect x="97.3333%" y="597" width="0.4444%" height="15" fill="rgb(210,149,44)" fg:x="219" fg:w="1"/><text x="97.5833%" y="607.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::close_and_shutdown_all (1 samples, 0.44%)</title><rect x="97.3333%" y="581" width="0.4444%" height="15" fill="rgb(240,135,12)" fg:x="219" fg:w="1"/><text x="97.5833%" y="591.50"></text></g><g><title>tokio::util::sharded_list::ShardedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (1 samples, 0.44%)</title><rect x="97.3333%" y="565" width="0.4444%" height="15" fill="rgb(251,24,50)" fg:x="219" fg:w="1"/><text x="97.5833%" y="575.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (1 samples, 0.44%)</title><rect x="97.3333%" y="549" width="0.4444%" height="15" fill="rgb(243,200,47)" fg:x="219" fg:w="1"/><text x="97.5833%" y="559.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.44%)</title><rect x="97.3333%" y="533" width="0.4444%" height="15" fill="rgb(224,166,26)" fg:x="219" fg:w="1"/><text x="97.5833%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.44%)</title><rect x="97.7778%" y="709" width="0.4444%" height="15" fill="rgb(233,0,47)" fg:x="220" fg:w="1"/><text x="98.0278%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.44%)</title><rect x="97.7778%" y="693" width="0.4444%" height="15" fill="rgb(253,80,5)" fg:x="220" fg:w="1"/><text x="98.0278%" y="703.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.44%)</title><rect x="97.7778%" y="677" width="0.4444%" height="15" fill="rgb(214,133,25)" fg:x="220" fg:w="1"/><text x="98.0278%" y="687.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (1 samples, 0.44%)</title><rect x="97.7778%" y="661" width="0.4444%" height="15" fill="rgb(209,27,14)" fg:x="220" fg:w="1"/><text x="98.0278%" y="671.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled (1 samples, 0.44%)</title><rect x="98.2222%" y="709" width="0.4444%" height="15" fill="rgb(219,102,51)" fg:x="221" fg:w="1"/><text x="98.4722%" y="719.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled_to (1 samples, 0.44%)</title><rect x="98.2222%" y="693" width="0.4444%" height="15" fill="rgb(237,18,16)" fg:x="221" fg:w="1"/><text x="98.4722%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.44%)</title><rect x="98.2222%" y="677" width="0.4444%" height="15" fill="rgb(241,85,17)" fg:x="221" fg:w="1"/><text x="98.4722%" y="687.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.44%)</title><rect x="98.2222%" y="661" width="0.4444%" height="15" fill="rgb(236,90,42)" fg:x="221" fg:w="1"/><text x="98.4722%" y="671.50"></text></g><g><title>__memset_evex_unaligned_erms (1 samples, 0.44%)</title><rect x="98.2222%" y="645" width="0.4444%" height="15" fill="rgb(249,57,21)" fg:x="221" fg:w="1"/><text x="98.4722%" y="655.50"></text></g><g><title>&lt;tokio_util::codec::framed_read::FramedRead&lt;T,D&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 1.33%)</title><rect x="97.7778%" y="853" width="1.3333%" height="15" fill="rgb(243,12,36)" fg:x="220" fg:w="3"/><text x="98.0278%" y="863.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next (3 samples, 1.33%)</title><rect x="97.7778%" y="837" width="1.3333%" height="15" fill="rgb(253,128,47)" fg:x="220" fg:w="3"/><text x="98.0278%" y="847.50"></text></g><g><title>tokio_util::util::poll_buf::poll_read_buf (3 samples, 1.33%)</title><rect x="97.7778%" y="821" width="1.3333%" height="15" fill="rgb(207,33,20)" fg:x="220" fg:w="3"/><text x="98.0278%" y="831.50"></text></g><g><title>&lt;h2::codec::framed_write::FramedWrite&lt;T,B&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 1.33%)</title><rect x="97.7778%" y="805" width="1.3333%" height="15" fill="rgb(233,215,35)" fg:x="220" fg:w="3"/><text x="98.0278%" y="815.50"></text></g><g><title>&lt;reqwest::connect::Conn as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 1.33%)</title><rect x="97.7778%" y="789" width="1.3333%" height="15" fill="rgb(249,188,52)" fg:x="220" fg:w="3"/><text x="98.0278%" y="799.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 1.33%)</title><rect x="97.7778%" y="773" width="1.3333%" height="15" fill="rgb(225,12,32)" fg:x="220" fg:w="3"/><text x="98.0278%" y="783.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 1.33%)</title><rect x="97.7778%" y="757" width="1.3333%" height="15" fill="rgb(247,98,14)" fg:x="220" fg:w="3"/><text x="98.0278%" y="767.50"></text></g><g><title>&lt;tokio_rustls::client::TlsStream&lt;IO&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 1.33%)</title><rect x="97.7778%" y="741" width="1.3333%" height="15" fill="rgb(247,219,48)" fg:x="220" fg:w="3"/><text x="98.0278%" y="751.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 1.33%)</title><rect x="97.7778%" y="725" width="1.3333%" height="15" fill="rgb(253,60,48)" fg:x="220" fg:w="3"/><text x="98.0278%" y="735.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (1 samples, 0.44%)</title><rect x="98.6667%" y="709" width="0.4444%" height="15" fill="rgb(245,15,52)" fg:x="222" fg:w="1"/><text x="98.9167%" y="719.50"></text></g><g><title>rustls::conn::ConnectionCommon&lt;Data&gt;::process_new_packets (1 samples, 0.44%)</title><rect x="98.6667%" y="693" width="0.4444%" height="15" fill="rgb(220,133,28)" fg:x="222" fg:w="1"/><text x="98.9167%" y="703.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.44%)</title><rect x="98.6667%" y="677" width="0.4444%" height="15" fill="rgb(217,180,4)" fg:x="222" fg:w="1"/><text x="98.9167%" y="687.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::deframe (1 samples, 0.44%)</title><rect x="98.6667%" y="661" width="0.4444%" height="15" fill="rgb(251,24,1)" fg:x="222" fg:w="1"/><text x="98.9167%" y="671.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (1 samples, 0.44%)</title><rect x="98.6667%" y="645" width="0.4444%" height="15" fill="rgb(212,185,49)" fg:x="222" fg:w="1"/><text x="98.9167%" y="655.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (1 samples, 0.44%)</title><rect x="98.6667%" y="629" width="0.4444%" height="15" fill="rgb(215,175,22)" fg:x="222" fg:w="1"/><text x="98.9167%" y="639.50"></text></g><g><title>&lt;rustls::tls13::Tls13MessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (1 samples, 0.44%)</title><rect x="98.6667%" y="613" width="0.4444%" height="15" fill="rgb(250,205,14)" fg:x="222" fg:w="1"/><text x="98.9167%" y="623.50"></text></g><g><title>ring::aead::less_safe_key::LessSafeKey::open_in_place (1 samples, 0.44%)</title><rect x="98.6667%" y="597" width="0.4444%" height="15" fill="rgb(225,211,22)" fg:x="222" fg:w="1"/><text x="98.9167%" y="607.50"></text></g><g><title>ring::aead::less_safe_key::LessSafeKey::open_within (1 samples, 0.44%)</title><rect x="98.6667%" y="581" width="0.4444%" height="15" fill="rgb(251,179,42)" fg:x="222" fg:w="1"/><text x="98.9167%" y="591.50"></text></g><g><title>ring::aead::less_safe_key::LessSafeKey::open_in_place_separate_tag (1 samples, 0.44%)</title><rect x="98.6667%" y="565" width="0.4444%" height="15" fill="rgb(208,216,51)" fg:x="222" fg:w="1"/><text x="98.9167%" y="575.50"></text></g><g><title>ring::aead::less_safe_key::open_within_ (1 samples, 0.44%)</title><rect x="98.6667%" y="549" width="0.4444%" height="15" fill="rgb(235,36,11)" fg:x="222" fg:w="1"/><text x="98.9167%" y="559.50"></text></g><g><title>ring::aead::aes_gcm::aes_gcm_open (1 samples, 0.44%)</title><rect x="98.6667%" y="533" width="0.4444%" height="15" fill="rgb(213,189,28)" fg:x="222" fg:w="1"/><text x="98.9167%" y="543.50"></text></g><g><title>ring_core_0_17_8_aesni_gcm_decrypt (1 samples, 0.44%)</title><rect x="98.6667%" y="517" width="0.4444%" height="15" fill="rgb(227,203,42)" fg:x="222" fg:w="1"/><text x="98.9167%" y="527.50"></text></g><g><title>_aesni_ctr32_ghash_6x (1 samples, 0.44%)</title><rect x="98.6667%" y="501" width="0.4444%" height="15" fill="rgb(244,72,36)" fg:x="222" fg:w="1"/><text x="98.9167%" y="511.50"></text></g><g><title>&lt;h2::codec::Codec&lt;T,B&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 1.78%)</title><rect x="97.7778%" y="885" width="1.7778%" height="15" fill="rgb(213,53,17)" fg:x="220" fg:w="4"/><text x="98.0278%" y="895.50">&lt;..</text></g><g><title>&lt;h2::codec::framed_read::FramedRead&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 1.78%)</title><rect x="97.7778%" y="869" width="1.7778%" height="15" fill="rgb(207,167,3)" fg:x="220" fg:w="4"/><text x="98.0278%" y="879.50">&lt;..</text></g><g><title>h2::codec::framed_read::decode_frame (1 samples, 0.44%)</title><rect x="99.1111%" y="853" width="0.4444%" height="15" fill="rgb(216,98,30)" fg:x="223" fg:w="1"/><text x="99.3611%" y="863.50"></text></g><g><title>h2::frame::headers::Headers::load_hpack (1 samples, 0.44%)</title><rect x="99.1111%" y="837" width="0.4444%" height="15" fill="rgb(236,123,15)" fg:x="223" fg:w="1"/><text x="99.3611%" y="847.50"></text></g><g><title>h2::frame::headers::HeaderBlock::load (1 samples, 0.44%)</title><rect x="99.1111%" y="821" width="0.4444%" height="15" fill="rgb(248,81,50)" fg:x="223" fg:w="1"/><text x="99.3611%" y="831.50"></text></g><g><title>h2::hpack::decoder::Decoder::decode (1 samples, 0.44%)</title><rect x="99.1111%" y="805" width="0.4444%" height="15" fill="rgb(214,120,4)" fg:x="223" fg:w="1"/><text x="99.3611%" y="815.50"></text></g><g><title>h2::hpack::decoder::Decoder::decode_literal (1 samples, 0.44%)</title><rect x="99.1111%" y="789" width="0.4444%" height="15" fill="rgb(208,179,34)" fg:x="223" fg:w="1"/><text x="99.3611%" y="799.50"></text></g><g><title>h2::hpack::decoder::Decoder::try_decode_string (1 samples, 0.44%)</title><rect x="99.1111%" y="773" width="0.4444%" height="15" fill="rgb(227,140,7)" fg:x="223" fg:w="1"/><text x="99.3611%" y="783.50"></text></g><g><title>h2::hpack::huffman::decode (1 samples, 0.44%)</title><rect x="99.1111%" y="757" width="0.4444%" height="15" fill="rgb(214,22,6)" fg:x="223" fg:w="1"/><text x="99.3611%" y="767.50"></text></g><g><title>&lt;&amp;u8 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.44%)</title><rect x="99.1111%" y="741" width="0.4444%" height="15" fill="rgb(207,137,27)" fg:x="223" fg:w="1"/><text x="99.3611%" y="751.50"></text></g><g><title>all (225 samples, 100%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(210,8,46)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1295.50"></text></g><g><title>tokio-runtime-w (9 samples, 4.00%)</title><rect x="96.0000%" y="1269" width="4.0000%" height="15" fill="rgb(240,16,54)" fg:x="216" fg:w="9"/><text x="96.2500%" y="1279.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="1253" width="2.2222%" height="15" fill="rgb(211,209,29)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1263.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (5 samples, 2.22%)</title><rect x="97.7778%" y="1237" width="2.2222%" height="15" fill="rgb(226,228,24)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1247.50">t..</text></g><g><title>tokio::runtime::task::harness::poll_future (5 samples, 2.22%)</title><rect x="97.7778%" y="1221" width="2.2222%" height="15" fill="rgb(222,84,9)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1231.50">t..</text></g><g><title>std::panic::catch_unwind (5 samples, 2.22%)</title><rect x="97.7778%" y="1205" width="2.2222%" height="15" fill="rgb(234,203,30)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1215.50">s..</text></g><g><title>std::panicking::try (5 samples, 2.22%)</title><rect x="97.7778%" y="1189" width="2.2222%" height="15" fill="rgb(238,109,14)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1199.50">s..</text></g><g><title>std::panicking::try::do_call (5 samples, 2.22%)</title><rect x="97.7778%" y="1173" width="2.2222%" height="15" fill="rgb(233,206,34)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1183.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5 samples, 2.22%)</title><rect x="97.7778%" y="1157" width="2.2222%" height="15" fill="rgb(220,167,47)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1167.50">&lt;..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (5 samples, 2.22%)</title><rect x="97.7778%" y="1141" width="2.2222%" height="15" fill="rgb(238,105,10)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1151.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="1125" width="2.2222%" height="15" fill="rgb(213,227,17)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1135.50">t..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5 samples, 2.22%)</title><rect x="97.7778%" y="1109" width="2.2222%" height="15" fill="rgb(217,132,38)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1119.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (5 samples, 2.22%)</title><rect x="97.7778%" y="1093" width="2.2222%" height="15" fill="rgb(242,146,4)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1103.50">t..</text></g><g><title>hyper::proto::h2::client::conn_task::{{closure}} (5 samples, 2.22%)</title><rect x="97.7778%" y="1077" width="2.2222%" height="15" fill="rgb(212,61,9)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1087.50">h..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="1061" width="2.2222%" height="15" fill="rgb(247,126,22)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1071.50">&lt;..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (5 samples, 2.22%)</title><rect x="97.7778%" y="1045" width="2.2222%" height="15" fill="rgb(220,196,2)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1055.50">f..</text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="1029" width="2.2222%" height="15" fill="rgb(208,46,4)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1039.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="1013" width="2.2222%" height="15" fill="rgb(252,104,46)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1023.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="997" width="2.2222%" height="15" fill="rgb(237,152,48)" fg:x="220" fg:w="5"/><text x="98.0278%" y="1007.50">&lt;..</text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="981" width="2.2222%" height="15" fill="rgb(221,59,37)" fg:x="220" fg:w="5"/><text x="98.0278%" y="991.50">&lt;..</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (5 samples, 2.22%)</title><rect x="97.7778%" y="965" width="2.2222%" height="15" fill="rgb(209,202,51)" fg:x="220" fg:w="5"/><text x="98.0278%" y="975.50">&lt;..</text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="949" width="2.2222%" height="15" fill="rgb(228,81,30)" fg:x="220" fg:w="5"/><text x="98.0278%" y="959.50">&lt;..</text></g><g><title>&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="933" width="2.2222%" height="15" fill="rgb(227,42,39)" fg:x="220" fg:w="5"/><text x="98.0278%" y="943.50">&lt;..</text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll (5 samples, 2.22%)</title><rect x="97.7778%" y="917" width="2.2222%" height="15" fill="rgb(221,26,2)" fg:x="220" fg:w="5"/><text x="98.0278%" y="927.50">h..</text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (5 samples, 2.22%)</title><rect x="97.7778%" y="901" width="2.2222%" height="15" fill="rgb(254,61,31)" fg:x="220" fg:w="5"/><text x="98.0278%" y="911.50">h..</text></g><g><title>h2::proto::connection::DynConnection&lt;B&gt;::recv_frame (1 samples, 0.44%)</title><rect x="99.5556%" y="885" width="0.4444%" height="15" fill="rgb(222,173,38)" fg:x="224" fg:w="1"/><text x="99.8056%" y="895.50"></text></g><g><title>h2::proto::streams::streams::DynStreams&lt;B&gt;::recv_data (1 samples, 0.44%)</title><rect x="99.5556%" y="869" width="0.4444%" height="15" fill="rgb(218,50,12)" fg:x="224" fg:w="1"/><text x="99.8056%" y="879.50"></text></g><g><title>h2::proto::streams::streams::Inner::recv_data (1 samples, 0.44%)</title><rect x="99.5556%" y="853" width="0.4444%" height="15" fill="rgb(223,88,40)" fg:x="224" fg:w="1"/><text x="99.8056%" y="863.50"></text></g><g><title>h2::proto::streams::counts::Counts::transition (1 samples, 0.44%)</title><rect x="99.5556%" y="837" width="0.4444%" height="15" fill="rgb(237,54,19)" fg:x="224" fg:w="1"/><text x="99.8056%" y="847.50"></text></g><g><title>&lt;h2::proto::streams::store::Ptr as core::ops::deref::Deref&gt;::deref (1 samples, 0.44%)</title><rect x="99.5556%" y="821" width="0.4444%" height="15" fill="rgb(251,129,25)" fg:x="224" fg:w="1"/><text x="99.8056%" y="831.50"></text></g><g><title>&lt;h2::proto::streams::store::Store as core::ops::index::Index&lt;h2::proto::streams::store::Key&gt;&gt;::index (1 samples, 0.44%)</title><rect x="99.5556%" y="805" width="0.4444%" height="15" fill="rgb(238,97,19)" fg:x="224" fg:w="1"/><text x="99.8056%" y="815.50"></text></g><g><title>slab::Slab&lt;T&gt;::get (1 samples, 0.44%)</title><rect x="99.5556%" y="789" width="0.4444%" height="15" fill="rgb(240,169,18)" fg:x="224" fg:w="1"/><text x="99.8056%" y="799.50"></text></g></svg></svg>